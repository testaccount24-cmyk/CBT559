/************/
/* divide.c */
/**************************************************************/
/* Divide using numbers too large for long integers where the */
/* remainder is needed and/or an exact quotient is required   */
/**************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

void initialize(void);             /* initialization */
void compute_quotient_place(void); /* compute next digit in quotient */

char dividend[81];          /* user entered dividend string */
char divisor[81];           /* user entered divisor string  */
char quotient[81];          /* computed quotient */
char remainder[81];         /* computed remainder */
int i, j, k, q, r, w, x, y; /* work numbers */
int done = -1;              /* completion indicator */

main() {
  initialize();
  while(!done)
 compute_quotient_place();
  printf("Quotient is: %s",quotient);
  printf("Remainder is: %s",remainder);
}
/*********************************************************/
/* compute the next digit in the quotient. when the      */
/* divisor will no longer fit in the remains of the      */
/* original dividend, done is set to zero and the        */
/* remainder is moved into the remainder string.         */
/*********************************************************/
void compute_quotient_place(void) {
  k = y;
  if((memcmp(dividend,divisor,k)) < 0) {
 k++;
  }
  else if(dividend[0] < divisor[0]) {

  }
}
/*********************************************************/
/* initialize: get dividend and divisor from caller.     */
/* Verify their compositions, and sizes. Put initial     */
/* values in various fields.                             */
/*********************************************************/
void initialize(void) {
   printf("\nEnter the whole number dividend: ");
   gets(dividend);
   k = strlen(dividend);
   if(k > 80) {
  printf("\nToo many digits in dividend, 80 is max.\n");
  exit(0);
   }
   for(i=0;i<k;i++) {
  if(!(isdigit(dividend[i]))) {
    printf("\nDividend must be composed of decimal digits only.\n");
    exit(0);
  }
   }
   if(dividend[0] == '0') {
  printf("\nLeading digit of divident must be greater than zero.\n");
  exit(0);
   }
   printf("\nEnter the whole number divisor: ");
   gets(divisor);
   y = strlen(divisor);
   if(y > 80) {
  printf("\nToo many digits in divisor, 80 is max.\n");
  exit(0);
   }
   for(w=0;w<y;w++) {
  if(!(isdigit(divisor[w]))) {
    printf("\nDivisor must be composed of decimal digits only.\n");
    exit(0);
  }
   if(divisor[0] == '0') {
  printf("\nLeading digit of divisor must be greater than zero.\n");
  exit(0);
   }
   if(k <= y) {
  printf("\nDividend must be longer than divisor.\n");
  exit(0);
   }
   }
   strcpy(quotient,"0");          /* clear quotient */
   strcpy(remainder,"0");         /* clear remainder */
   q = r = 0;                     /* initialize subscripts */
}
