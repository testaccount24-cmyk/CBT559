/**************/
/* endvpgls.c */
/*********************************************************************/
/* Purpose: Identify Endevor elements having no EMVSP.PGMLIST.*      */
/*          dtatsets.                                                */
/* Reads the element records file created by assembler program       */
/* ENDVDATA after sorting the files for BCBS01, PRODSUP, HCS, and    */
/* ITS together on element name and environment name and matches it  */
/* against the list of datasets cataloged under node EMVSP.PGMLIST.* */
/* Any element having no PGMLIST dataset is printed.                 */
/*                                                                   */
/* Author R Thornton Jan 2001                                        */
/*********************************************************************/
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
/*********************************************************************/
/* Function Prototypes                                               */
/*********************************************************************/
int main(void);                /* Executive control routine */
void Initial(void);            /* Initialization routine */
void Process(void);            /* Process control routine */
int  ReadElem(void);           /* Routine to read the ELEMENT file */
int  ReadPgml(void);           /* Routine to read the PGMLIST file */
void Terminat(void);           /* Termination routine */
/*********************************************************************/
/* Global data areas and file descriptions                           */
/*********************************************************************/
FILE *Element;               /* define the ELEMENT file ptr */
FILE *Pgmlist;               /* define the PGMLIST file ptr */

struct ElementRecord {       /* ELEMENT data record */
  char Element[8];           /* Element name */
  char Filler1;
  char Lang[11];             /* Language descriptor */
  char Filler2;
  char Environment[8];       /* Environment name */
  char Filler3;
  char System[8];            /* System name */
  char Filler4;
  char SSName[8];            /* SubSystem name */
  char Filler5;
  char Type[5];              /* Endevor type name */
  char Filler6;
  char PrcGrpName[8];        /* Endevor processor group name */
  char Filler7;
  char PrcName[8];           /* Endevor Processor name */
  char Filler8[9];
} ElemRecd;

int ElemLeng = 80;           /* LRECL for ELEMENT file */
int PgmlLeng = 80;           /* LRECL for PGMLIST file */

char PgmlRecd[80];             /* record from PGMLIST file */
/*********************************************************************/
/* main(): this is the executive control routine                     */
/*********************************************************************/
int main(void) {               /* Executive control routine */
  Initial();              /* initialize for processing */
  while(ElemLeng) {
    Process();                   /* process until end of file */
  }
  Terminat();                   /* terminate processing */
  exit(0);                       /* relinquish control */
}
/*********************************************************************/
/* Initialization: open files, read first record from both inputs.   */
/*********************************************************************/
void Initial(void) {    /* Initialization routine */

  Pgmlist =(fopen("dd:PGMLIST","rb,type=record,recfm=FB,lrecl=80"));
  if(Pgmlist == NULL) {
    printf("Unable to open the PGMLIST file\n");
    exit(8);
  }
  if(ferror(Pgmlist)) {
    perror("Error trying to open the Pgmlist file");
    exit(8);
  }
  Element =(fopen("dd:ELEMENT","rb,type=record,recfm=FB,lrecl=80"));
  if(Element == NULL) {
    printf("Unable to open the ELEMENT file\n");
    exit(8);
  }
  if(ferror(Element)) {
    perror("Unable trying to open the ELEMENT file");
    exit(8);
  }
  ReadElem();              /* Read first ELEMENT record */
  ReadPgml();              /* Read first PGMLIST record */
}
/*********************************************************************/
/* Process: match the ELEMENT and PGMLIST files on element name and  */
/* print any mismatches.                                             */
/*********************************************************************/
void Process(void) {           /* Process control routine */
  int cpr;
  ReadElem();                 /* read ELEMENT record */
  if(ElemLeng != 0) {            /* if more elements */
    cpr = memcmp(ElemRecd.Element, &PgmlRecd[14], 8);
    if(cpr > 0) {
      PgmlRecd[22] = '\x00';     /* terminate string */
      printf("%s has no Endevor Element\n",PgmlRecd);
      ReadPgml();                /* read next PGMLIST record */
    }
    else
      if(cpr < 0) {
        ElemRecd.Filler1 = '\x00';  /* terminate element name */
        ElemRecd.Filler3 = '\x00';  /* terminate environment name */
        ElemRecd.Filler4 = '\x00';  /* terminate system name */
        ElemRecd.Filler5 = '\x00';  /* terminate subsystem name */
        printf("Element %s (%s %s %s) has no PGMLIST dataset\n",
          ElemRecd.Element, ElemRecd.Environment, ElemRecd.System,
          ElemRecd.SSName);
        ReadElem();                /* read next ELEMENT record */
      }
      else {
        ReadElem();                /* read next ELEMENT record */
        ReadPgml();                /* read next PGMLIST record */
      }
  }
}
/*********************************************************************/
/* Read next record from the ELEMENT file                            */
/*********************************************************************/
int  ReadElem(void) {       /* Routine to read the ELEMENT file */
  int rc;
  rc = fread(&ElemRecd, 1, 80, Element); /* Read */
  if(ferror(Element)) {
    perror("Error reading ELEMENT file");
    exit(8);
  }
  if(feof(Element)) {             /* test for end of file */
    rc = 0;
  }
  ElemLeng = rc;                /* set EOF status indicator */
  return(rc);
}
/*********************************************************************/
/* Read next record from the PGMLIST file                            */
/*********************************************************************/
int  ReadPgml(void) {            /* Routine to read the PGMLIST file */
  int rc;
  rc = fread(PgmlRecd, 1, 80, Element); /* Read PGMLIST record */
  if(ferror(Pgmlist)) {
    perror("Error reading PGMLIST file");
    exit(8);
  }
  if(feof(Pgmlist)) {             /* test for end of file */
    rc = 0;
  }
  PgmlLeng = rc;                  /* set EOF status indicator */
  return(rc);
}
/*********************************************************************/
/* Termination routine: close files and prepare to relinquish control*/
/*********************************************************************/
void Terminat(void) {           /* Termination routine */
  fclose(Pgmlist);              /* Close PGMLIST file */
  fclose(Element);              /* Close ELEMENT file */
  return;
}
