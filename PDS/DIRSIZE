/* find.c */
/* experiment with the findfirst() and findnext() functions */
#include <dir.h>
#include <dos.h>
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>

  struct dirinfo {              /* directory information block */
 struct ffblk *dta_ptr;         /* ptr to the dta during searches */
 struct dirinfo *prevdir;       /* ptr to previous block */
 struct dirinfo *nextdir;       /* ptr to next block */
 int dir_level;                 /* directory level (lowest = 0) */
 char dir_name[12];             /* directory name */
 int path_len;                  /* total path name length */
 int nbr_files;                 /* nbr files in directory */
 float size_files;              /* total bytes in files */
 int nbr_subdirs;               /* nbr sub-directories */
 float size_subdirs;            /* total bytes in sub-directories */
 };

main(int argc, char *argv[]) {
  struct ffblk *f;              /* pointer to ffblk */
  int done;                     /* true when find functions complete */
  int level = 0;                /* current subdirectory level */
  char *curdir=NULL;            /* ptr to name of starting directory */
  char dirstr[256];             /* starting directory name */
  char number[9];               /* number to be edited */
  char edited[11];              /* edited number */
  int linect;                   /* line counter */
  char detail_line[79];         /* detail print line */
  char detail_header[79] = {      /* detail header line */
"NAME                              #FI ------FILES #SD ---SUB-DIRS ------TOTAL"}
;
  char ch;                      /* utility string pointer */
  int i, j;                     /* utility subscripts */
  struct dirinfo nulldir = {NULL, NULL, NULL, 0, " ", 0, 0, 0.0, 0, 0.0};
  struct dirinfo firstdir = {NULL, NULL, NULL, 0, " ", 0, 0, 0.0, 0, 0.0};
  struct dirinfo *p, *r;        /* pointers to dirinfo */
  struct ffblk first_dta;       /* initial ffblk */
  /*******************************************************************/
  /* Initialization: get the initial path to use, either typed in on */
  /* the command line, or the current directory by default.          */
  /*******************************************************************/
  if(argc == 2)
 curdir = argv[1];
  else {
 curdir = getcwd(curdir,80);     /* get current directory path */
  }
  if(curdir == NULL)
 if(errno == ENODEV)
   printf("\ngetcwd() returned ENODEV\n");
 else if(errno == ENOMEM)
     printf("\ngetcwd() returned ENOMEM\n");
 else if(errno == ERANGE)
     printf("\ngetcwd() returned ERANGE\n");
   else
     printf("\ngetcwd() returned %d\n",errno);
  strcpy(dirstr,curdir);
  /*******************************************************************/
  /* Build a dirinfo element for the initial directory: get storage  */
  /* for a dta, set the dta_ptr and ODS's dta to this storage, and   */
  /* point p to this element. Issue findfirst for the starting       */
  /* directory.                                                      */
  /*******************************************************************/
  p = &firstdir;
  f = &first_dta;
  p->dta_ptr = f;
  p->path_len = (strlen(dirstr)) + 1;
  strcat(dirstr,"\\*.*");
  setdta((char far *)f);
  done = findfirst(dirstr,f,FA_DIREC+FA_RDONLY+FA_HIDDEN+FA_SYSTEM+FA_LABEL+FA_A
RCH);
  /*******************************************************************/
  /* Collect directory information: search the current directory for */
  /* all items. When a file is found, add 1 to the nbr_files and add */
  /* its size to the size_files fields. When a directory is found,   */
  /* build a dirinfo block for it, get storage for a dta and set it  */
  /* as the DOS dta, then issue a findfirst() and search this new    */
  /* subdirectory. When a subdirectory search finishes, return to    */
  /* its mother and continue until the original directory finishes.  */
  /*******************************************************************/
  while(1) {
 while(!done) {
   if(f->ff_attrib == FA_DIREC) {
  if(f->ff_name[0] == '.');
  else {
    level++;         /* increment sub-directory level */
    dirstr[p->path_len] = '\0'; /* truncate pathname to mother's */
    r = (struct dirinfo *)malloc(sizeof(struct dirinfo)); /* get dirinfo storage
 */
    memcpy(r,&nulldir,sizeof(struct dirinfo)); /* initialize dirinfo */
    strcpy(r->dir_name, f->ff_name); /* set sub-directory name */
    f = (struct ffblk *)malloc(sizeof(struct ffblk)); /* get ffblk storage */
    r->dta_ptr = f;    /* save ffblk ptr in dirinfo */
    setdta((char far *)f);
    while(p->nextdir)
   p = p->nextdir;
    p->nextdir = r;    /* chain dirinfo forward */
    r->nextdir = NULL; /* clear new dirinfo's forward pointer */
    r->prevdir = p;    /* chain new dirinfo backward */
    p = r;             /* point to new dirinfo block */
    p->dir_level = level; /* set sub-directory level */
    strcat(dirstr,p->dir_name); /* build new path name for findfirst() */
    p->path_len = (strlen(dirstr)) + 1; /* set path length */
    strcat(dirstr,"\\*.*");    /* add all files request */
    done = findfirst(dirstr,f,FA_DIREC+FA_RDONLY+FA_HIDDEN+FA_SYSTEM+FA_LABEL+FA
_ARCH);
  }
   }
   else {
  p->nbr_files++;
  p->size_files += (float)f->ff_fsize;
   }
   done = findnext(f);
 }
 if(level == 0)         /* all through if this was initial directory */
   break;
 free(f);               /* free the dta area used for ffblk */
 level--;               /* back up 1 level */
 r = p;                 /* start at current block */
 do                     /* locate mother's dirinfo block */
   r =  r->prevdir;     /* point to previous dirinfo block */
 while((r->dir_level) != level);
 r->nbr_subdirs++;      /* increment nbr sub-directories */
 r->size_subdirs += ((p->size_subdirs) + (p->size_files)); /* compute total of a
ll sizes */
 p = r;                 /* set directory pointer to mother */
 f = p->dta_ptr;        /* point to mother's dta (ffblk) */
 setdta((char far *)f);
 dirstr[p->path_len] = '\0'; /* truncate pathname to mother's */
 done = findnext(f);
  }
  for(i=0;i<sizeof(dirstr);i++)
  dirstr[i] = toupper(dirstr[i]);
  printf("\nThe directory evaluated is: %s",dirstr);
  sprintf(number,"%d",p->nbr_files);
  edit(edited,"zzz,zzz,zz9",number);
  printf("\n   directory contains %s files",edited);
  sprintf(number,"%.0f",p->size_files);
  edit(edited,"zzz,zzz,zz9",number);
  printf("\n   sum of filesizes is %s bytes",edited);
  sprintf(number,"%d",p->nbr_subdirs);
  edit(edited,"zzz,zzz,zz9",number);
  printf("\n   directory contains %s sub-directories",edited);
  sprintf(number,"%.0f",p->size_subdirs);
  edit(edited,"zzz,zzz,zz9",number);
  printf("\n   sum of sub-directory sizes is %s bytes",edited);
  sprintf(number,"%.0f",p->size_subdirs + p->size_files);
  edit(edited,"zzz,zzz,zz9",number);
  printf("\n   total size of this directory is %s bytes",edited);
  printf("\n");
  printf("\nDo you want the detail (y/n)?");
  ch = getch();
  if((ch == 'y') || (ch == 'Y')) {
 p = &firstdir;                    /* point to first directory */
 printf("\n\n\n%s",detail_header); /* print first header line */
 linect=7;
 while(p) {
   printf("\n");
   for(i=0;i<78;i++)
  detail_line[i] = ' ';
   detail_line[78] = '\0';
   linect++;
   i = p->dir_level * 2;
   if(i > 18)
  i = 18;
   if(p->dir_level == 0) {
  j = strlen(dirstr);
  memcpy(detail_line,dirstr,j);
   }
   else {
  j = strlen(p->dir_name);
  memcpy(&detail_line[i],p->dir_name,j);
  }
   sprintf(number,"%d",p->nbr_files);
   edit(&detail_line[34],"zzz",number);
   sprintf(number,"%.0f",p->size_files);
   edit(&detail_line[38],"zzz,zzz,zzz",number);
   sprintf(number,"%d",p->nbr_subdirs);
   edit(&detail_line[50],"zzz",number);
   sprintf(number,"%.0f",p->size_subdirs);
   edit(&detail_line[54],"zzz,zzz,zzz",number);
   sprintf(number,"%.0f",p->size_files + p->size_subdirs);
   edit(&detail_line[66],"zzz,zzz,zzz",number);
   printf("%s",detail_line);
   p = p->nextdir;
   if(linect > 22) {
  printf("\n(Press any key to continue)");
  getch();
  linect = 1;
  printf("\n%s",detail_header);
   }
 }
  }
  printf("\n");
}
