/***********/
/* cfunc.c */
/*********************************************************************/
/* CFUNC is a small C language program designed to test calls from   */
/* COBOL/390 programs passing various data types and values by       */
/* reference, and returning an integer to the caller.                */
/*                                                                   */
/* Since COBOL's normal passing method is via pointers to the real   */
/* data elements, this routine expects to receive a set of pointers  */
/* to the parameters sent.                                           */
/*                                                                   */
/* At present this routine works properly when statically linked with*/
/* the calling COBOL/390 program, but abends S0C7 when called        */
/* dynamically. I have tried using extern statements, but without    */
/* success. I asked IBM for help using an ETR via ibmlink, but       */
/* learned nothing new; had already tried everything suggested.save; */
/*                                                                   */
/* Author R Thornton August 2001                                     */
/*********************************************************************/
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <math.h>

/********************************************************************/
/*        function prototypes                                       */
/********************************************************************/
int CFUNC(char*, char**, short*, float*); /* prototype for function */

/********************************************************************/
/*        CFUNC function to process data passed from COBOL/390      */
/********************************************************************/
int CFUNC(char *in_char,
          char **in_string,
          short *in_int,
          float *in_float) {

  int return_value;
  char rcv_string[7];

  printf("\n----------------------------------------------------");
  printf("\nCFUNC received character %c",*in_char);
  memcpy(rcv_string, in_string, 6);    /* make a C type string */
  rcv_string[6] = '\0';                 /* add null terminator */
  printf("\nCFUNC received string %s",rcv_string);
  printf("\nCFUNC received int %hd",*in_int);
  printf("\nCFUNC received float %f",*in_float);

  *in_char = 'Z';
  memcpy(in_string, "RETSTG", 6);
  *in_int = 200;
  *in_float = 300.400;

  return_value = -8;

  return return_value;
}
