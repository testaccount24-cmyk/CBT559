/* maketst: Read a master test file containing questions and multiple */
/* choice answers. Ask the user how many test questions for the output */
/* and randomly select this number of questions from the master input */
/* The first answer in the master is assumed to be the correct answer, */
/* and is written as the 1st, 2nd, 3rd, or 4th answer. All questions begin*/
/* with the question number followed by a right parenthesis. The four */
/* answers follow, each beginning with A), B), C), or D). All lines must */
/* end with CR/LF. An output report shows the source of the question, */
/* and itscorrect answers, and its correct answer in the output test. */
/* 1. Initialize */
/* 2. Read in the Master Test File */
/* 3. Ask user for number of output test questions */
/* 4. Develop a random list of that many questions from the master test */
/* 5. Write the output test file:
/*    .Locate each selected question in the Master Test */
/*    .Randomly decide which answer will be the correct one */
/*    .Write the question to the output test */
/*    .Write the answers to the output test */
/*    .Save source and answer data for the answer sheet */
/* 6. Write the answer sheet */
#include <stdio.h>
#include <dir.h>
#include <alloc.h>

#define MAX 100

main(int argc, char *argv[])
{
 FILE *mastfile,*testfile;
    struct ffblk dir_entry;
 int ch,i;
 long bytes=0;
    char far *mastdata, far *curmast;
    char far *outques[MAX]; /* an array of pointers to char */
/* First, check the command line parameters for input and output file names */
/* If not entered, show syntax and exit. If given, open both files, and */
/* read the master file directory to get input file size. */
 if(argc!=3)
  {
  printf("\nSYNTAX: maketst [d:][path]master[.ext] [d:][path]outtest[.ext]");
  exit();
  }
 if((mastfile=fopen(argv[1],"r"))==NULL)
  {
  printf("\nUnable to open master test file %s.",argv[1]);
  exit();
  }
 if((testfile=fopen(argv[2],"w"))==NULL)
  {
  printf("\nUnable to open output test file %s.",argv[2]);
  exit();
  }
 i=findfirst(argv[1],&dir_entry,0);
 if(i != 0)
 {
  printf("\nUnable to read directory for master file %s.",argv[1]);
  exit();
 }
/* Get storage for the master file and read it into memory. */
    mastdata = (char far *)farmalloc(dir_entry.ff_fsize);
 if(mastdata == (char far *) NULL)
 {
  printf("\nUnable to get %ld bytes of storage to load %s",dir_entry.ff_fsize,ar
gv[2]);
  exit();
 }
 curmast = mastdata;
 while((ch=getc(mastfile)) != EOF)
 {
  *(curmast++)= ch;
        bytes++;
 }
 printf("\nLoaded %ld bytes into memory from %s.",bytes,argv[1]);
 fclose(mastfile);
 fclose(testfile);
}
