/**************************************************************************/
/*                         polling using O_NDELAY                         */
/* fcntl() can be used to set O_NDELAY on a file descriptor associated    */
/* with a terminal. This allows read() to return immediately if no data   */
/* has been typed in on the terminal. This type of input is referred to as*/
/* polling and is often used in programs that must regularly perform some */
/* actions regardless of user input. Note that polling cannot be done by  */
/* setting MIN and TIME to zero as a value of zero disables them.         */
/*                                                                        */
/* From "Topics in C Programming" by Stephen G. Kochan and Patrick H. Wood*/
/*      Chapter 6: The UNIX System Interface, pages 274-277               */
/**************************************************************************/

#include <errno.h>
#include <stdio.h>
#include <termio.h>
#include <fcntl.h>
#include <stdlib.h>

main() {
 struct termio save, term;
 char          in, outbuf[20];
 int           nchar, savefcntl;
 void          do_things(void);

 /* turn on O_NDELAY to allow polling */

 savefcntl = fcntl(0, F_GETFL, 0);  /* get status flags associated */
                                     /* with standard input */

 fcntl(0, F_SETFL, savefcntl | O_NDELAY); /* turn on "no delay" mode */
                                           /* on standard input */

 if(ioctl(0, TCGETA, &term) == -1) {   /* set up to allow each character */
                    /* to be read as it is typed in.  */
                    /* Now, when read is called, it will */
                    /* read a single character if one */
                    /* was typed since the last read, */
                    /* and it will return without */
                    /* waiting if nothing has been typed */
  fprintf(stderr, "standard input not a tty\n");
  exit(errno);
 }

 /* save old tty state */

 save = term;

 /* turn off canonical processing */

 term.c_lflag &= ~ICANON;  /* if canonical processing is left on, read */
              /* will return without reading anything until */
              /* a RETURN is entered, then the entire line */
              /* will be available.

 /*
 ** set MIN to one and TIME to zero
 ** can read each character as it is typed
 */

 term.c_cc[VMIN] = 1;
 term.c_cc[VTIME] = 0;

 /* SET NEW TERMINAL STATE */

 ioctl (0, TCSETA, &term);

 /* input characters until q is typed */

 do {
  write(1, ": ", 2);
  do_things();
  nchar = read(0, &in, 1);

  if(nchar != 0)
   sprintf((outbuf, " got a '%c'\n", in);
  } while(in != 'q');

  /* reset old tty state */

  ioctl(0, TCSETA, &save);
  fcntl(0, F_SETFL, savefcntl);

  exit(EXIT_SUCCESS);
{

void do_things(void) {
 sleep(1);
}
