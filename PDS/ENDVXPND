/**************/
/* endvxpnd.c */
/*****************************************************************/
/* Program to expand a compressed Endevor file. Each compressed  */
/* record read from the input1 file is scanned byte-by-byte. When*/
/* the input byte is \xFC, the next byte is a character count,   */
/* the input byte is \xFD, the next byte is the number of blanks */
/* to follow. in all other cases, the input character is copied  */
/* to the output file record.                                    */
/* Author R Thornton Dec 2000                                    */
/*****************************************************************/
#include <stdio.h>
#include <stdlib.h>

/*****************************************************************/
/* Global data areas                                             */
/*****************************************************************/
  char InRec[256];                   /* record from input1 file */
  int InRecLen,OutRecLen;            /* record lengths */
  int InByt;                         /* current InRec byte number */
  int MaxSize = 0;                   /* maximum output1 record size */
  int MinSize = 2000000;             /* Minimum output1 record size */
  char OutRec[28011];                /* record to output1 file */
  int MoreRecords = -1;              /* zero at EOF INPUT1 */
  FILE *input1,*output1;             /* file pointers */

/*****************************************************************/
/* Function prototypes                                           */
/*****************************************************************/
int main(void);                      /* Executive control routine */
void Initialize(void);               /* Initialization routine */
void Process(void);                  /* Processing routine */
void ReadInput1(void);               /* Reads the INPUT1 file */
void WriteOutput1(void);             /* Writes the OUTPUT1 file */
void RepeatBlanks(void);             /* Repeat blanks routine */
void RepeatChars(void);              /* Repeat characters routine */
void Terminate(void);                /* Termination routine */
/*****************************************************************/
/* main() function: executive control                            */
/*****************************************************************/
int main() {
  Initialize();                      /* Initialize for processing */
  while(MoreRecords)                 /* Until INPUT1 is exhausted, */
    Process();                       /*    process records. */
  Terminate();                       /* Terminate processing */
  return(0);
}
/*****************************************************************/
/* Initialize(): Initialization routine. Opens files.            */
/*****************************************************************/
void Initialize(void) {
  input1=fopen("dd:input1","rb,type=record,recfm=vba,lrecl=255");
  if(input1 == NULL) {
    perror("\nCan't open the INPUT1 file");
    exit(8);
  }
  output1=fopen("dd:output1","wb,type=record,recfm=vba,lrecl=28011");
  if(output1 == NULL) {
    perror("\nCan't open the OUTPUT1 file");
    exit(8);
  }
}
/*****************************************************************/
/* Process: for each INPUT1 record, scan byte by byte. Copy all  */
/* input bytes except \xFC and \xFD directly to the output       */
/* record. \xFD is followed by a blank byte count, so that many  */
/* blanks are written to the output file. \xFC is followed by a  */
/* repeat count, then by the character to be repeated so that    */
/* the character is repeated in the output file record that many */
/* times.                                                        */
/*****************************************************************/
void Process(void) {
  ReadInput1();              /* Read next INPUT1 record */
  if(!MoreRecords) return;   /* Return if end of file */
  for(InByt=0,OutRecLen=0;InByt<InRecLen;) {
    if(InRec[InByt] == '\xFC')
      RepeatChars();
    else
      if(InRec[InByt] == '\xFD')
        RepeatBlanks();
      else
        OutRec[OutRecLen++] = InRec[InByt++];
  }
  WriteOutput1();            /* write OutRec to output1 file */
}
/*****************************************************************/
/* RepeatChars() replicates characters to the OutRec area for the*/
/* length specified in the byte following a \xFC in InRec. The   */
/* character to be replicated follows the length byte.           */
/*****************************************************************/
void RepeatChars(void) {
  int i;
  char k;

  InByt++;                   /* step past the \xFC */
  i = InRec[InByt++];        /* pick up replicate count */
  k = InRec[InByt++];        /* pick up replicate character */
  for(;i;i--)
    OutRec[OutRecLen++] = k; /* move character to OutRec */
}
/*****************************************************************/
/* RepeatBlanks() replicates blanks to the OutRec area for the   */
/* length specified in the byte following a \xFD in InRec.       */
/*****************************************************************/
void RepeatBlanks(void) {
  int i;

  InByt++;                   /* step past the \xFD */
  for(i=InRec[InByt++];i;i--)
    OutRec[OutRecLen++] = ' '; /* move a blank to OutRec */
}
/*****************************************************************/
/* ReadInput1() reads the next record from the INPUT1 file into  */
/* the inrec area. At end of file, the MoreRecords field is set  */
/* to zero (false).                                              */
/*****************************************************************/
void ReadInput1(void) {
  InRecLen=fread(InRec, 1,  255, input1);
  if(ferror(input1)) {
    perror("\nError (ferror) reading INPUT1 file");
    exit(8);
  }
  if(feof(input1)) {
    MoreRecords = 0;
    return;
  }
  if(InRecLen == 0) {
    perror("\nError (0 read) reading INPUT1 file");
    exit(8);
  }
}
/*****************************************************************/
/* WriteOutput1 writes the record in the OutRec area for the     */
/* length given by the OutRecLen field to the OUTPUT1 file.      */
/*****************************************************************/
void WriteOutput1(void) {
  if(OutRecLen < MinSize) MinSize = OutRecLen;
  if(OutRecLen > MaxSize) MaxSize = OutRecLen;
  fwrite(OutRec, 1,  OutRecLen, output1);
  if(ferror(output1)) {
    perror("\nError (ferror) writing OUTPUT1 file");
    exit(8);
  }
}
/*****************************************************************/
/* Terminate() closes the files and prepares for termination.    */
/*****************************************************************/
void Terminate(void) {
  fclose(input1);
  fclose(output1);
  printf("\nMaximum output record size was %d, minimum was %d.",
    MaxSize, MinSize);
}
