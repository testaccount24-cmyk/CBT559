/*************/
/* purebre.c */
/*******************************************************************/
/* reads a pcplus log file and removes the Blue Ridge Express (BRE)*/
/* data, leaving only the text of messages.                        */
/*                                                                 */
/* Author R Thornton January 1995                                  */
/*******************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void initialize(int argc, char *argv[]); /* initialization function */
void mainline(void);                  /* mainline function */
void process(void);                   /* process input records */
void terminate(void);                 /* termination function */
void readrec(void);                   /* read next input file record */
void writerec(void);                  /* write record to output file */

FILE *infile, *outfile;               /* file handle pointers */
char innam[81];                       /* input file name */
char outnam[81];                      /* output file name */

char inrecord[256];                   /* input file record area */
char outrecord[256];                  /* output file record area */


int i,j,k;                            /* general purpose int */
int goodrec = 0;                      /* good record indicator */
int morerecs = -1;                    /* input end-of-file switch */
long incount = 0;                     /* input record counter */
long outcount = 0;                    /* output record counter */


void main(int argc, char *argv[]) {
  initialize(argc, argv);       /* open files */
  while(morerecs)               /* perform mainline until */
    mainline();                 /* no more records */
  terminate();                  /* close files */
  exit(0);                      /* quit */
}
/*********************************************************************/
/* mainline function: process input file until no more records.      */
/*********************************************************************/
void mainline(void) {
  process();                 /* move input record to print */
  if(goodrec)                /* if it is a good message text record*/
    writerec();              /* write an output record */
  readrec();                 /* read next input record */
}
/*********************************************************************/
/* initialization: open files, read first input record.              */
/*********************************************************************/
void initialize(int argc, char *argv[]) {
  if(argc == 3) {
    strcpy(innam,argv[1]);
    strcpy(outnam,argv[2]);
  }
  else {
    printf("\nEnter input file spec: ");
    gets(innam);
    printf("\nEnter output file spec: ");
    gets(outnam);
  }
  if((infile=fopen(innam,"rb")) == NULL) { /* open input */
    printf("Can't open file %s.",innam);
    exit(1);
  }
  if((outfile=fopen(outnam,"wb")) == NULL) { /* open output */
    printf("Can't open file %s.",outnam);
    exit(1);
  }
  readrec();             /* read first input file record */
}
/*********************************************************************/
/* read next input file record. at end of file, set morerecs switch. */
/*********************************************************************/
void readrec() {
  if(fgets(inrecord,255,infile) == NULL) /* read input until eof */
    morerecs = 0;                        /* set switch at end of file*/
  if(morerecs)
    incount++;                           /* add 1 to records read */
}
/*********************************************************************/
/* process input records: throw away those not part of message text  */
/*********************************************************************/
void process() {
  goodrec = 0;                  /* presume record to be discarded */
  i = strlen(inrecord);         /* get record length */
  for(k=0,j=0; j<i; j++) {
    if((inrecord[j] == '\r') || (inrecord[j] == '\n')) {
      goodrec = 1;              /* end of record, all o.k. */
      break;
    }
   if((inrecord[j] < '\x20') || (inrecord[j] > '\x7e'))
     return;                    /* invalid character found */
   if(inrecord[j] == ' ')
     k++;
  }
  if(k == i)                     /* all blanks? */
    return;                      /* yes, drop it */
}
/*********************************************************************/
/* write a record to the output file                                 */
/*********************************************************************/
void writerec() {
  fputs(outrecord,outfile);        /* write output record */
  outcount++;                      /* add 1 to records written */
}
/*********************************************************************/
/* termination: close files                                          */
/*********************************************************************/
void terminate() {
  fclose(infile);                           /* close files */
  fclose(outfile);
}
