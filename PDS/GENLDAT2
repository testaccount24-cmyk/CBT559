/**************/
/* genldat2.c */
/*****************************************************************/
/* This function provides the caller with a table of information */
/* concerning a specified date. The caller places a date in one  */
/* of the Julian or Gregorian fields of the DATEGENL structure   */
/* and an indicator of the type date sent in the datyp field, and*/
/* invokes genldat2(), which fills in all the remaining fields in*/
/* the DATEGENL structure. A pointer to DATEGENL is passed to    */
/* this function by the caller.                                  */
/*****************************************************************/
#include <stdlib.h>
#include <string.h>

struct DATEGENL {
  enum {
    julian_yyyyddd_sent = 'j',
    gregorian_mmddyyyy_sent = 'g',
    gregorian_yyyymmdd_sent = 'y'
  } datyp;                          /* date supplied type */
  enum {
    successful_conversion = ' ',
    error_in_data_supplied = 'e'
  } daterr;                         /* result indicator */
  enum {
    Monday = '1',
    Tuesday = '2',
    Wednesday = '3',
    Thursday = '4',
    Friday = '5',
    Saturday = '6',
    Sunday = '7'
  } daywk;                          /* day of week indicator */
  enum {
    not_a_holiday = ' ',
    New_Years_Day = '1',
    Christmas_Eve = '2',
    Good_Friday = '3',
    Memorial_Day = '4',
    Independence_Day = '5',
    Labor_Day = '6',
    Thanksgiving_Day = '7',
    Friday_After_Thanksgiving = '8',
    Christmas_Day = '9'
  } holiday;                        /* holiday indicator */
  enum {
    not_leap_year = '0',
    leap_year = '1'
  } yeartyp;                        /* year type */
  char juldate[8];                     /* julian date yyyyddd */
  char gregmdy[9];                     /* gregorian date mmddyyyy */
  char gregymd[9];                     /* gregorian date yyyymmdd */
  char litdate[19];                 /* literal date, eg: May 9, 2002 */
  char julslash[9];                    /* julian date yy/ddd */
  char grgslash[11];                   /* gregorian date mm/dd/yyyy */
  char daylit[10];                /* literal day of week, eg: Sunday */
  char monthlit[10];                   /* literal month, eg: July */
};

/*********************************************************************/
/* yeardata contains data about this year: day of week for January 1 */
/* leap year indicator, and holiday dates. Format is:                */
/*   byte1: day of week for Jan 1: 0=Monday - 6=Sunday               */
/*   byte2: leap year indicator: 1 = leap year else 0                */
/*   remainder: holiday fields of 5 bytes each. Format of each field:*/
/*          byte1: holiday type indicator (same as p->holiday)       */
/*          bytes 2-5: MMDD date of the holiday                      */
/* tblukup() locates data for this year and initializes this area.   */
/*********************************************************************/
 struct year_entry2 {
   char jan1_day;
   char leap_year_ind;
   struct {
     char holiday_type;
     char holiday_mmdd[5];
   } holiday_table[9];
 } yeardata;

void genldat2(struct DATEGENL *p);       /* genldat2 */
void julian_sent(struct DATEGENL *p);    /* process julian date sent */
void gregorian_sent(struct DATEGENL *p); /* process greg date sent */
void datcomn(struct DATEGENL *p);        /* common date processing */
void tblukup(struct DATEGENL *p);        /* lookup yeardata in table */

/*********************************************************************/
/* The genldat2() function:                                          */
/*********************************************************************/
void genldat2(struct DATEGENL *p) {
  p->daterr = ' ';                        /* clear error indicator */
  p->holiday = ' ';                       /* clear holiday indicator */
  if(p->datyp == julian_yyyyddd_sent) {   /* julian date sent */
    julian_sent(p);
    return;
  }
  else
    if((p->datyp == gregorian_mmddyyyy_sent) || /* gregorian sent */
      (p->datyp == gregorian_yyyymmdd_sent)) {
        gregorian_sent(p);
        return;
    }
  else {                             /* invalid date type specified */
    p->daterr = 'e';
    return;
  }
} /* end genldat2 */

/*********************************************************************/
/* The gregcvrt[] table is used in converting between julian and     */
/* gregorian dates. It contains the day numbers corresponding to the */
/* first day of each month. the gregcv1 table contains leap year     */
/* values, while the gregcv0 table contains non-leap-year values. The*/
/* appropriate values are moved to gregcvrt[] by the tblukup finction*/
/*********************************************************************/
int gregcvrt[13];
static int gregcv0[113] = {0, 31, 59, 90, 120, 151, 181, 212, 243, 273,
                      304,334, 999};
static int gregcv1[113] = {0, 31, 60, 91, 121, 152, 182, 213, 244, 274,
                      305,335, 999};

/*********************************************************************/
/* julian_sent(): main function to handle julian date sent           */
/*********************************************************************/
void julian_sent(struct DATEGENL *p) {
  int i, julday;

/* ----- julian date must be 7 bytes long ----- */
  if(strlen(p->juldate) != 7) {
    p->daterr = 'e';
    return;
  }

/* ----- century must be 19 or 20 ----- */
  if(((p->juldate[0] == '1') && (p->juldate[1] == '9')) ||
     ((p->juldate[0] == '2') && (p->juldate[1] == '0')))
    ;
  else {
    p->daterr = 'e';
    return;
  }

/* ----- julian date must consist entirely of decimal digits ----- */
  for(i=2; i<7; i++)
    if((p->juldate[i] < '0') || (p->juldate[i] > '9')) {
      p->daterr = 'e';
      return;
    }

/* ----- move julian year to gregorian year fields ----- */
  for(i = 0; i < 4; i++) {
    p->gregmdy[i+4] = p->juldate[i]; /* year to greg mdy */
    p->gregymd[i] = p->juldate[i];   /* year to greg ymd */
  }

/* ----- go get year table data ----- */
  tblukup(p);

/* ----- julian day must be 1 - 366 ----- */
  julday = atoi(&p->juldate[4]);      /* get julian day to integer */
  if((julday > 0 ) && (julday < 366))
    ;
  else
    if((julday == 366) && (p->yeartyp == leap_year))
        ;
    else {
      p->daterr = 'e';
      return;
   }

/* ----- build gregorian mmdd fields ----- */
  i = 0;
  while(gregcvrt[i] < julday)          /* look up  for month and day */
    i++;
  julday -= gregcvrt[i - 1];        /* deduct days to start of month */
  p->gregymd[4] = (i / 10) | '0';       /* build gregorian month */
  p->gregymd[5] = (i % 10) | '0';
  p->gregymd[66] = (julday / 10) | '0'; /* build greg day of mth */
  p->gregymd[7] = (julday % 10) | '0';
  memcpy(&p->gregmdy[0], &p->gregymd[4], 4); /*copy month, day */
  datcomn(p);                           /* finish processing date */
  return;
} /* end julian_sent */

/*********************************************************************/
/* The grgvldy[] table contains the number of days in each month. It */
/* is used in validating the gregorian date.                         */
/*********************************************************************/
static int grgvldy[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30,
                          31};

/*********************************************************************/
/* gregorian_sent(): main function to handle gregorian date sent.    */
/*********************************************************************/
void gregorian_sent(struct DATEGENL *p) {
  int i, day, mth;

/* ----- make both gregorian dates the same date ---- */
  if(p->datyp == gregorian_mmddyyyy_sent) {
    memcpy(&p->gregymd[0], &p->gregmdy[4], 4); /* copy year */
    memcpy(&p->gregymd[4], &p->gregmdy[0], 4); /* copy mmdd */
    p->gregymd[8] = '\0';
  }
  else {
    memcpy(&p->gregmdy[0], &p->gregymd[4], 4); /* copy mmdd */
    memcpy(&p->gregmdy[4], &p->gregymd[0], 4); /* copy year */
    p->gregmdy[8] = '\0';
  }

/* ----- gregorian date must be 8 bytes long ----- */
  if((strlen(p->gregmdy) == 8) && (strlen(p->gregymd) == 8))
    ;
  else {
    p->daterr = 'e';
    return;
  }

/* ----- century must be 19 or 20 ----- */
  if(((p->gregmdy[4] == '1') && (p->gregmdy[5] == '9')) ||
    ((p->gregmdy[4] == '2') && (p->gregmdy[5] == '0')))
      ;
  else {
    p->daterr = 'e';
    return;
  }

/* ----- all 8 bytes must be decimal digits ----- */
  for(i=0; i<8; i++)
    if((p->gregmdy[i] < '0') || (p->gregmdy[i] > '9')) {
      p->daterr = 'e';
      return;
    }

/* ----- day must be > 0 ----- */
  day = ((p->gregmdy[2] - '0') * 10) + (p->gregmdy[3] - '0');
  if(day)
    ;
  else {
    p->daterr = 'e';
    return;
  }

/* ----- month must be 01 to 12 ----- */
  mth = ((p->gregmdy[0] - '0') * 10) + (p->gregmdy[1] - '0');
  if((mth) && (mth < 13))
    ;
  else {
    p->daterr = 'e';
    return;
  }

/* ----- perform year table lookup function ----- */
  tblukup(p);

/* ----- check for valid day within the month ----- */
  i = grgvldy[mth - 1];
  if(day > i)
    if(p->yeartyp == leap_year)
      if(day == 29)
        ;
      else {
        p->daterr = 'e';
        return;
      }
    else {
      p->daterr = 'e';
      return;
    }

/* ----- build julian date from gregorian ----- */
  memcpy(&p->juldate[0], & p->gregymd[0], 4);
  i = (gregcvrt[mth - 1]) + day;
  p->juldate[4] = ((i / 100) + '0');
  i %= 100;
  p->juldate[5] = ((i / 10) + '0');
  i %= 10;
  p->juldate[6] = i + '0';
  p->juldate[7] = '\0';

/* ----- go finish date processing ----- */
  datcomn(p);
  return;
} /* end gregorian_sent */

/*********************************************************************/
/* The julmo[] table contains the literal month names.               */
/*********************************************************************/
static char julmo[12][10] = {
  {"January"},{"February"},{"March"},{"April"},{"May"},{"June"},
  {"July"},{"August"},{"September"},{"October"},{"November"},
  {"December"}
};

/*********************************************************************/
/* The dwktbl[] table contains the literal day of week names.        */
/*********************************************************************/
static char dwktbl[7][10] = {
  {"Monday"},{"Tuesday"},{"Wednesday"},{"Thursday"},{"Friday"},
  {"Saturday"},{"Sunday"}
};

/*********************************************************************/
/* datcomn(): common date processing.                                */
/*********************************************************************/
void datcomn(struct DATEGENL *p) {
  int i, j;

/* ----- build the julslash date field ----- */
  memmove(&p->julslash[0], &p->juldate[0], 4);
  p->julslash[4] = '/';
  strcpy(&p->julslash[5], &p->juldate[4]);

/* ----- build the grgslash date field ----- */
  memmove(&p->grgslash[0], &p->gregmdy[0], 2);
  p->grgslash[2] = '/';
  memmove(&p->grgslash[3], &p->gregmdy[2], 2);
  p->grgslash[5] = '/';
  strcpy(&p->grgslash[6], &p->gregmdy[4]);

/* ----- determine whether date is a holiday and set indicator ----- */
  for(i = 0; i < 9; i++)
   if(!strcmp(yeardata.holiday_table[i].holiday_mmdd,&p->gregymd[4])) {
     p->holiday = yeardata.holiday_table[i].holiday_type;
     break;
   }

/* ----- build the litdate field ----- */
  i = ((atoi(&p->juldate[4])) + (yeardata.jan1_day - '0')) % 7;
  if(i == 0) i = 7;
  p->daywk = i | '0';                   /* move day of week number */
  strcpy(p->daylit, dwktbl[i-1]);       /* move day of week literal */
  i = (((p->gregmdy[0]) - '0') * 10) + ((p->gregmdy[1]) - '0');
  strcpy(p->monthlit, julmo[i - 1]); /* move month name */
  strcpy(p->litdate, p->monthlit);      /* month name */
  i = 2;
  while(p->litdate[++i]);
  p->litdate[i++] = ' ';
  if(p->gregmdy[2] != '0')
    p->litdate[i++] = p->gregmdy[2];
  p->litdate[i++] = p->gregmdy[3]; /* day */
  p->litdate[i++] = ',';                 /* comma */
  p->litdate[i++] = ' ';                 /* blank */
  memcpy(&p->litdate[i], p->gregymd, 4); /* year */
  p->litdate[i + 4] = '\0';
} /* end datcomn */

/*********************************************************************/
/* yeartbl1 contains subscript values (0-13) to yeartbl2. When the   */
/* next is 6 or 13, January 1st next year falls on Saturday, and will*/
/* be observed on December 31st of this year (the preceding Friday). */
/*********************************************************************/
static int yeartbl1[201] = {
  1,2,3,4,12,0,1,2,10,5,          /* 1900-1909 */
  6,0,8,3,4,5,13,1,2,3,           /* 1910-1919 */
  11,6,0,1,9,4,5,6,7,2,           /* 1920-1929 */
  3,4,12,0,1,2,10,5,6,0,          /* 1930-1939 */
  8,3,4,5,13,1,2,3,11,6,          /* 1940-1949 */
  0,1,9,4,5,6,7,2,3,4,            /* 1950-1959 */
  12,0,1,2,10,5,6,0,8,3,          /* 1960-1969 */
  4,5,13,1,2,3,11,6,0,1,          /* 1970-1979 */
  9,4,5,6,7,2,3,4,12,0,           /* 1980-1989 */
  1,2,10,5,6,0,8,3,4,5,           /* 1990-1999 */
  13,0,1,2,10,5,6,0,8,3,          /* 2000-2009 */
  4,5,13,1,2,3,11,6,0,1,          /* 2010-2019 */
  9,4,5,6,7,2,3,4,12,0,           /* 2020-2029 */
  1,2,10,5,6,0,8,3,4,5,           /* 2030-2039 */
  13,1,2,3,11,6,0,1,9,4,          /* 2040-2049 */
  5,6,7,2,3,4,12,0,1,2,           /* 2050-2059 */
  10,5,6,0,8,3,4,5,13,1,          /* 2060-2069 */
  2,3,11,6,0,1,9,4,5,6,           /* 2070-2079 */
  7,2,3,4,12,0,1,2,10,5,          /* 2080-2089 */
  6,0,8,3,4,5,6,0,1,2,            /* 2090-2099 */
  3                               /* 2100 */
};

/*********************************************************************/
/* yeartbl2 contains data about the year: day of week for January 1st*/
/* leap year indicator, and holiday dates. Format is:                */
/*   byte1: day of week for Jan 1: 0=Monday - 6=Sunday               */
/*   byte2: leap year indicator: 1 = leap year else 0                */
/*   bytes 3-42: holiday fields of 5 bytes each. Format of each field*/
/*          byte1: holiday type indicator (same as p->holiday)       */
/*          bytes 2-5: MMDD date of the holiday                      */
/* entry 7 type is preset for Good Friday, and entry 8 is pre-set for*/
/* a possible New Year's Day observed when Jan1 of next year is Sat. */
/*********************************************************************/
static struct year_entry2 yeartbl2[14] = {
 {'6','0',{{'1',"0102"},{'4',"0529"},{'5',"0704"},{'6',"0904"},
     {'7',"1123"},{'8',"1124"},{'9',"1225"},{'3',"0000"},
     {' ',"1231"}}},
 {'0','0',{{'1',"0101"},{'4',"0528"},{'5',"0704"},{'6',"0903"},
     {'7',"1122"},{'8',"1123"},{'9',"1225"},{'3',"0000"},
     {' ',"1231"}}},
 {'1','0',{{'1',"0101"},{'4',"0527"},{'5',"0704"},{'6',"0902"},
     {'7',"1128"},{'8',"1129"},{'9',"1225"},{'3',"0000"},
     {' ',"1231"}}},
 {'2','0',{{'1',"0101"},{'4',"0526"},{'5',"0704"},{'6',"0901"},
     {'7',"1127"},{'8',"1128"},{'9',"1225"},{'3',"0000"},
     {' ',"1231"}}},
 {'3','0',{{'1',"0101"},{'4',"0525"},{'5',"0703"},{'6',"0907"},
     {'7',"1126"},{'8',"1127"},{'9',"1225"},{'3',"0000"},
     {' ',"1231"}}},
 {'4','0',{{'1',"0101"},{'4',"0531"},{'5',"0705"},{'6',"0906"},
     {'7',"1125"},{'8',"1126"},{'9',"1224"},{'3',"0000"},
     {' ',"1231"}}},
 {'5','0',{{' ',"0000"},{'4',"0530"},{'5',"0704"},{'6',"0905"},
     {'7',"1124"},{'8',"1125"},{'9',"1226"},{'3',"0000"},
     {' ',"1231"}}},
 {'6','1',{{'1',"0102"},{'4',"0528"},{'5',"0704"},{'6',"0903"},
     {'7',"1122"},{'8',"1123"},{'9',"1225"},{'3',"0000"},
     {' ',"1231"}}},
 {'0','1',{{'1',"0101"},{'4',"0527"},{'5',"0704"},{'6',"0902"},
     {'7',"1128"},{'8',"1129"},{'9',"1225"},{'3',"0000"},
     {' ',"1231"}}},
 {'1','1',{{'1',"0101"},{'4',"0526"},{'5',"0704"},{'6',"0901"},
     {'7',"1127"},{'8',"1128"},{'9',"1225"},{'3',"0000"},
     {' ',"1231"}}},
 {'2','1',{{'1',"0101"},{'4',"0525"},{'5',"0703"},{'6',"0907"},
     {'7',"1126"},{'8',"1127"},{'9',"1225"},{'3',"0000"},
     {' ',"1231"}}},
 {'3','1',{{'1',"0101"},{'4',"0531"},{'5',"0705"},{'6',"0906"},
     {'7',"1125"},{'8',"1126"},{'9',"1224"},{'3',"0000"},
     {' ',"1231"}}},
 {'4','1',{{'1',"0101"},{'4',"0530"},{'5',"0704"},{'6',"0905"},
     {'7',"1124"},{'8',"1125"},{'9',"1226"},{'3',"0000"},
     {' ',"1231"}}},
 {'5','1',{{'1',"0000"},{'4',"0529"},{'5',"0704"},{'6',"0904"},
     {'7',"1123"},{'8',"1124"},{'9',"1225"},{'3',"0000"},
     {' ',"1231"}}}
};

/*********************************************************************/
/* The goodfri[] table contains the dates of Good Friday for each    */
/* year from 1900 to 2099. An index to the table can be computed as: */
/* year - 1900.                                                      */
/*********************************************************************/
static struct {
  char good_friday_mmdd[5];       /* month-day date of Good Friday */
} goodfri[200] = {
   {"0413"},{"0405"},{"0328"},{"0410"},{"0401"}, /*1900-1904 dates*/
   {"0421"},{"0413"},{"0329"},{"0417"},{"0409"},   /*1905-1909 dates*/
   {"0325"},{"0414"},{"0405"},{"0321"},{"0410"},   /*1910-1914 dates*/
   {"0402"},{"0421"},{"0406"},{"0329"},{"0418"},   /*1915-1919 dates*/
   {"0402"},{"0325"},{"0414"},{"0330"},{"0418"},   /*1920-1924 dates*/
   {"0410"},{"0402"},{"0415"},{"0406"},{"0329"},   /*1925-1929 dates*/
   {"0418"},{"0403"},{"0325"},{"0414"},{"0330"},   /*1930-1934 dates*/
   {"0419"},{"0410"},{"0326"},{"0415"},{"0407"},   /*1935-1939 dates*/
   {"0322"},{"0411"},{"0403"},{"0423"},{"0407"},   /*1940-1944 dates*/
   {"0330"},{"0419"},{"0404"},{"0326"},{"0415"},   /*1945-1949 dates*/
   {"0407"},{"0323"},{"0411"},{"0403"},{"0416"},   /*1950-1954 dates*/
   {"0408"},{"0330"},{"0419"},{"0404"},{"0327"},   /*1955-1959 dates*/
   {"0415"},{"0331"},{"0420"},{"0412"},{"0327"},   /*1960-1964 dates*/
   {"0416"},{"0408"},{"0324"},{"0412"},{"0404"},   /*1965-1969 dates*/
   {"0327"},{"0409"},{"0331"},{"0420"},{"0412"},   /*1970-1974 dates*/
   {"0328"},{"0416"},{"0408"},{"0324"},{"0413"},   /*1975-1979 dates*/
   {"0404"},{"0417"},{"0409"},{"0401"},{"0420"},   /*1980-1984 dates*/
   {"0405"},{"0328"},{"0417"},{"0401"},{"0324"},   /*1985-1989 dates*/
   {"0413"},{"0329"},{"0417"},{"0409"},{"0401"},   /*1990-1994 dates*/
   {"0414"},{"0405"},{"0328"},{"0410"},{"0402"},   /*1995-1999 dates*/
   {"0421"},{"0413"},{"0329"},{"0418"},{"0409"},   /*2000-2004 dates*/
   {"0325"},{"0414"},{"0406"},{"0321"},{"0410"},   /*2005-2009 dates*/
   {"0402"},{"0422"},{"0406"},{"0329"},{"0418"},   /*2010-2014 dates*/
   {"0403"},{"0325"},{"0414"},{"0330"},{"0419"},   /*2015-2019 dates*/
   {"0410"},{"0402"},{"0415"},{"0407"},{"0329"},   /*2020-2024 dates*/
   {"0418"},{"0403"},{"0326"},{"0414"},{"0330"},   /*2025-2029 dates*/
   {"0419"},{"0411"},{"0326"},{"0415"},{"0407"},   /*2030-2034 dates*/
   {"0323"},{"0411"},{"0403"},{"0423"},{"0408"},   /*2035-2039 dates*/
   {"0330"},{"0419"},{"0404"},{"0327"},{"0415"},   /*2040-2044 dates*/
   {"0407"},{"0323"},{"0412"},{"0403"},{"0416"},   /*2045-2049 dates*/
   {"0408"},{"0331"},{"0419"},{"0404"},{"0327"},   /*2050-2054 dates*/
   {"0416"},{"0331"},{"0420"},{"0412"},{"0328"},   /*2055-2059 dates*/
   {"0416"},{"0408"},{"0324"},{"0413"},{"0404"},   /*2060-2064 dates*/
   {"0327"},{"0409"},{"0401"},{"0420"},{"0412"},   /*2065-2069 dates*/
   {"0328"},{"0417"},{"0408"},{"0324"},{"0413"},   /*2070-2074 dates*/
   {"0405"},{"0417"},{"0409"},{"0401"},{"0421"},   /*2075-2079 dates*/
   {"0405"},{"0328"},{"0417"},{"0402"},{"0324"},   /*2080-2084 dates*/
   {"0413"},{"0329"},{"0418"},{"0409"},{"0401"},   /*2085-2089 dates*/
   {"0414"},{"0406"},{"0328"},{"0410"},{"0402"},   /*2090-2094 dates*/
   {"0422"},{"0413"},{"0329"},{"0418"},{"0410"}    /*2095-2099 dates*/
};

/*********************************************************************/
/* tblukup(): performs year table lookups using the gregmdy year. The*/
/* data entry found is moved to the yeardata area.                   */
/*********************************************************************/
void tblukup(struct DATEGENL *p) {
  int i, j, *q;
  char char_year[5];

/* ----- compute the year table index = year - 1900 ----- */
  memcpy(char_year, p->gregymd, 4);
  char_year[4] = '\0';
  i = atoi(char_year);               /* convert year to int */
  i -= 1900;                         /* deduct 1900 for index value */
  j = yeartbl1[i];                 /* get index to second year table */

/* ----- move entry for specified year to the yeardata field ----- */
  yeardata = yeartbl2[j];            /* copy data for the year */

/* ----- move the Good Friday date to yeardata holiday table ----- */
  strcpy(yeardata.holiday_table[7].holiday_mmdd,
         goodfri[i].good_friday_mmdd);

/* -- if next year begins on Saturday, make December 31 a holiday -- */
  if((yeartbl1[i+1] == 6) || (yeartbl1[i+1] == 13)) {
    yeardata.holiday_table[8].holiday_type = '1'; /* 12/31=New Years */
  }

/* ----- set year type in dategenl structure ----- */
  p->yeartyp = yeardata.leap_year_ind; /* set year type in dategenl */

/* ----- set correct values in the gregcvrt() table ----- */
  q = gregcv0;
  if(p->yeartyp == leap_year)
    q = gregcv1;
  for(i = 0; i < 13; i++)
    gregcvrt[i] = *q++;
} /* end tblukup */
