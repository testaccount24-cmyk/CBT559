/*************************************************************************/
/*                      **** dayrpt.c ****                               */
/*                                                                       */
/* First, reads a parameter file describing the report to be created.    */
/* The parameter file is composed of simple ASCII text records up to a   */
/* maximum of 255 bytes in length. Each record begins in column 1 and    */
/* contains no imbedded blanks except when a quoted string is used. Any  */
/* characters following the first blank in a record are considered to    */
/* be comments. In the following record descriptions, the records must   */
/* occur in the order shown. All upper case values must be typed         */
/* exactly as shown beginning in column1 and must include the following  */
/* equal sign. The data following must begin immediately after the =     */
/* sign and continue with no blanks (except for quoted strings) until    */
/* the end of the data. Comments may follow after 1 or more blanks. A    */
/* quoted string must begin and end with " symbols. All parameter file   */
/* records are required. Following are the parameter records:            */
/* INFILE=iiiiiiii        input file path and filename (length varies)   */
/* OUTFILE=oooooooo       output file path and filename (length varies)  */
/* TITLE="tttttttt"       report heading line (1 to 77 characters)       */
/* DATE=yyyy.mm.dd        report date (see note 2)                       */
/* START=hh:mm            start time hour and minute (see note 3)        */
/* END=hh:mm              end hour and minute (see note 3)               */
/* REC1=@@@@@@@@          record to be selected for column 1 (see note 4)*/
/* COL1="ttttttt"         title for report column 1 (22 characters max)  */
/* REC2=@@@@@@@@          record to be selected for column 2 (see note 4)*/
/* COL2="ttttttt"         title for report column 2 (22 characters max)  */
/* REC3=@@@@@@@@          record to be selected for column 3 (see note 4)*/
/* COL3="ttttttt"         title for report column 3 (22 characters max)  */
/* Notes: 1) The records for REC3 and COL3 can be omitted for 1 and 2    */
/*           column reports, and REC2 and COL2 can be omitted for 1      */
/*           column reports.                                             */
/*        2) If the report contains only one day the DATE record can be  */
/*           omitted.                                                    */
/*        3) The time parameters must be 5 characters long: a 2-digit    */
/*           hour 00-23, a colon (:), and a two-digit minute, 00 or 30.  */
/*        4) The REC records specify the exact literal in the records to */
/*           be selected for the report, and must be exactly as recorded */
/*           in the records. At this time, you may enter (all capitals): */
/*           HMO_INTRO_HKP_P                                             */
/*           HMO_INTRO_RICH_P                                            */
/*           PRVDR_INTRO_P                                               */
/*           VA_INTRO_SSBU                                               */
/*        5) Any line beginning with an * is ignored and may contain any */
/*           desired text: a comment line.                               */
/*                                                                       */
/* This program reads the daily DirectTalk statistics file containing    */
/* call statistics at 30 minute intervals for DirectTalk applications.   */
/* All records for the specified REC parameter records between the times */
/* specified by the START and END parameters are used for the report.    */
/* The report may contain call data for 1, 2, or 3 different applications*/
/* and the data is collected in a table. After the file is exhausted, the*/
/* report is written using information stored in the table.              */
/*                                                                 */
/* To execute the dayrpt program, the command line must contain the path */
/* and name of the parameter file. The parameter file is a simple ASCII  */
/* text file as described above. A command line example is:              */
/*                                                                       */
/*     dayrpt /home/devback/hold/va_report_parms                         */
/*                                                                       */
/* Author R Thornton March 1995                                          */
/*************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

void initialize(int argc, char *argv[]);  /* initialization function */
void process_parms(void);             /* process parameter file */
void readparm(void);                  /* read parameter file */
void col_parms(void);                 /* process COLx= parameter records */
void infile_parm(void);               /* process INFILE= parameter record */
void outfile_parm(void);              /* process OUTFILE= parameter record */
void title_parm(void);                /* process TITLE= parameter record */
void date_parm(void);                 /* process DATE= parameter record */
void time_parm(void);                 /* process START= and END= parm recs */
void rec_parms(void);                 /* process RECx= parameter records */
void mainline(void);                  /* mainline function */
void readrec(void);                   /* read next input file record */
void terminate(void);                 /* termination function */

FILE *infile, *rptfile, *parmfile;    /* file pointers */
char innam[81];                       /* input file name */
char rptnam[81];                      /* report file name */
char parmnam[81];                     /* parameter file name */

char inrecord[256];                   /* input file record area */
char parmrec[256];                    /* parameter file record area */

char rec1_title[81];                  /* record type for report col 1 */
int rec1_leng;                        /* length of rec1_title */
char rec2_title[81];                  /* record type for report col 2 */
int rec2_leng;                        /* length of rec2_title */
char rec3_title[81];                  /* record type for report col 3 */
int rec3_leng;                        /* length of rec3_title */
char report_date[11];                 /* report date from parm or 1st rec */
int begin_sub;                        /* report begin subscript */
int end_sub;                          /* report end subscript */

int record_sub;                       /* input record subscript */
int record_count;                     /* input record count */

int col1,col2,col3;                   /* non-zero if report column present */
int rec1,rec2,rec3;                   /* non-zero if column header present */
int table_counter[3][48];             /* table of record counts */

char h1[80];                          /* header line 1 */
char h2[80];                          /* header line 2 */
char h3[80];                          /* header line 3 */
char h4[80];                          /* header line 4 */
char h5[80];                          /* header line 4 for graph */
char t1[80];                          /* total line 1 */
char t2[80];                          /* combined total line */
char rpt[80];                         /* detail report line */

int hour,min;                         /* hour and minute work areas */
long c1_total,c2_total,c3_total;      /* column 1,2,3 total counters */
int c1_max,c2_max,c3_max;             /* max value for each column */
int i,j,k,l;                          /* general purpose ints */
int parm_error;                       /* non-zero if parameter file error */
char work_string[16];                 /* g.p. work string */
int morerecs = -1;                    /* input end-of-file switch */
int moreparms = -1;                   /* parmfile end-of-file-switch */

struct tm *t;                         /* pointer to time structure */
time_t seconds;                       /* current timer value */


/**********************************************************************/
/* executive control function: overall program control                */
/**********************************************************************/
void main(int argc, char *argv[]) {
 initialize(argc, argv);       /* open files */
 while(morerecs)               /* perform mainline until */
  mainline();               /* no more records */
 terminate();                  /* close files */
 exit(0);                      /* quit */
}
/**********************************************************************/
/* mainline function: process input file until no more records.       */
/**********************************************************************/
void mainline(void) {
  if(memcmp(inrecord+2,report_date,10)) {  /* compare dates */
    readrec();                        /* wrong date, read again */
    return;                           /* and continue */
  }
  if(col1 && !(memcmp(inrecord+22,rec1_title,rec1_leng))) { /* col1 record */
    k = 0;                            /* set table subscript to 0 */
    l = rec1_leng + 23;               /* offset to count field */
  }
  else if(col2 &&
      !(memcmp(inrecord+22,rec2_title,rec2_leng))) { /* col2 record */
    k = 1;                            /* set table subscript to 1 */
    l = rec2_leng + 23;               /* offset to count field */
  }
  else if(col3 &&
      !(memcmp(inrecord+22,rec3_title,rec3_leng))) { /* col3 record */
    k = 2;                            /* set table subscript to 2 */
    l = rec3_leng + 23;               /* offset to count field */
  }
  else {
    readrec();                      /* none of the above, read again */
    return;                         /* and continue */
  }
  memcpy(work_string,inrecord+13,2);  /* get record hour */
  work_string[2] = '\0';              /* terminate the string */
  i = atoi(work_string);              /* make it an integer */
  record_sub = i * 2;                 /* compute record subscript */
  memcpy(work_string,inrecord+16,2);  /* get record minutes */
  work_string[2] = '\0';              /* terminate the string */
  i = atoi(work_string);              /* convert it to integer */
  if(i)                               /* if xx:30 time */
  record_sub ++;                      /* add 1 to total */
  if((record_sub < begin_sub) || (record_sub > end_sub)) {
    readrec();                        /* read next record */
    return;                           /* and continue */
  }
  record_count = 0;                   /* pre-clear count */

  for(i=l;i<42;i++)                   /* locate end of counter */
    if(inrecord[i] == ',') {          /* if at ending comma */
      inrecord[i] = '\0';                /* change it to null */
      record_count = atoi(inrecord+l);   /* convert to integer */
      break;                             /* and exit the loop */
    }

  table_counter[k][record_sub] = record_count; /* record count to table */
  readrec();                          /* read next input record */
}
/**********************************************************************/
/* initialization: initialize areas, process parameters, build headers*/
/* open files, read 1st input record                                  */
/**********************************************************************/
void initialize(int argc, char *argv[]) {
  innam[0] = '\0';                     /* null input file name */
  rptnam[0] = '\0';                    /* null report file name */
  rec1_title[0] = '\0';                /* null 1st record type */
  rec2_title[0] = '\0';                /* null 2nd record type */
  rec3_title[0] = '\0';                /* null 3rd record type */
  report_date[0] = '\0';               /* null report date field */

  memset(h1,' ',77); strcpy(h1+77,"\r\n"); /* clear heading line 1 */
  h1[0] = '\0';                            /* null out h1 */

  memset(h2,' ',77); strcpy(h2+77,"\r\n"); /* clear heading line 2 */
  memcpy(h2,"Report Date:",12);            /* literal to header line 2 */
  memcpy(h2+57,"Run Date:",9);             /* literal to header line 2
  timezone = 5 * 60 * 60;                  /* set local time for e.s.t */
  daylight = -1;                           /* indicate daylit sav time */
  time(&seconds);                          /* time in secs */
  t = localtime(&seconds);                 /* local time to tm struct */
  sprintf(&h2[67],"%4d.%02d.%02d",t->tm_year, t->tm_mon+1, t->tm_mday);
  if(h2[69] == '9')                        /* if in the 1990's */
    memcpy(h2+67,"19",2);                  /* set century to 19 */
  else                                     /* otherwise */
    memcpy(h2+67,"20",2);                  /* set century to 20 */
  h2[77] = '\r';                           /* reset trailing carr rtrn */

  memset(h3,' ',77); strcpy(h3+77,"\r\n"); /* clear heading line 3 */
  memcpy(h3,"Inclusive Times:",16);        /* literal to header 3 */
  memcpy(h3+23,"to",2);                    /* literal to header 3 */

  memset(h4,' ',77); strcpy(h4+77,"\r\n"); /* clear heading line 4 */
  memcpy(h4+1,"Time",4);                   /* literal to header 4 */

  memset(t1,' ',77); strcpy(t1+77,"\r\n"); /* clear total line 1 */
  memcpy(t1+1,"Totals",6);                 /* literal to total line */

  memset(t2,' ',77); strcpy(t2+77,"\r\n"); /* clear combined total line */
  memcpy(t2+1,"Combined Total",14);       /* literal to combined total line */

  memset(rpt,' ',77); strcpy(rpt+77,"\r\n"); /* clear detail report line */

  if(argc == 2) {                        /* if only one command line arg */
    strcpy(parmnam,argv[1]);             /* copy parameter file name */
    if((parmfile=fopen(parmnam,"rb")) == NULL) { /* open parameter file */
      printf("Can't open parameter file %s.",parmnam); /* open failed */
      exit(1);
    }                                    /* terminate in error */
  }
  else {
    printf("\Command line must contain only parameter file name.");
    exit(1);
  }

  readparm();                            /* read first parameter record */
  while(moreparms)                       /* process parameter file */
  process_parms();                         /* process each parameter */
  if(parm_error)                         /* if any parameter error found */
    exit(1);                               /* just terminate */

  if(begin_sub >= end_sub) {
    printf("\nBegin time must be before end time, correct parameter file");
    printf("\nPossibly missing or incorrect START= or END= record.");
    parm_error = 1;
  }
  if(h1[0] == '\0') {
    printf("\nMissing TITLE= parameter record. Add it to parameter file.");
    parm_error = 1;
  }
  if(innam[0] == '\0') {
    printf("\nMissing INFILE= parameter record. Add it to parameter file.");
    parm_error = 1;
  }
  if(rptnam[0] == '\0') {
    printf("\nMissing OUTFILE= parameter record. Add it to parameter file.");
    parm_error = 1;
  }
  if(!(rec1 || rec2 || rec3)) {
    printf("\nParameter file must contain at least 1 selection record: ");
    printf("\nAdd a REC1=, REC2=, and/or REC3= record to parameter file");
    parm_error = 1;
  }
  if(!(col1 || col2 || col3)) {
    printf("\nParameter file must contain at least 1 column header record.");
    printf("\nAdd a COL1=, COL2=, and/or COL3= record to parameter file");
    parm_error = 1;
  }
  if(rec1 != col1) {
    printf("\nIf REC1= is used, COL1= must also given and vice-cersa.");
    printf("\nCorrect the parameter file to include both or neither.");
    parm_error = 1;
  }
  if(rec2 != col2) {
    printf("\nIf REC2= is used, COL2= must also given and vice-cersa.");
    printf("\nCorrect the parameter file to include both or neither.");
    parm_error = 1;
  }
  if(rec3 != col3) {
    printf("\nIf REC3= is used, COL3= must also given and vice-cersa.");
    printf("\nCorrect the parameter file to include both or neither.");
    parm_error = 1;
  }
  if(parm_error)                        /* if any errors, quit */
    exit(1);
  if((infile=fopen(innam,"rb")) == NULL) { /* open input */
 printf("Can't open input file %s.",innam);
 exit(1);                           /* terminate in error */
  }
  if((rptfile=fopen(rptnam,"wb"))==NULL) { /* open print file */
    printf("\nCan't open the printer file.");
 exit(1);                          /* terminate in error */
  }
  memcpy(&h2[13],report_date,10); /* report date to header line */

  readrec();             /* read first input file record */

  if(report_date[0] == '\0')              /* if no DATE= parm received */
    memcpy(report_date,inrecord+2,10);       /* use date in 1st record */
  memcpy(h2+13,report_date,10);           /* report date to header 2 */
}
/**********************************************************************/
/* process parameter file records.                                    */
/**********************************************************************/
void process_parms(void) {
  if(!(memcmp(parmrec,"COL",3)))          /* if COL1= or COL2= or COL3= */
    col_parms();                          /* process COL records */
  else if(!(memcmp(parmrec,"INFILE=",7))) /* if INFILE= */
    infile_parm();                         /* process INFILE= record */
  else if(!(memcmp(parmrec,"OUTFILE=",8))) /* if OUTFILE= */
    outfile_parm();                       /* process OUTFILE= record */
  else if(!(memcmp(parmrec,"TITLE=\"",7)))  /* if TITLE= */
    title_parm();                         /* process TITLE= record */
  else if(!(memcmp(parmrec,"DATE=",5)))   /* if DATE= */
    date_parm();                          /* process DATE= record */
  else if(!(memcmp(parmrec,"START=",6)))  /* if START= */
    time_parm();                          /* process START= record */
  else if(!(memcmp(parmrec,"END=",4)))    /* if END= */
    time_parm();                          /* process END= record */
  else if(!(memcmp(parmrec,"REC",3)))     /* if REC record */
    rec_parms();                          /* process REC records */
  else if(!((parmrec[0]=='*')||(parmrec[0]=='\r')||(parmrec[0]=='\n'))) {
    printf("\nThe following parameter file record is unidentifiable: \n");
    printf("%s",parmrec);
    parm_error = 1;                       /* indicate error found in parms */
  }
  readparm();                             /* read next parmameter record */
}
/**********************************************************************/
/* process the COL1=, COL2=, and COL3= parameter records              */
/**********************************************************************/
void col_parms(void) {
  if((memcmp(parmrec+3,"1=\"",3)) &&
     (memcmp(parmrec+3,"2=\"",3)) &&
     (memcmp(parmrec+3,"3=\"",3))) {
       printf("\nThe following parameter file record is unidentifiable: \n");
       printf("%s",parmrec);
       parm_error = 1;                    /* indicate error found in parms */
  }
  for(i=6;i<29;i++)                       /* find right end of literal */
    if(parmrec[i] == '\"')                   /* if ending quote found */
      break;                                    /* break out of loop */
  if(i == 29) {
    printf("\nThe following column header exceeds 22 characters: \n");
    printf("%s",parmrec);
    parm_error = 1;                       /* indicate error found in parms */
    return;                               /* return */
  }

  if(parmrec[3] == '1') {                 /* if COL1= record */
    j = 27;                                  /* column header ends at 27 */
    col1 = 1;                                /* show COL1= received */
  }
  else if(parmrec[3] == '2') {            /* if COL2= record */
    j = 51;                                  /* column header ends at 51 */
    col2 = 1;                                /* show COL2= received */
  }
  else {                                  /* if COL3= record */
    j = 76;                                  /* column header ends at 76 */
    col3 = 1;                                /* show COL3= received */
  }
  i--;                                    /* back up before ending quote */
  for(;i>5;i--,j--)                       /* move column header to h4 in */
    h4[j] = parmrec[i];                      /* a right-to-left direction */
}
/**********************************************************************/
/* process the INFILE= parameter record                               */
/**********************************************************************/
void infile_parm(void) {
  for(i=7;i<87;i++) {
    if(parmrec[i] <= ' ')                 /* found a blank or ctl char? */
      parmrec[i] = '\0';                  /* yes, make it a null */
    if(parmrec[i] == '\0')                /* found end of name? */
      break;                              /* yes, break out of loop */
  }
  if(i == 87) {                           /* no end of name found */
    printf("\nThe following record has filename > 80 characters: \n");
    printf("%s",parmrec);
    parm_error = 1;                       /* indicate error found in parms */
    return;                               /* return */
  }
  strcpy(innam,parmrec+7);                /* move input file name */
}
/**********************************************************************/
/* process the OUTFILE= parameter record                              */
/**********************************************************************/
void outfile_parm(void) {
  for(i=8;i<88;i++) {
    if(parmrec[i] <= ' ')                 /* found a blank or ctl char? */
      parmrec[i] = '\0';                  /* yes, make it a null */
    if(parmrec[i] == '\0')                /* found end of name? */
      break;                              /* yes, break out of loop */
  }
  if(i == 88) {                           /* no end of name found */
    printf("\nThe following record has filename > 80 characters: \n");
    printf("%s",parmrec);
    parm_error = 1;                       /* indicate error found in parms */
    return;                               /* return */
  }
  strcpy(rptnam,parmrec+8);               /* move input file name */
}
/**********************************************************************/
/* process the TITLE= parameter record                                */
/**********************************************************************/
void title_parm(void) {
  for(i=7;i<83;i++)                       /* find right end of literal */
    if(parmrec[i] == '\"')                   /* if ending quote found */
      break;                                    /* break out of loop */
  if(i == 83) {
    printf("\nThe following title line exceeds 76 characters: \n");
    printf("%s",parmrec);
    parm_error = 1;                       /* indicate error found in parms */
    return;                               /* return */
  }
  i -= 7;                                 /* actual title literal length */
  j=(76 - i)/2;                           /* compute centering subscript */
  h1[0] = ' ';                            /* un-null h1 */
  memcpy(h1+j,parmrec+7,i);               /* move title to h1 header line */
}
/**********************************************************************/
/* process the DATE= parameter record                                 */
/**********************************************************************/
void date_parm(void) {
  char work[8];

  int error = 0;
  if(!((parmrec[9] != '.') || (parmrec[12] != '.') || (parmrec[15] <= ' ')))
    error = 1;
  if((memcmp(parmrec+5,"199",3)) && (memcmp(parmrec+5,"20",2)))
    error = 1;
  memcpy(work,parmrec+5,4);               /* move year yyyy to work */
  memcpy(work+4,parmrec+10,2);            /* move month mm to work */
  memcpy(work+6,parmrec+13,2);            /* move day dd to work */
  for(i=0;i<8;i++)
    if((work[i] < '0') || (work[i] > '9')) /* valid numeric digit? */
      error = 1;                             /* no, set error */
  if((memcmp(work+4,"01",2) < 0) || (memcmp(work+4,"12",2) > 0))
    error = 1;
  if((memcmp(work+6,"01",2) < 0) || (memcmp(work+6,"31",2) > 0))
    error = 1;
  if(error) {                             /* any error found? */
    printf("\nThe following parameter yyyy.mm.dd date is in error: \n");
    printf("%s",parmrec);
    parm_error = 1;                       /* indicate error found in parms */
  }
  else {                                  /* if no error */
    memcpy(report_date,parmrec+5,10);        /* copy date to report_date */
    memcpy(h2+13,parmrec+5,10);              /* and to h2 header line */
  }
}
/**********************************************************************/
/* process START= and START= and END= parameter records               */
/**********************************************************************/
void time_parm(void) {
  char work[4];
  int error = 0;

  if(parmrec[0] == 'S')                   /* if START= record */
    i = 6;                                   /* begin at column 7 */
  else                                    /* else */
    i = 4;                                   /* at column 5 */
  if(parmrec[i+2] != ':')                 /* valid hour:minute delimiter? */
    error = 1;                               /* no, error */
  memcpy(work,parmrec+i,2);               /* move hours hh to work */
  memcpy(work+2,parmrec+i+3,2);           /* move minutes mm to work */
  for(j=0;j<4;j++)
    if((work[j] < '0') || (work[j] > '9')) /* test numeric */
      error = 1;
  if((memcmp(work,"00",2) < 0) || (memcmp(work,"23",2) > 0))
    error = 1;
  if((memcmp(work+2,"00",2)) && (memcmp(work+2,"30",2)))
    error = 1;
  if(error) {
    printf("\nThe following parameter file record is in error: \n");
    printf("%s",parmrec);
    parm_error = 1;                       /* indicate error found in parms */
  }
  work[2] = '\0';                          /* terminate hour string */
  k = atoi(work);                         /* convert hours to integer */
  k *= 2;                                 /* hours * 2 for subscript */
  if(parmrec[i+3] == '3')                  /* if minutes = 30 */
    k++;                                     /* increment subscript */
  if(parmrec[0] == 'S') {                 /* if this is a START= record */
    begin_sub = k;                           /* set begin_sub */
    memcpy(h3+17,parmrec+i,5);               /* begin time to h3 header */
  }
  else {                                  /* else it's an END= record */
    end_sub = k;                             /* so set end_sub */
    memcpy(h3+26,parmrec+i,5);               /* and end time in h3 header */
  }
}
/**********************************************************************/
/* process REC1=, REC2=, and REC3= parameter records                  */
/**********************************************************************/
void rec_parms(void) {
  int *lenptr;
  char *recptr;

  if((memcmp(parmrec+3,"1=",2)) &&
     (memcmp(parmrec+3,"2=",2)) &&
     (memcmp(parmrec+3,"3=",2))) {
       printf("\nThe following parameter file record is unidentifiable: \n");
       printf("%s",parmrec);
       parm_error = 1;                    /* indicate error found in parms */
       return;
  }
  if(parmrec[3] == '1') {
    recptr = rec1_title;
    lenptr = &rec1_leng;
    rec1 = 1;                             /* show REC1= received */
  }
  else if(parmrec[3] == '2') {
    recptr = rec2_title;
    lenptr = &rec2_leng;
    rec2 = 1;                             /* show REC2= received */
  }
  else {
    recptr = rec3_title;
    lenptr = &rec3_leng;
    rec3 = 1;                             /* show REC3= received */
  }
  for(i=5;i<85;i++) {                     /* look for end of record name */
    if(parmrec[i] <= ' ')                    /* if blank or ctl char found */
      break;                                 /* end is found */
    recptr[i-5] = parmrec[i];                /* move character to title */
  }
  if(i == 85) {
    printf("\nThe following parameter file record name is > 80 characters.");
    printf("%s",parmrec);
    parm_error = 1;                       /* indicate error in parms */
    return;
  }
  else
    *lenptr = i - 5;                      /* set title length */
}
 /**********************************************************************/
/* read next parameter record. at end of file, set moreparms switch.  */
/**********************************************************************/
void readparm() {
  if(fgets(parmrec,255,parmfile) == NULL) /* read parmfile until eof */
    moreparms = 0;                        /* set switch at end of file */
}
/**********************************************************************/
/* read next input file record. at end of file, set morerecs switch.  */
/**********************************************************************/
void readrec() {
  if(fgets(inrecord,255,infile) == NULL) /* read input until eof */
    morerecs = 0;                        /* set switch at end of file */
}
/**********************************************************************/
/* termination: write report from stored data, then close files       */
/**********************************************************************/
void terminate() {

  memset(h5,' ',77);                       /* clear header5 line */
  strcpy(h5+77,"\r\n");                    /* terminate properly */
  fputs(h1,rptfile);                       /* write header line 1 */
  memset(rpt,' ',77);                      /* clear print line */
  strcpy(rpt+77,"\r\n");                   /* terminate properly */
  fputs(rpt,rptfile);                      /* write blank line */
  fputs(h2,rptfile);                       /* write header line 2 */
  fputs(h3,rptfile);                       /* write header line 3 */
  fputs(rpt,rptfile);                      /* write blank line */
  fputs(h4,rptfile);                       /* write header line 4 */
  for(i=begin_sub;i<=end_sub;i++) {        /* print all counters in table */
    if((table_counter[0][i] == 0) && (table_counter[1][ii] == 0))
      continue;
    hour = i / 2;                          /* compute hour */
    min = (i % 2) * 30;                    /* compute minute */
    sprintf(rpt,"%02d",hour);              /* hour to print line */
    rpt[2] = ':';                          /* delimit hour */
    sprintf(rpt+3,"%02d",min);             /* minute to print line */
    rpt[5] = ' ';                          /* clear trailing null */
    if(col1) {                             /* if report has column 1 */
      sprintf(rpt+23,"%5d",table_counter[00][i]); /* move col1 count */
      rpt[28] = ' ';                       /* clear trailing null */
    }
    if(col2) {                             /* if report has column 2 */
      sprintf(rpt+47,"%5d",table_counter[11][i]); /* move col2 count */
      rpt[52] = ' ';                       /* clear trailing null */
    }
    if(col3)                               /* if report has column 3 */
      sprintf(rpt+72,"%5d",table_counter[22][i]); /* move col3 count */
    strcpy(rpt+77,"\r\n");                 /* terminate properly */
    fputs(rpt,rptfile);                    /* write detail line */
    c1_total += table_counter[0][i]; /* add to total */
    c2_total += table_counter[1][i]; /* add to total */
    c3_total += table_counter[2][i]; /* add to total */
  }
  if(col1) {                               /* if report has col 1 */
    sprintf(t1+22,"%6ld",c1_total);        /* col1 total */
    t1[28] = ' ';                          /* clear trailing null */
  }
  if(col2) {                               /* if report has col 2 */
    sprintf(t1+46,"%6ld",c2_total);        /* col2 total */
    t1[52] = ' ';                          /* clear trailing null */
  }
  if(col3) {                               /* if report has col 3 */
    sprintf(t1+71,"%6ld",c3_total);        /* col3 total */
    t1[77] = '\r';                         /* restore trailing carr rtrn */
  }
  memset(rpt,' ',77);                      /* clear print line */
  strcpy(rpt+77,"\r\n");                   /* terminate properly */
  fputs(rpt,rptfile);                      /* write blank line */
  fputs(t1,rptfile);                       /* write total line */
  sprintf(t2+22,"%6ld",c1_total + c2_total + c3_total); /* combined total */
  t2[28] = ' ';                            /* clear trailing null */
  fputs(rpt,rptfile);                      /* write blank line */
  fputs(t2,rptfile);                       /* print combined total */

  c1_max=c2_max=c3_max=1;                  /* insure against divide by 0 */
  for(i=begin_sub;i<=end_sub;i++) {        /* find column maximum values */
    if(table_counter[0][i] > c1_max)
      c1_max = table_counter[0][i];
    if(table_counter[1][i] > c2_max)
      c2_max = table_counter[1][i];
    if(table_counter[2][i] > c3_max)
      c3_max = table_counter[2][i];
  }

  for(i=begin_sub;i<=end_sub;i++) {        /* compute percentages */
    table_counter[0][i] = (100 * table_counter[0][i]) / c1_max;
    table_counter[1][i] = (100 * table_counter[1][i]) / c2_max;
    table_counter[2][i] = (100 * table_counter[2][i]) / c3_max;
  }

  for(k=0;k<3;k++) {                       /* graph control */
    if(col1 && (k == 0))                     /* graph 1 to be done? */
      memcpy(h5+16,h4+6,22);                   /* yes, move col1 header */
    else if(col2 && (k == 1))                /* graph 2 to be done? */
      memcpy(h5+16,h4+30,22);                  /* yes, move col2 header */
    else if(col3 && (k == 2))                /* graph 3 to be done? */
      memcpy(h5+16,h4+55,22);                  /* yes, move col3 header */
    else
      continue;                              /* else skip this graph */
    memset(rpt,' ',77);                      /* clear print line */
    rpt[0] = '\f';                           /* formfeed to print line */
    strcpy(rpt+77,"\r\n");                   /* terminate properly */
    fputs(rpt,rptfile);                      /* skip to top of page */
    fputs(h1,rptfile);                       /* write header line 1 */
    rpt[0] = ' ';                            /* clear formfeed */
    fputs(rpt,rptfile);                      /* write blank line */
    fputs(h2,rptfile);                       /* write header line 2 */
    fputs(h3,rptfile);                       /* write header line 3 */
    fputs(rpt,rptfile);                      /* write blank line */
    fputs(h5,rptfile);                       /* write header line 5 */
    fputs(rpt,rptfile);                      /* write blank line */
    for(l=100;l>3;l-=6) {                    /* scan down the graph by 6% */
      for(i=begin_sub,j=6;i<=end_sub;i++,j+=2) { /* scan across line */
        if(j>76) break;                      /* stop at right side of page */
        if(table_counter[k][i] >= l) { /* print bar here? */
          memcpy(rpt+j,"**",2);              /* yes, build the bar */
        }
      }
      rpt[j] = '|';                          /* right margin */
      rpt[5] = '|';                          /* left margin */
      fputs(rpt,rptfile);                     /* print graph line */
      memset(rpt,' ',76);                     /* clear line to blanks */
    }

    for(i=begin_sub,j=6;i<=end_sub;i++,j+=2) { /* scan across line */
      if(j>76) break;                      /* stop at right side of page */
      hour = i / 2;                        /* get hour */
      min = i % 2;                         /* min = 0 or 1 */
      if(min) {                            /* if min non-zero */
        rpt[j] = '.';                         /* at half-hour */
        rpt[j+1] = '.';
      }
      else {                               /* else min = 0 */
        sprintf(rpt+j,"%02d",hour);        /* and on the hour */
        rpt[j+2] = ' ';                    /* clear trailing null */
      }
    }
    memcpy(rpt+76,"\r\n",3);               /* terminate the line */
    memcpy(rpt,"Time",4);                  /* identify baseline value */
    fputs(rpt,rptfile);                    /* print bottom line */
  }

  fclose(infile);                          /* close files */
  fclose(rptfile);
  fclose(parmfile);
}
