/* directory selection list */
#include <stdio.h>
#include <dir.h>

void dirsel(void);

struct ffblk dir_entry;

struct file_entry
 {
 char file_selected;
 long file_size;
 char file_name[13];
 };

struct file_entry file_table[256];

int i,max,done,new_dir=-1;
char ch,dir_path[81],new_path[81];

main()
{
 dirsel();
}

/***************** directory selection menu *****************/
void dirsel(void)
{
 void change_dir(void);
    void select_dir(void);
 void read_dir(void);

 ch=' ';
 while(ch != 'Q')
 {
  printf("\x1B[2J");           /* clear screen */
  printf("\x1B[%d;%df",0,28);    /* cursor to col 0, row 28 */
  printf("DIRECTORY SELECTION MENU");
  printf("\x1B[%d;%df",4,27);
  printf("C = Change Directory Path");
  printf("\x1B[%d;%df",6,27);
  printf("S = Select From Directory");
  printf("\x1B[%d;%df",8,27);
  printf("A = Select ALL Files");
  printf("\x1B[%d;%df",10,27);
  printf("U = Un-Select ALL Files");
  printf("\x1B[%d;%df",12,27);
  printf("Q = Finished, Return to Main Menu");
  printf("\x1B[%d;%df",21,27);
  getcwd(dir_path,81);
  printf("Current Directory Path is: %s",dir_path);
  printf("\x1B[%d;%df",23,27);
  printf("Enter Menu Selection: ");
  ch=getche();
  switch(ch)
  {
   case 'C':
   case 'c':
    change_dir();
    break;
   case 'S':
   case 's':
    if(new_dir)
     read_dir();
    select_dir();
    break;
   case 'A':
   case 'a':
    read_dir();
    for(i=0;i<max;i++)
     file_table[i].file_selected = 'S';
    break;
   case 'U':
   case 'u':
    read_dir();
    for(i=0;i<max;i++)
     file_table[i].file_selected = 'N';
    break;
   case 'q':
    ch = 'Q';
  }
 }
}

/********************* change directory path ***********************/
void change_dir(void)
{
 getcwd(dir_path,81);
 printf("\x1B[2J");           /* clear screen */
 while(1)
 {
  printf("\nCurrent directory is: %s",dir_path);
  printf("\nEnter new directory or RETURN if no change: ");
  gets(new_path);
  if(new_path[0] == NULL)
   break;
  else
  {
   strcpy(dir_path,new_path);
   i=chdir(dir_path);
   if(i != 0)
    printf("\nInvalid directory path, respecify");
  }
 }
 new_dir = -1;
}

/******************** read directory entries into table ***************/
void read_dir(void)
{
 done=findfirst("*.*",&dir_entry,0);
 max=0;
 while((!done) && (max < 255))
 {
        file_table[max].file_selected = 'N';
  strcpy(file_table[max].file_name,dir_entry.ff_name);
  file_table[max++].file_size = dir_entry.ff_fsize;
  done=findnext(&dir_entry);
 }
 new_dir = 0;
}

/********************** select directory entries ***********************/
void select_dir(void)
{
 int row,col,page,oldpage,i,maxrow,maxcol;
 void fillpage(int page);

 page=0;
 oldpage = page;
 row=2;
 col=1;
 fillpage(page);
 printf("\x1B[%d;%df",row,col);
 while((ch=getch()) != 0x1B)
 {
  i = max - (100 * page);
  if(i > 100)
   i = 100;
  maxrow = (i / 5) + 2;
  maxcol = (((i % 5) * 15) +1);
  if(maxcol == 1)
  {
   maxcol = 61;
   maxrow -= 1;
  }
  else
   maxcol -= 15;
  if(ch == 0)
  {
   ch=getch();
   switch(ch)
   {
    case 71:              /* Home */
     row = 2;
     col = 1;
     break;
    case 72:              /* Up Arrow */
     if(row > 2)
      row -= 1;
     else
      if(col > maxcol)
       row = maxrow-1;
      else
       row = maxrow;
     break;
    case 73:              /* PgUp */
     if(page > 0)
      page -= 1;
        row = 2;
     col = 1;
    break;
    case 75:              /* Left Arrow */
     if(col > 15)
      col -= 15;
     else
      if(row == maxrow)
       col = maxcol;
      else
       col = 61;
     break;
    case 77:              /* Right Arrow */
     if(row == maxrow)
      if(col < maxcol)
       col += 15;
      else
       col = 1;
     else
      if(col < 61)
       col += 15;
      else
       col = 1;
     break;
    case 79:              /* End */
     row = maxrow;
     col = maxcol;
     break;
    case 80:              /* Down Arrow */
     row += 1;
     if(row > maxrow)
      row=2;
     if((row == maxrow) && (col > maxcol))
      row = 2;
     break;
    case 81:              /* PgDn */
     if(page < max / 100)
      page += 1;
      row = 2;
                        col = 1;
   }
  }
  else
   switch(ch)
   {
    case 13:              /* Return */
     i = ((100 * page) + (5 * (row-2)) + (col / 15));
     if(file_table[i].file_selected == 'N')
      file_table[i].file_selected = 'S';
     else
      file_table[i].file_selected = 'N';
     break;
    case 27:              /* ESC */
     break;
   }
  if(ch != 0x1B)
  {
   i = ((100 * page) + (5 * (row-2)) + (col / 15));
   printf("\x1B[%d;%df",row,col);
   if(file_table[i].file_selected == 'N')
    printf("\x1B[0m%s",file_table[i].file_name);
   else
    printf("\x1B[7m%s\x1B[0m",file_table[i].file_name);
   if(oldpage != page)
            {
    fillpage(page);
    row = 2;
    col = 1;
    oldpage = page;
   }
   printf("\x1B[%d;%df",row,col);
  }
 }
}
/***************** fill a page with file names ************************/
void fillpage(int page)
{
 int row,col,i,j;
 printf("\x1B[2J");           /* clear screen */
 printf("\x1B[%d;%df",1,20);    /* cursor to row 1, col 28 */
 printf("FILE SELECTION MENU FOR %s",dir_path);
 printf("\x1B[%d;%df",23,1);    /* cursor to row 23, col 1 */
 printf("Locate with arrows, PgUp and PgDn. Toggle select with RETURN. end with
ESC");
 i = 100 * page;
 j = max - (100 * page);
 if(j > 100)
  j = 100;
 if(j < 1) return;
 j += i;
 row = 2;
 col = 1;
 while(1)
 {
  printf("\x1B[%d;%df",row,col);
  if(file_table[i].file_selected == 'N')
   printf("\x1B[0m%s",file_table[i].file_name);
  else
   printf("\x1B[7m%s\x1B[0m",file_table[i].file_name);
  i++;
  if(i >= j) break;
  col += 15;
  if(col > 61)
  {
   row++;
   col = 1;
  }
 }
 printf("\x1B[%d;%df",2,1);
}
