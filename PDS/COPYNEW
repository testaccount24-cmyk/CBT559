/*******************************************************************/
/*                      **** copynew.c ****                        */
/*                                                                 */
/* copies files from a specified source path to a specified        */
/* destination path. The source may include wildcards. Only files  */
/* having a newer modification date are copied. When copied, the   */
/* last modification date and time of the copied file are used for */
/* the output file.                                                */
/*                                                                 */
/* Author R Thornton August 1996                                   */
/*******************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <dir.h>
#include <dos.h>
#include <io.h>
#include <fcntl.h>

void initialize(int argc, char *argv[]]); /* initialization function */
void mainline(void);                  /* mainline function */

int infile, outfile;                  /* file handles */
char innam[81];                       /* input file name */
char outnam[81];                      /* output file name */
char inpath[65];                      /* path name for output file opens */
char outpath[65];                     /* path name for input file opens */
int num_bytes;                        /* byte count for file copies */
char buffer[4096];                    /* buffer for file copies */
unsigned int const BUF_SIZE = 4096;   /* buffer size constant */
struct ffblk ffin,ffout;              /* file directory areas */
struct ftime ftime;                   /* input file date/time */

char inrecord[256];                   /* input file record area */

int i;                                /* general purpose int */
int done=0;                           /* end of input indicator */
int morerecs = -1;                    /* input end-of-file switch */
int oldup = 0;                        /* older/duplicate files dropped */
int overlay = 0;                      /* newer files overlaid */
int adds = 0;                         /* files added */
int new_output=0;                     /* new output file switch */


void main(int argc, char *argv[]) {
 initialize(argc, argv);       /* initialize */
 while(!done)
  mainline();               /* main processing */
 printf("\n COPYNEW STATISTICS: ");
 printf("\n %d Older/Duplicate input files ignored.",oldup);
 printf("\n %d Newer files replacing original files.",overlay);
 printf("\n %d New files added.\n",adds);
 exit(0);                      /* quit */
}
/**********************************************************************/
/* mainline function: copy all newer files to destination.            */
/**********************************************************************/
void mainline(void) {

 strcpy(outpath, outnam);                     /* copy output path */
 strcat(outpath, ffin.ff_name);               /* concatenate input filename */
 new_output = findfirst(outpath,&ffout,0);    /* get output directory */
 if(new_output) {                             /* no directory, new file */
  strcpy(inpath,innam);                     /* copy input path */
  strcat(inpath, ffin.ff_name);             /* concatenate filename */
  infile = open(inpath,O_RDONLY | O_BINARY); /* open the input file */
  if(infile < 1) {                          /* opened o.k.? */
  printf("Can't open input file %s.",inpath); /* no, open failed */
  exit(1);                                  /* kill the run */
  }
  outfile = open(outpath,O_CREAT | O_WRONLY | O_BINARY);
  if(outfile < 1) {
   printf("Can't create file %s. Open failed.",outpath); /* open fail */
   exit(1);                               /* kill the run */
  }
  printf("\nAdding file %s",outpath);       /* tell user */
  while((num_bytes = read(infile, buffer, BUF_SIZE)) > 0) /* copy */
   write(outfile, buffer, num_bytes);     /* input to output */
  adds++;                                   /* incr files added count */
  if((getftime(infile, &ftime)) == 0)       /* get in file date/time */
   setftime(outfile, &ftime);             /* and put it on output */
  close(infile);                            /* close input file */
  close(outfile);                           /* close output file */
 }
 else {                                       /* file on input and output */
 if((ffin.ff_fdate > ffout.ff_fdate) ||       /* Input file is */
  ((ffin.ff_fdate == ffout.ff_fdate) &&     /* newer than the */
   (ffin.ff_ftime > ffout.ff_ftime))) {   /* output file? */
    strcpy(inpath,innam);               /* copy input path */
    strcat(inpath, ffin.ff_name);       /* concatenate filename */
    infile = open(inpath,O_RDONLY | O_BINARY); /* open the input file */
    if(infile < 1) {                    /* opened o.k.? */
     printf("Can't open input file %s.",inpath); /* no, open fail */
     exit(1);                         /* kill the run */
    }
    outfile = open(outpath, O_WRONLY | O_BINARY); /* open to overlay */
    if(outfile < 1) {                   /* open successful? */
     printf("Can't overlay file %s. Open failed.",outpath); /* no */
     exit(1);                         /* kill the run */
    }
    printf("\nReplacing file %s",outpath); /* tell user */
    while((num_bytes = read(infile, buffer, BUF_SIZE)) > 0) /* copy */
     write(outfile, buffer, num_bytes); /* input to output */
    overlay++;                         /* incr files overlaid count */
    if((getftime(infile, &ftime)) == 0) /* get in file date/time */
     setftime(outfile, &ftime);       /* and put it on output */
    close(infile);                     /* close input file */
    close(outfile);                    /* close output file */
   }
   else
    oldup++;                           /* older or duplicate */
 }
 done = (findnext(&ffin));                   /* get next input directory */
}
/**********************************************************************/
/* initialization: ask for source and destination paths, get first    */
/* filename in source path.                                           */
/**********************************************************************/
void initialize(int argc, char *argv[]) {
 if(argc == 3) {             /* if filenames given on command line */
  strcpy(innam,argv[1]);      /* first one is source */
  strcpy(outnam,argv[2]); /* second is destination */
 }
 else {
  if(argc == 2) {          /* if one filename on command line */
   strcpy(innam,argv[1]); /* it is the source */
   getcwd(outnam,80);       /* current working directory is dest */
  }
  else {
   printf("\nEnter FROM path (wildcards optional): ");  /* else ask */
   gets(innam);                    /* read source file path */
   printf("\nEnter TO path (directory): ");
   gets(outnam);                   /* read destination path */
  }
 }
 i = findfirst(innam,&ffin,0);         /* get first input directory */
 if(i) {                               /* got directory entry?  */
  printf("findfirst failed for input file %s.",innam);  /* no, error */
  exit(1);                           /* kill the run */
 }
 for(i=strlen(innam);i > 0; i--)       /* loop to find end of path */
  if((innam[i] == '\\') || (innam[i] == ':')) { /* if \ or : */
   i++;                            /* step past it */
   break;                          /* and break the loop */
  }
 innam[i] = '\0';                      /* terminate the path string */
 i = strlen(outnam) - 1;               /* end of output path -1 */
 if(outnam[i] != '\\') {               /* if path doesn't end with \ */
  outnam[1+i] = '\\';                /* put a \ at the end */
  outnam[2+i] = '\0';                /* and add new termination */
 }
}
