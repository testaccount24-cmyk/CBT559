/**************/
/* edgefind.c */
/*****************************************************************/
/* This program reads the file of EDGE machine friendly records  */
/* and writes a list of the csects that contain specific infor-  */
/* mation. It must be re-specialized for each use.               */
/*                                                               */
/* Current code: List Member name and Csect name when Csect name */
/* matches any entry in the FindName table.                      */
/*                                                               */
/* Author R Thornton Feb 2001                                    */
/*****************************************************************/
#include <string.h>
#include <stdio.h>
#include <stdlib.h>

/*****************************************************************/
/* Global Data Areas                                             */
/*****************************************************************/
/*********************************************************************/
/*                    Edge Product Record Description                */
/*  Machine Friendly file - C language format record definition      */
/*  based on the 05/06/1997 version                                  */
/*********************************************************************/
/*********************************************************************/
/*                    Edge Product Record Description                */
/*  Machine Friendly file - C language format record definition      */
/*  based on the 05/06/1997 version                                  */
/*********************************************************************/
struct {
/*           *****>  csect-data  <*****                              */
char Member[8];               /* member name */
char AddrMode;                /* addressing mode 2=24, 3=31, a=any   */
char ResidMode;               /* residence mode 2=24, 3=31, a=any    */
char Csect[8];                /* csect name                          */
char Compiler[10];            /* translator id, eg 5734-pl1          */
char CompilerVM[4];           /* translator version/mod              */
char CompileDate[5];          /* translation date yyddd              */
char CsectAmode;              /* csect amode 2=24, 3=31, a=any       */
char CsectRmode;              /* csect rmode 2=24, a=any             */
char CompType[2];             /* compiler type. potential values:    */
                              /*        ar = assembler               */
                              /*        cc = CICS interface          */
                              /*        ci = ibm c/370               */
                              /*        cl = lattice c               */
                              /*        cm = common block            */
                              /*        cr = cobol runtime           */
                              /*        cs = sas/c                   */
                              /*        c2 = vs cobol ii             */
                              /*        c3 = cobol 370               */
                              /*        di = db2 interface           */
                              /*        fg = fortran g / g1          */
                              /*        fh = fortran h / h - extended*/
                              /*        fr = fortran runtime         */
                              /*        fv = vs fortran              */
                              /*        ii = IMS interface           */
                              /*        nr = not recognized          */
                              /*        pm = PL/I for MVS and vm     */
                              /*        pr = PL/I runtime            */
                              /*        pv = vs pascal               */
                              /*        p1 = PL/I optimizer v1       */
                              /*        p2 = PL/I optimizer v2       */
                              /*        ur = assembler - identified  */
                              /*        vs = os/vs cobol             */
                              /*        v4 = cobol version 4         */
/*                     *****> extended base portion <*****           */
char TimeDate;                /*      1 = contains time svc pattern  */
                              /*      2 = contains stck instruction  */
                              /*      3 = contains both              */
                              /*      4 = cobol accept from date...  */
                              /*      9 = cobol accept ...other...   */
char LmodAttr;                /* load module attributes              */
char EPName[8];               /* ext symbol at primary e.p. or mrmem */
char CsectSize[8];            /* size of this csect in decimal       */
char LoadLib[4];              /* data from /u parm                   */
char DateLinked[5];           /* date of last linkedit of module     */
/*    *****> start of third block of machine record <*****           */
/*           *****> language dependent fields <*****                 */
/*      *****> VS COBOL II and COBOL / 370 fields <*****             */
char C2Ver[6];                /* vs cobol ii compiler version        */
char C2Lvl[4];                /* vs cobol ii user lvl info           */
char C2Dat[8];                /* date compiles mm/dd/yy              */
char filler1;                 /*                                     */
char C2Tim[8];                /* time compiled hh:mm:ss              */
/*        *****> COBOL II and COBOL 370 only fields <*****           */
char C2Adv;                   /* 0=noadv, 1=adv                      */
char C2Quot;                  /* 0=quote, 1=apost                    */
char C22431;                  /* 0=data24, 1=data31                  */
char C2Deck;                  /* 0=nodeck, 1=deck                    */
char C2Dump;                  /* 0=nodump, 1=dump                    */
char C2Dyna;                  /* 0=nodynam, 1=dynam                  */
char C2Fast;                  /* 0=nofastsrt, 1=fastsrt              */
char C2Fdum;                  /* 0=nofdump, 1=fdump                  */
char C2Lib;                   /* 0=nolib, 1=lib                      */
char C2List;                  /* 0=nolist, 1=list                    */
char C2Map;                   /* 0=nomap, 1=map                      */
char C2Num;                   /* 0=nonum, 1=num                      */
char C2Obj;                   /* 0=noobj, 1=obj                      */
char C2Offs;                  /* 0=nooffset, 1=offset                */
char C2Opt;                   /* 0=nooptimize, 1=optimiz             */
char C2Stdd;                  /* 0=nooutdd, 1=outdd                  */
char C2Pfd;                   /* rel 1-2: 0=nopfdsgn, 1=pfdsgn       */
/*                            /* rel 3: 0=numnpfd, 1=numpfd, 2=nummig*/
char C2Rent;                  /* 0=norent, 1=rent                    */
char C2Res;                   /* 0=nores, 1=res                      */
char C2Seq;                   /* 0=noseq, 1=seq                      */
char C2Size;                  /* 0=size(n), 1=size(max)              */
char C2Sour;                  /* 0=nosource, 1=source                */
char C2Ssrn;                  /* 0=nossrange, 1=ssrange              */
char C2Term;                  /* 0=noterm, 1=term                    */
char C2Test;                  /* 0=notest, 1=test                    */
char C2Trun;                  /* rel 1-2: 0=notrunc, 1=trunc         */
/*                            /* rel 3: 0=truncopt, 1=trunc(std),    */
/*                            /* 2 = trunc(bin)                      */
char C2Rw;                    /* 0=default, 1=userspec word          */
char C2Vbre;                  /* 0=novbref, 1=vbref                  */
char C2Xref;                  /* 0=noxref, 1=xref                    */
char C2Zwb;                   /* 0=nozwb, 1=zwb                      */
/*          *****> following are rel 3 + only <*****                 */
char C2Cmp2;                  /* 0=nocmpr2, 1=cmpr2                  */
char C2Name;                  /* 0=noname, 1=name                    */
char C2Nmcl;                  /* 0=nmclpri, 1=nmclalt                */
char C2Dbcs;                  /* 0=nodbcs, 1=dbcs                    */
char C2Awo;                   /* 0=noawo, 1=awo                      */
/*   *****> the following fields apply only to COBOL/370 <*****      */
char C3Eve;                   /* 0=noevents, 1=events                */
char C3Cur;                   /* 0=nocurrency, 1=currency            */
char C3Rmod;                  /* 0=rmode24, 1=rmode(any)             */
char C3Rsv1;                  /* reserved                            */
char C3Rsv2;                  /* reserved                            */
char C3Rsv3;                  /* reserved                            */
char C3Rsv4;                  /* reserved                            */
/* *****> following field applies to all supported COBOL's <*****    */
char CobSm;                   /* 0=no sort/merge found, 1=sort/merge */
char CobDc;                   /* cobol dynamic calls found switch:   */
/*                            /* 0= no dynamic calls found in module */
/*                      1= call literal forced dynamic found         */
/*                      2= call dataname found                       */
/*                      3= call literal forced + call dataname       */
/*                      4= capex optimizer call adder really 5,6,7   */
/*                      5= capex call literal forced dynamic found   */
/*                      6= capex call dataname found                 */
/*                      7= capex call literal forced + call dataname */
/* *****> following fields relate to version 4 and OS/VS COBOL <**** */
char C4Symd;                  /* 0=nosymdmp, 1=symdmp                */
char C4Flow;                  /* 0=noflow, 1=flow                    */
char C4Stat;                  /* 0=nostate, 1=state                  */
char C4Test;                  /* 0=notest, 1=test                    */
char C4Res;                   /* 0=nores, 1=res                      */
char C4Endj;                  /* 0=noendjob, 1=endjob                */
char C4O370;                  /* 0=obj360, 1=obj370                  */
char C4Copt;                  /* 0=compiler not opt., 1=optimized    */
char C4Caop;                  /* 0=not capex opt., 1=capex optimized */
char C4Cdet;                  /* 0=no capex dtect, 1=capex dtect     */
/*         *****> following are os/vs only options <*****            */
char C4Coun;                  /* 0=no count option, 1=count          */
char C4Trac;                  /* 0=no trace option, 1=trace option   */
char C4Llvl;                  /* 1=langlvl1, 2=langlvl2              */
char C4Syso;                  /* tail char of sysou display ddname   */
char C4Rsv1;                  /* reserved                            */
char C4Rsv2;                  /* reserved                            */
char C4Rsv3;                  /* reserved                            */
/*             *****> PL/I options <*****                            */
char P2Main;                  /* 1=proc options(main), 0=not         */
char P2Orde;                  /* 0=noreorder, 1=reorder              */
char P2Exec;                  /* 0=noexecops, 1=execops              */
char P2Cmpa;                  /* 1=cmpat(v1), 2=cmpat(v2)            */
char P2Grap;                  /* 0=nographic, 1=graphic              */
char P2Opt;                   /* 0=nooptimize, 1=optimize            */
char P2Inte;                  /* 0=nointerupt, 1=interupt            */
char P2Flow;                  /* 0=noflow, 1=flow                    */
char P2Coun;                  /* 0=nocount, 1=count                  */
char P2Test;                  /* 0=notest, 1=test                    */
char P2Syst;                  /* 1=CMS, 2=CMSTP, 3=MVS, 4=TSO,       */
                              /* 5=CICS, 6=IMS                       */
char P2Csty;                  /* csect type: 1=compiler generated    */
                              /* runtime csect, 2=external data csect*/
                              /* 3=static data csect, 4=code csect   */
char filler2[32];             /* reserved                            */
} mr;                         /* instance of machine friendly record */

struct {                      /* output record description           */
char Member[8];               /* member name                         */
char filler1;
char Csect[8];                /* csect name                          */
char filler2;
char LoadLib[4];              /* load library abbreviation           */
char filler4;
char CompType[2];             /* Compiler type                       */
char filler[55];              /*                                     */
} out;                        /* instance of output record           */

int InputRecords = 0;         /* Number input records                */
int OutputRecords =0;         /* Number output records               */
int MoreEdgeRecords = -1;     /* 0 = eof edge machine friendly file  */
FILE *edgemr,*output1;        /* file pointers                    */
char FindName[35][9] = {"ALLOCDYN",
                        "ALTSAR  ",
                        "BLOKHEAD",
                        "CLOSALL ",
                        "COBABEND",
                        "COPYREC ",
                        "DATEJUL ",
                        "DB2ABEND",
                        "DELLIST ",
                        "DPKDYNAM",
                        "DYNALLOC",
                        "FILESTAT",
                        "FIXBLK  ",
                        "GENLDAT2",
                        "GETJOBN ",
                        "GETVOLUM",
                        "ILBCHECK",
                        "IL10STRP",
                        "JOBINFO ",
                        "LOADATE ",
                        "NOTIME  ",
                        "PRTPCH  ",
                        "READASUB",
                        "READDIR ",
                        "READMEM ",
                        "RETCODE ",
                        "RETURNCD",
                        "RUX0045P",
                        "RUX0053P",
                        "SCANLIST",
                        "SNAPDUMP",
                        "SWAPPER ",
                        "WHEREAMI",
                        "WTO     ",
                        "WTOHI   "};
/*****************************************************************/
/* function prototypes                                           */
/*****************************************************************/
int main(void);                      /* executive control routine */
void Initialize(void);               /* initialization routine */
void Process(void);                  /* Processing routine */
void ReadEdgeMR(void);               /* reads the EDGEMR file */
void WriteOutput1(void);             /* writes the output1 file */
void Terminate(void);                /* termination routine */
/*****************************************************************/
/* main() function: executive control                            */
/*****************************************************************/
int main(void) {
  Initialize();                      /* initialize for Processing */
  while(MoreEdgeRecords)             /* until edgemr is exhausted, */
    Process();                       /*    Process records. */
  Terminate();                       /* Terminate Processing */
  return(0);
}
/*****************************************************************/
/* Initialize(): initialization routine. opens files.            */
/*****************************************************************/
void Initialize(void) {
  edgemr=fopen("dd:EDGEMR","rb,type=record,recfm=fb,lrecl=200");
  if(edgemr == NULL) {
    perror("\ncan't open the EDGEMR file");
    exit(8);
  }
  output1=fopen("dd:OUTPUT1","wb,type=record,recfm=fb,lrecl=80");
  if(output1 == NULL) {
    perror("\ncan't open the OUTPUT1 file");
    exit(8);
  }
  memset(&out, ' ', sizeof(out));
}
/*****************************************************************/
/* Process: Print selected records.                              */
/*****************************************************************/
void Process(void) {
  int totctr, i, j;

  ReadEdgeMR();                  /* Read next EDGEMR record */
  if(!MoreEdgeRecords) return;   /* Return if end of file */
  for(i=0;i<35;i++) {
     j = memcmp(FindName[i],mr.Csect,8);
     if(!j) {
        memcpy(out.Member, mr.Member, 8); /* format output */
        memcpy(out.Csect, mr.Csect,8);
        memcpy(out.LoadLib, mr.LoadLib, 4);
        memcpy(out.CompType, mr.CompType, 2);
        WriteOutput1();            /* write OutRec */
     }
  }
}
/*****************************************************************/
/* ReadEdgeMR() reads the next record from the EDGEMR file into  */
/* the mr area. At end of file, the MoreEdgeRecords field is set */
/* to zero (false).                                              */
/*****************************************************************/
void ReadEdgeMR(void) {
  size_t EdgeRecLen;

  EdgeRecLen=fread(&mr, 1,  255, edgemr);
  if(ferror(edgemr)) {
    perror("\nError (ferror) reading EDGEMr file");
    exit(8);
  }
  if(feof(edgemr)) {
    MoreEdgeRecords = 0;
    return;
  }
  if(EdgeRecLen == 0) {
    perror("\nError (0 read) reading EDGEMR file");
    exit(8);
  }
  InputRecords++;
}
/*****************************************************************/
/* WriteOutput1 writes the record in the OutRec area for the     */
/* length given by the OutRecLen field to the OUTPUT1 file.      */
/*****************************************************************/
void WriteOutput1(void) {
  fwrite(&out, 1,  sizeof(out), output1);
  if(ferror(output1)) {
    perror("\nError (ferror) writing OUTPUT1 file");
    exit(8);
  }
  OutputRecords++;
  memset(&out, ' ', sizeof(out));
}
/*****************************************************************/
/* Terminate() closes the files and prepares for termination.    */
/*****************************************************************/
void Terminate(void) {
  printf("%d Input Records Read.\n",InputRecords);
  printf("%d Output Records Written.\n",OutputRecords);
  fclose(edgemr);
  fclose(output1);
}
