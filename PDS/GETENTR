/****************************************************************/
/* Reads characters into buffer, echoing the input starting     */
/* at row and column using video attribute attr. characters are */
/* read until an exit key (CR, Esc, or arrow) is encountered, or*/
/* until the number read is one less than the specified buffer  */
/* size, length. If the first key pressed is an exit key, the   */
/* buffer is unaltered. Otherwise, the buffer is initially      */
/* filled with blanks and terminated with a null; therefore, the*/
/* resulting string will be blank-padded on the right. The      */
/* terminating exit key is not placed into the buffer. The      */
/* length parameter should equal the sizeof the receiving buffer*/
/* The mode parameter can specify one or more of the following  */
/* features (constants defined in scr.h):                       */
/*      NOFEAT:   No mode features specified                    */
/*      AUTOEXIT: Exit field automatically when buffer is full  */
/*      UPPER:    Convert all letters to upper case             */
/* The function returns one of the following codes indicating   */
/* the field exit key pressed by the user:                      */
/*     -1     <Esc>                                             */
/*      0     <CR>                                              */
/*      1     <Left arrow>                                      */
/*      2     <Right arrow>                                     */
/*      3     <Up arrow>                                        */
/*      4     <Down arrow>                                      */
/*      5     Automatic exit (last character entered and        */
/*            AUTOEXIT was selected).                           */
/****************************************************************/
int scr_gets(char *buffer, int attr, int row, int col, int length, int mode) {
 register int cur_col, i;  /* current column / loop index */
 int video_seg;     /* Segment of video memory */
 int far *video;     /* far pointer to video memory */
 int key;      /* Stores input key value */
 int first_char = 1;    /* Flag to indicate the 1st character */
 char *chpt;      /* For filling buffer with blanks */
 int far *intfp;     /* For filling buffer with blanks */

 cur_col = col;     /* Initialize current column */
 if(*(char far *)0x00400049 == 7) /* Test Video mode */
  video_seg = 0xB000;    /* monochrome */
 else
  video_seg = 0xB800;    /* color */
 /* Initialize far pointer to video memory */
 video = MK_FP(video_seg, row * 160 + col * 2);
 /* Place cursor at first position */
 set_cur(row, cur_col, 0);
 for(;;)                      /* Keyboard read loop */
  switch (key = kbd_getc()) {
   case 0x011B:   /* Esc */
    return(-1);
   case 0x4B00:   /* Left arrow */
    return(1);
   case 0x4D00:   /* Right arrow */
    return(2);
   case 0x4800:   /* Up arrow */
    return(3);
   case 0x5000:   /* Down arrow */
    return(4);
   case 0x1C0D:   /* Return */
    return(0);
   case 0x0E08:   /* Backspace */
    if(cur_col > col) {
     set_cur(row, --cur_col, 0);
     *--video = (attr << 8) | ' ';
     *--buffer = ' ';
    }
    break;
   default:
    if(cur_col >= col + length - 1)    /* Test end of buffer */
     break;
    if(key & 0x00FF == 0)   /* Test for non-ASCII character */
     break;
    if(mode & UPPER)        /* Uppercase conversion */
     key = toupper(key & 0x00FF);
    else
     key &= 0x00FF;      /* Remove extended code */
    /* Place key in video memory and buffer */
    *video++ = (attr << 8) | key;
    *buffer++ = key;
    set_cur(row, ++cur_col, 0);   /* Update cursor position */
    if(first_char) {       /* Blank fill buffer on first char */
     first_char = 0;
     chpt = buffer;
     intfp = video;
     for(i = 1; i <= length-2; ++i) {
      *chpt++ = ' ';
      *intfp++ = (attr << 8) | ' ';
     }
     *chpt = '\0';
    }
    /* Test for AUTOEXIT */
    if((cur_col >= col + length - 1) && (mode & AUTOEXIT))
     return(5);            /* Code for AUTOEXIT */
     break;
   }
}
