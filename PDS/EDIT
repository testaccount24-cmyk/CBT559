/**********/
/* edit.c */
/*********************************************************************/
/*                     Generic edit subroutine                       */
/* The edit function provides numeric report editing, including      */
/* leading zero suppression, check protection, floating $, leading   */
/* or trailing minus sign, insertion of commas, decimal points and   */
/* other non-numeric fields. The first parameter is the address of   */
/* the edited output, whose size will be the same as the pattern.    */
/* The second parameter is the editing pattern, which must be a true */
/* null-terminated string containing the edit pattern. The third     */
/* is the number to be edited, a null-terminated string containing   */
/* only digits 0-9 except the first position, which is a -, if the   */
/* number is negative. The pattern may be up to 64 characters, and   */
/* the number to be edited may contain up to 32 characters. The      */
/* number may not contain more significant digits than there are     */
/* digit select characters in the pattern. If there are more digits  */
/* selected by the pattern than there are in the number, leading     */
/* zeros will be assumed. In the pattern, the first character may    */
/* be:      $ (floating dollar sign)                                 */
/*          * (check protection)                                     */
/*          - (floating minus sign)                                  */
/* The body of the edit pattern will be composed of digit select     */
/* characters (z and 9) and other characters, handled as follows:    */
/*          z (zero suppression output is a blank in this position   */
/*             until significance is set by receipt of a significant */
/*             digit or a 9 in the pattern. After significance is    */
/*             set, output is a digit from the number.)              */
/*          9 (output is a digit from the number and significance    */
/*             is set, even if the digit is a leading zero.)         */
/*        other characters in the pattern will be output as-is after */
/*             significance is set, but will be output as blanks     */
/*             before significance is set.                           */
/* Characters in the pattern following the last digit select will    */
/* be output as-is if the number is negative, otherwise output will  */
/* be blanks for these pattern positions.                            */
/*                                                                   */
/* When * check protection is selected, output will be *, rather     */
/* than blanks as mentioned above.                                   */
/*                                                                   */
/* An integer is returned to indicate success or errors:             */
/*                 0 = successful edit                               */
/*                 1 = pattern too long (over 64 characters)         */
/*                 2 = too many digits selected (over 32)            */
/*                 3 = no output digits selected in pattern          */
/*                 4 = number contains non-numeric data              */
/*                 5 = number has more digits than the pattern       */
/*                                                                   */
/* Examples:                            nbr=             outf=       */
/*    err=edit(outf,"zz,zz9.99-",nbr);  0                     0.00   */
/*                                      123                   1.23   */
/*                                      562983            5,629.83   */
/*                                      -4675                46.75-  */
/*    err=edit(outf,"$,$$$.$$",nbr);    0                            */
/*                                      123                  $1.23   */
/*                                      562983           $5,629.83   */
/*                                      -4675               $46.75   */
/*    err=edit(outf,"***.**",nbr);      0                            */
/*                                      123                 **1.23   */
/*                                      562983   err = 5             */
/*                                      -4675               *46.75   */
/*    err=edit(outf,"--,--9.99",nbr);   0                     0.00   */
/*                                      123                   1.23   */
/*                                      562983            5,629.83   */
/*                                      -46.75              -46.75   */
/*                                                                   */
/* Author R Thornton April 1989                                      */
/*********************************************************************/
/**/
int edit(char output[], char pattern[], char number[]) {
  char float_val = ' ';
  char fill_val = ' ';
  char sign_val = ' ';
  int signif = 0;
  int psize = 0;
  int pdig = 0;
  int plast = 0;
  int ndig = 0;
  char nbr[33];
  char ch= ' ';
  int po=0;
  int n=0;

/****************************************************************/
/* examine pattern: set up float and fill, count size and digits*/
/****************************************************************/
  if(((ch=pattern[0]) == '$') || (ch == '*') || (ch == '-'))
    float_val = ch;
  if(ch == '*')
    fill_val = '*';
  while((ch=pattern[po]) != '\0') {
    if((ch == 'z') || (ch == '9')) {
      pdig++;
      plast = po;
    }
    psize++;
    po++;
  }
  if(psize > 63)
    return(1);
  if(pdig > 32)
    return(2);
  if(!pdig)
    return(3);
/****************************************************************/
/* examine number: set up sign, count digits, check numeric.    */
/* set error if more digits than pattern, move right justified  */
/****************************************************************/
  if(number[0] == '-') {
    sign_val = '-';
    n = 1;
  }
  while((ch=number[n]) != '\0') {
    if((ch < '0') || (ch > '9'))
      return(4);
    ndig++;
    n++;
  }
  if(ndig > pdig)
    return(5);
  for(po=0;po<(pdig-ndig);po++)
    nbr[po] = '0';
  if(sign_val == ' ')
    n = 0;
  else
    n=1;
  for(;po<pdig;po++,n++)
    nbr[po] = number[n];
/****************************************************************/
/* scan across the pattern, setting the corresponding output    */
/* byte from pattern, fill, or amt depending on the pattern     */
/* character and state of significance.                         */
/****************************************************************/
  if(float_val != ' ') {
    output[0] = ' ';
    po = 1;
  }
  else
    po = 0;
  n = 0;
  while((po <= plast)) {
    ch = pattern[po];
    if(ch == 'z') {
      if(signif) {
        output[po] = nbr[n];
        n++;
      }
      else {
        if(nbr[n] == '0') {
          output[po] = fill_val;
          n++;
        }
        else {
          output[po] = nbr[n];
          signif = -1;
          n++;
          if(float_val == ' ')
            ;
          else
            if((float_val == '$') || (sign_val == '-'))
              output[po-1] = float_val;
        }
      }
    }
    else if(ch == '9') {
      output[po] = nbr[n];
      if(!signif) {
        signif = -1;
        if(float_val == ' ')
          ;
        else
          if((float_val == '$') || (sign_val == '-'))
            output[po-1] = float_val;
      }
      n++;
    }
    else {
      if(signif)
        output[po] = pattern[po];
      else
        output[po] = fill_val;
    }
    po++;
  }
  while((ch=pattern[po]) != '\0') {
    if(sign_val == ' ')
      output[po++] = fill_val;
    else
      output[po++] = pattern[po];
  }
  return(0);
}
