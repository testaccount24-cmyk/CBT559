/************/
/* setdiary */
/*********************************************************************/
/* This program adds a month of new entries to an existing diary file*/
/* and produces a new diary file as output. The user is asked for the*/
/* month to be added, and the names of the files to be used. Any data*/
/* for earlier or later months is copied to the new diary file as-is.*/
/* When entries are found in the old diary for dates within the month*/
/* being added, the data is retained in the new diary file. For all  */
/* dates in the new month, data from the tickler file for the day-of-*/
/* week is added to the entry created in the new diary output file.  */
/*********************************************************************/
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>

/*********************************************************************/
/*               *** function prototypes ***                         */
/*********************************************************************/
void getadate(void);                /* get the year/month to process */
void initiate(void);               /* initialization control routine */
void opnfiles(void);                /* open the files for processing */
void ldsusdta(void);               /* read suspense data into memory */
void ldsusdow(void);                 /* read/store dow suspense data */
void ldsusdom(void);                 /* read/store dom suspense data */
void rdsusfil(void);                 /* read a line of suspense data */
void rdoldfl(void);                 /* read a line of old diary file */
void cmpdates(void);               /* compare old diary, today dates */
void wtoldfl(void);               /* write a line into the new diary */
void susdayhd(void);             /* process suspense day header line */
void susdaydt(void);               /* process suspense day data line */
void susmthhd(void);                  /* process day-of-month header */
void susmthdt(void);                  /* process day-of-month data */
void mainline(void);                  /* mainline processing control */
void terminate(void);                 /* termination processing */
void gtnxdaym(void);                  /* get next day in month */
void cpydryln(void);             /* copy old diary line to new diary */
void stnewday(void);             /* copy suspense day lines to diary */

/*********************************************************************/
/*               *** global structure definitions ***                */
/*********************************************************************/
struct DATEGENL
{
 enum {
  julian_yyyyddd_sent = 'j',
  gregorian_mmddyyyy_sent = 'g',
  gregorian_yyyymmdd_sent = 'y'
 } datyp;                          /* date supplied type */
 enum {
  successful_conversion = ' ',
  error_in_data_supplied = 'e'
 } daterr;                         /* result indicator */
 enum {
  Monday = '1',
  Tuesday = '2',
  Wednesday = '3',
  Thursday = '4',
  Friday = '5',
  Saturday = '6',
  Sunday = '7'
 } daywk;                          /* day of week indicator */
 enum {
  not_a_holiday = ' ',
  New_Years_Day = '1',
  Christmas_Eve = '2',
  Good_Friday = '3',
  Memorial_Day = '4',
  Independence_Day = '5',
  Labor_Day = '6',
  Thanksgiving_Day = '7',
  Friday_After_Thanksgiving = '8',
  Christmas_Day = '9'
 } holiday;                        /* holiday indicator */
 enum {
  not_leap_year = '0',
  leap_year = '1'
 } yeartyp;                        /* year type */
 char juldate[8];                     /* julian date yyyyddd */
 char gregmdy[9];                     /* gregorian date mmddyyyy */
 char gregymd[9];                     /* gregorian date yyyymmdd */
 char litdate[19];                  /* literal date, eg: May 9, 2002 */
 char julslash[9];                    /* julian date yy/ddd */
 char grgslash[11];                   /* gregorian date mm/dd/yyyy */
 char daylit[10];                 /* literal day of week, eg: Sunday */
 char monthlit[10];                   /* literal month, eg: July */
};

struct DATEGENL dategenl, *p = &dategenl; /* date info */
struct sus_entry {                    /* define suspense table entry */
 struct sus_entry *nexline;         /* pointer to next line */
 char sus_line[81];                 /* suspense line */
} *daywkptr[7], *daymoptr[33], *lastptr, *susptr1, *susptr2; /*pnters*/
void genldat2(struct DATEGENL *p); /* genldat2 */

/*********************************************************************/
/*               *** global data definitions ***                     */
/*********************************************************************/
int  more_suspense_lines = 1;      /* eof for suspense file */
int  more_old_diary_lines = 1;     /* eof for old diary file */
int  more_days_in_month = 1;     /* end of generated month indicator */
int  table_header = 0;             /* table header found indicator */
int  comment_card = 0;             /* comment card found indicator */
char old_date;                /* buffer date : next month date indic */
char test_date[9];                 /* date test field */
char txt_buff[121];                /* file buffer */
char save_old_diary_line[121]; /* save area for txt_buff line */
FILE *oldfile;                     /* pointer to old diary file */
FILE *newfile;                     /* pointer to new diary file */
FILE *susfile;                     /* pointer to suspense data file */
int day_sub;                       /* day of week subscript */
int daymth_sub;                    /* day of month subscript */
int this_day;               /* suspense day of month being processed */
int this_month;                    /* this month */
int this_year;                     /* this year */
char first_pay[11];            /* date of a payday prior to this mth */


/***************************************************************/
/* Executive control routine                                   */
/***************************************************************/
void main() {
 initiate();                        /* initialize */
 mainline();                        /* process data */
 terminate();                       /* terminate processing */
}
/***************************************************************/
/* Initialization control routine                              */
/***************************************************************/
void initiate(void) { /*initialization control routine */
 int i;

 for(i=0;i<33;i++) daymoptr[i] = NULL; /* clear pointer table */
 for(i=0;i<7;i++) daywkptr[i] = NULL; /* clear pointer table */
 getadate();                        /* get the year/month to process */
 opnfiles();                        /* open the files for processing */
 rdsusfil();                     /* read first line of suspense data */
 ldsusdta();                       /* read suspense data into memory */
 rdoldfl();                          /* read first old diary line */
 cmpdates();                       /* compare old diary, today dates */
}
/***************************************************************/
/* Get the year and month to be processed.                     */
/***************************************************************/
void getadate(void) {               /* get the year/month to process */
 int i;                             /* subscript, etc */
 char string[80];                   /* utility string field */
 char cyear[5], cmonth[3]; /* character date fields */
 int error_flag = 1;
 while(error_flag) {              /* get year and month to be added */
  printf("\nEnter year and month as yyyymm (0 quits): "); /*get date */
  gets(string);                         /* read entered yyyymm date */
  if(string[0] == '0')
  exit(0);
  if(strlen(string) != 6)
   continue;
  error_flag = 0;
  strcpy(&string[6],"01");
  strcpy(dategenl.gregymd,string);      /* send yyyymm01 to genldat2 */
  dategenl.datyp = gregorian_yyyymmdd_sent;
  genldat2(p);                          /* go check valid date */
  if(dategenl.daterr == error_in_data_supplied)
  error_flag = 1;
 }
 memcpy(cmonth, string+4, 2);        /* copy string value of month */
 cmonth[2] = '\0';                   /* make string valid */
 this_month = atoi(cmonth);           /* save int value of month */
 memcpy(cyear, string, 4);        /* copy string value of year */
 cyear[4] = '\0';                 /* make valid string */
 this_year = atoi(cyear);           /* save int value of year */
}
/***************************************************************/
/* Open the files for processing                               */
/***************************************************************/
void opnfiles(void) {               /* open the files for processing */
 int error_flag = 1;
 char string[80];                   /* utility string */
 char old_diary[80];                /* old diary file name */
 char new_diary[80];                /* new diary file name */
 char sus_file[80];                 /* suspense file name */

 while(error_flag) {
  printf("\nEnter the suspense data file name or blank to quit: ");
  gets(sus_file);               /* read in suspense file name */
  if(strlen(sus_file) == 0)
   exit(0);
  if(sus_file[0] == ' ')
   exit(0);
  if((susfile = fopen(sus_file,"rb")) == NULL) {
   printf("Can't open %s",sus_file);
   exit(0);
  }
  else
  error_flag = 0;
 }
 error_flag = 1;
 while(error_flag) {
  printf("\nEnter the old diary file name or blank to quit: ");
  gets(old_diary);          /* read in old diary file name */
  if(strlen(old_diary) == 0)
   exit(0);
  if(old_diary[0] == ' ')
   exit(0);
  if((oldfile = fopen(old_diary,"rb")) == NULL) {
   printf("Can't open %s",old_diary);
   exit(0);
  }
  else
   error_flag = 0;
 }
 error_flag = 1;
 while(error_flag) {
  printf("\nEnter the new diary file name or blank to quit: ");
  gets(new_diary);              /* read in new diary file name */
  if(strlen(new_diary) == 0)
   exit(0);
  if(new_diary[0] == ' ')
   exit(0);
  if((newfile = fopen(new_diary,"wb")) == NULL) {
   printf("Can't open %s",new_diary);
   exit(0);
  }
  else
   error_flag = 0;
 }
}
/***************************************************************/
/* Control routine for reading and storing suspense data       */
/***************************************************************/
void ldsusdta(void) {

 while(more_suspense_lines) {
   if(table_header) {
  if(memcmp(txt_buff+3, "DOW", 3) == 0)
    ldsusdow();
  else
    if(memcmp(txt_buff+3, "DOM", 3) == 0)
   ldsusdom();
    else {
   printf("\nInvalid Suspense Data header:");
   printf("\n%s",txt_buff);  /* display the suspense line */
   exit(0);
    }
   }
   else {
  printf("\nSkipping until next valid header line:");
  printf("\n%s",txt_buff);  /* display the suspense line */
  exit(0);
   }
 }
}
/***************************************************************/
/* Read and store the day-of-week suspense data                */
/***************************************************************/
void ldsusdow(void) {              /* read suspense data into memory */
 int i;                                /* subscript, etc */
 do {
  rdsusfil();                       /* read a line of suspense data */
  if(more_suspense_lines)
   if(!(table_header))
    if(txt_buff[0] == ' ')
     susdaydt();                /* process suspense day data line */
    else
     susdayhd();                /* process suspense day header line */
 }
 while(more_suspense_lines && !table_header);
}
/***************************************************************/
/* Process the suspense file day-of-week header lines          */
/***************************************************************/
void susdayhd(void) { /* process suspense day header line */
 int i;                             /* subscript, etc */
 static char day_name[7][3] = { {"Mon"}, {"Tue"}, {"Wed"}, {"Thu"},
            {"Fri"}, {"Sat"}, {"Sun"} };

 day_sub = -1;                           /* initialize day subscript */
 for(i=0;i<7;i++)
  if(!memcmp(txt_buff,day_name[i],3)) /* search day name table */
   day_sub = i;
 if(day_sub == -1) {
  printf("\nInvalid day header in suspense file\n");
  printf("\n%s\n",txt_buff);
  exit(0);
 }
}
/***************************************************************/
/* Process the suspense file day-of-week data lines            */
/***************************************************************/
void susdaydt(void) {              /* process suspense day data line */
 int i, len;                         /* subscript, length, etc */
 len = strlen(txt_buff);
 len += 8;
 susptr1 = (struct sus_entry *) malloc(len); /* get memory */
 susptr1->nexline = NULL;            /* set its nexline ptr to NULL */
 strcpy(susptr1->sus_line, txt_buff); /*move txt_buff to data line*/
 if(daywkptr[day_sub] == NULL)      /* if this is the first line for */
  daywkptr[day_sub] = susptr1;        /* a day, set the daywkptr   */
 else {
  susptr2 = daywkptr[day_sub];          /* else locate the last */
  while(susptr2->nexline)             /* pointer to point to  */
   susptr2 = susptr2->nexline;     /* and set its nexline  */
  susptr2->nexline = susptr1;         /* to this new line.    */
 }
}
/***************************************************************/
/* Read and store the specific day of month suspense data      */
/***************************************************************/
void ldsusdom(void) {           /* read suspense data into memory */
 int i;                            /* subscript, etc. */
 do {
  rdsusfil();                   /* read next line from suspense */
  if(more_suspense_lines)
   if(!(table_header))
    if(txt_buff[0] == ' ')
     susmthdt();                /* process suspense month data line */
    else
     susmthhd();               /* process suspense month header line */
 }
 while(more_suspense_lines && !table_header);
}
/***************************************************************/
/* Process the suspense file day-of-month header lines         */
/***************************************************************/
void susmthhd(void) { /* process suspense day header line */
 int i;                             /* subscript, etc */
 int error;                         /* error indicator */
 int hdr_month, hdr_day;            /* integer values for month, day */
 char char_month[3];                     /* month of header */
 char char_day[3];                       /* day of header */

 memcpy(char_month, txt_buff, 2);   /* copy month value */
 char_month[2] = '\0';              /* make valid string */
 memcpy(char_day, txt_buff+3, 2);   /* copy day value */
 char_day[2] = '\0';                /* make string valid */
 error = 0;                         /* clear error indicator */
 if(memcmp(txt_buff, "**", 2) == 0) /* any month? */
  hdr_month = this_month;           /* if "**" use this month */
 else
  hdr_month = atoi(char_month);  /* convert char month to int */
 hdr_day = atoi(char_day);          /* convert char day to int */
 if(txt_buff[2] != '/') error = -1; /* slash must separate mth, day */
 if(hdr_month < 1) error = -1;      /* month must be > 0 */
 if(hdr_month > 12) error = -1;     /* month must be < 13 */
 if(memcmp(txt_buff+3 , "LAST", 4) == 0)   /* last day of month? */
  hdr_day = 32;                               /* yes, set to day 32 */
 else {
  if(hdr_day < 1) error = -1;        /* day must be > 0 */
  if(hdr_day > 31) error = -1;       /* day must be < 32 */
  if(hdr_day == 31)
   if((hdr_month == 2) || (hdr_month == 4) || (hdr_month == 6) ||
    (hdr_month == 9) || (hdr_month == 11)) error = -1;
  if((hdr_day > 29) && (hdr_month == 2)) error = -1;
  if(error) {
   printf("\nInvalid day-of-month header in suspense file\n");
   printf("\n%s\n",txt_buff);
   exit(0);
  }
 }
 if(hdr_month == this_month)
  this_day = hdr_day;
 else
  this_day = 0;
}
/***************************************************************/
/* Process the suspense file day-of-month data lines           */
/***************************************************************/
void susmthdt(void) {              /* process suspense day data line */
 int i, len;                         /* subscript, length, etc */

 len = strlen(txt_buff);
 len += 8;
 if(this_day) {                    /* if processing a day-of-month */
  susptr1 = (struct sus_entry *) malloc(len); /* get memory */
  susptr1->nexline = NULL;            /* set its nexline ptr to NULL */
  strcpy(susptr1->sus_line, txt_buff); /*move txt_buff to data line */
  if(daymoptr[this_day] == NULL)    /* if this is the first line for */
   daymoptr[this_day] = susptr1;        /* a day, set 1st daymoptr */
  else {
   susptr2 = daymoptr[this_day]; /* else locate the last */
   while(susptr2->nexline)             /* pointer to point to  */
    susptr2 = susptr2->nexline;     /* and set its nexline  */
   susptr2->nexline = susptr1;         /* to this new line.    */
  }
 }
}
/***************************************************************/
/* Read next line of suspense data and flag end-of-file        */
/***************************************************************/
void rdsusfil(void) {               /* read a line of suspense data */
 int i;                                /* work field */

 table_header = 0;                  /* clear flag */
 comment_card = -1;                 /* clear flag */
 while(more_suspense_lines && comment_card) {
  if((fgets(txt_buff,120,susfile)) == NULL)
   if(ferror(susfile)) {
    perror("\nError reading the suspense file: ");
    terminate();
    exit(0);
   }
   else
    more_suspense_lines = 0; /* indicate no more suspense data */
  else {
   i = (strlen(txt_buff)) - 2;      /* point to ending CR, NL */
   if((txt_buff[i]) != '\r') {
    txt_buff[i+2] = '\r';
    txt_buff[i+3] = '\n';
    txt_buff[i+4] = '\0';
   }
  if(memcmp(txt_buff, "$$$", 3) == 0)
   table_header = -1;          /* indicate table header */
  if(memcmp(txt_buff, "/*", 2) == 0) /* check for comments */
   comment_card = -1;
  else
   comment_card = 0;
  }
 }
}
/***************************************************************/
/* Mainline processing                                         */
/***************************************************************/
void mainline(void) {                 /* mainline processing control */
 while((more_old_diary_lines) || (more_days_in_month)) {
  if(more_days_in_month) {
   if(more_old_diary_lines) {
    cmpdates(); /* compare old diary, today */
    if(old_date == '<') {
     wtoldfl(); /* write buffer to diary */
     rdoldfl(); /* read next old diary */
    }
    else {
     strcpy(save_old_diary_line, txt_buff);
     stnewday();            /* copy lines for this day */
     gtnxdaym(); /* get next month date */
     if(old_date == '>')
      strcpy(txt_buff, save_old_diary_line);
     else
      rdoldfl();
    }
   }
   else {
    stnewday();               /* copy day-of-week lines */
    gtnxdaym();                /* compute next date in month */
   }
  }
  else
   if(more_old_diary_lines) {
    wtoldfl();               /* write buffer to new diary */
    rdoldfl();               /* read next old diary record */
   }
 }
}
/******************************************************************/
/* Read next line of old_diary data and flag end-of-file          */
/******************************************************************/
void rdoldfl(void) {              /* read next line of old diary file*/
 if((fgets(txt_buff,120,oldfile)) == NULL)
  if(ferror(oldfile)) {
   perror("\nError occurred reading old diary file: ");
   terminate();
   exit(0);
  }
  else
   more_old_diary_lines = 0;
}
/******************************************************************/
/* Check to see if the line read is a date header. if not, set    */
/* the old_date indicator to '<'. If it is a date header, compare */
/* to the next day of month in the dategenl struct. Set the       */
/* old_date indicator to '<', '=', or '>' to show the relation.   */
/******************************************************************/
void cmpdates(void) { /*compare old diary date to current date */
 old_date = '<';               /* assume not date header or low date */

 if((txt_buff[2] == '/') && (txt_buff[5] == '/')) {
  strcpy(test_date,&txt_buff[6]);        /* move year to test field */
  memcpy(&test_date[4],txt_buff,2);      /* move month to test field */
  memcpy(&test_date[6],&txt_buff[33],2); /* move day to test field */
  if((memcmp(test_date,dategenl.gregymd,8)) == 0)
   old_date = '=';
  else if((memcmp(test_date,dategenl.gregymd,8)) > 0)
   old_date = '>';
 }
}
/***************************************************************/
/* copy suspense lines for current day of week to the new      */
/* diary file. First, write the date header line. Next, if it  */
/* is a holiday, write a holiday name line. Finally, write all */
/* stored suspense lines for this day-of-week.                 */
/***************************************************************/
void stnewday(void) {       /* copy day lines for this day of week */
 int today;                  /* today numeric*/
 char this_day[3];           /* today char */
 static char holiday_name[9][445] = { {" .New Years Day Holiday\r\n"},
       {"    . Christmas Eve Holiday\r\n"},
       {"    . Good Friday Holiday\r\n"},
       {"    . Memorial Day Holiday\r\n"},
       {"    . Independence Day Holiday\r\n"},
       {"    . Labor Day Holiday\r\n"},
       {"    . Thanksgiving Day Holiday\r\n"},
       {"    . Friday After Thanksgiving Holiday\r\n"},
       {"    . Christmas Day Holiday\r\n"} };
 strcpy(txt_buff,dategenl.grgslash);      /*    new date */
 strcat(txt_buff," ");                    /*        header */
 strcat(txt_buff,dategenl.daylit);        /*            line */
 strcat(txt_buff,"\r\n");                 /*                   */
 wtoldfl();                            /* write new date header line */
 if(dategenl.holiday == not_a_holiday);
 else {                                   /* write holiday name line */
  strcpy(txt_buff,holiday_name[dategenl.holiday-'1']);
  wtoldfl();
 }
 susptr1 = daywkptr[dategenl.daywk - '1']; /* point to 1st day entry */
 while(susptr1) {
  strcpy(txt_buff,susptr1->sus_line);   /* copy suspense line */
  wtoldfl();                            /* write to new diary */
  susptr1 = susptr1->nexline;           /* point to next line */
 }
 memcpy(this_day, dategenl.gregmdy+2, 2);  /* extract day of month */
 this_day[2] = '\0';                       /* make valid string */
 today = atoi(this_day);                   /* convert it to numeric */
 susptr1 = daymoptr[today];              /* point to first day entry */
 while(susptr1) {
  strcpy(txt_buff,susptr1->sus_line);   /* copy suspense line */
  wtoldfl();                            /* write to new diary */
  susptr1 = susptr1->nexline;           /* point to next line */
 }
}
/***************************************************************/
/* get next day in the month being processed. if no more days  */
/* clear the more_days_in_month flag.                          */
/***************************************************************/
void gtnxdaym(void) {               /* get next day of month */

 dategenl.datyp = gregorian_yyyymmdd_sent;
 dategenl.gregymd[7] ++;
 if(dategenl.gregymd[7] == '\x3A') {
  dategenl.gregymd[7] = '0';
  dategenl.gregymd[6] ++;
 }
 genldat2(p);
 if(dategenl.daterr == error_in_data_supplied) { /* last day of mth?*/
  more_days_in_month = 0;
  susptr1 = daymoptr[32];                /* point to LAST day entry */
  while(susptr1) {
   strcpy(txt_buff,susptr1->sus_line);   /* copy suspense line */
   wtoldfl();                            /* write to new diary */
   susptr1 = susptr1->nexline;           /* point to next line */
  }
 }
}
/***************************************************************/
/* write a line to the new diary file                          */
/***************************************************************/
void wtoldfl(void) { /*write next line of new diary file*/

 if((fputs(txt_buff,newfile)) == EOF) {
  perror("\nError occurred writing new diary file: ");
  terminate();
  exit(0);
 }
}
/***************************************************************/
/* Termination processing: close files                         */
/***************************************************************/
void terminate(void) {                /* termination processing */
 fclose(oldfile);                    /* close suspense file    */
 fclose(oldfile);                    /* close old diary file   */
 fclose(newfile);                    /* close new diary file   */
}
