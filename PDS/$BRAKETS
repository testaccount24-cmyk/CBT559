Use of brackets to enclose subscript values in the C language causes
problems, since the compiler expects a left-bracket to be given by
the hex value AD, and the right bracket by the hex value BD. Another
unusual character is the circumflex (upside-down v) which the compiler
expects to be represented by hex 5F.

The problem is that the terminals used for mainframe access may not
display the brackets when the keys showing them are pressed. Often
you get a cent-sign for a left bracket, a vertical bar (logical-or)
for the right bracket and a logical-not sign for the circumflex.
At first, the problem seems simple: just get used to reading cent-sign
as left bracket and or-sign as right bracket. Unfortunately, though,
the hex values used for these characters are not those expected by
the C language compiler.

One thing you can do is to use the native key displays and get used to
thinking a not-sign is a circumflex, a cent-sign is a left bracket, and
an or-sign is a right bracket during editing. then, just before saving
and compiling, change the values to those needed by the compiler. And
of course you'd have to change them back when you next bring the program
up for editing. a lot of the sting can be removed by use of edit macros
in ISPF.

Another possibility would be to try to get used to seeing the y-umlaut
character as left bracket, and the double-quote as a right bracket, as
they appear that way on my screen when the true compiler values for the
brackets are used in the source code. One problem with this is that you
have to enter these values in hex, as there is no key for them (the
double quote that displays is not really a double quote).

After thinking it over, I decided I'd like my cake and eat it, too. I
decided I'd like to see real brackets while I was editing, and also
have the program compile properly with minimal side effects. My solution
is:
1) Adjust my TSO EDIT session so that I see brackets when I hit the
   bracket keys. We use the IBM Reflection product here, and I had to
   do the following for this:
   a) Click Setup, then Terminal. In National Character Set, choose
      US English (037) and click the Country Extended Graphics Code
      box, then click OK.
   b) Click Setup, then Keyboard. To set up a key, the top keyboard
      represents your PC keyboard, and the bottom one a "standard"
      terminal keyboard. When you click a key on the top keybaord,
      the corresponding key on the terminal keyboard will be
      highlighted, if there is a mapping set up for them. You can also
      choose to transmit an ANSI value rather than a terminal keyboard
      value, which is what needs to be done here, since the standard
      terminal keyboard doesn't have brackets nor circumflex. Here is
      the procedure:
        1) Click left bracket on the top keyboard.
        2) If the REMOVE box in the middle is highlighted, click it.
        3) Click the radio buttons for COMMANDS and ALL COMMANDS.
        4) Scroll the bottom window to the .TransmitANSI "" near the
           bottom of the list and clisk it so it appears in the Script
           window above.
        5) Click on the right side of the Script window until the
           highlighting goes away, then move the cursor between the
           two double-quotes and press the left bracket key, which
           will now appear between the quotes.
        6) Click the Map button in the middle of the screen
        7) Repeat the above for the right bracket key in 1) and 5).
        8) Repeat the above for the circumflex. Note here, though,
           that you also have to click the shift key, then the 6 key
           for circumflex.
2) At this point, when you press a bracket or circumflex key, that is
   what will appear on your terminal screen, and the associated hex
   value will be in that byte when the dataset is saved.
   a) Downside: you no longer have the not-sign, cent-sign, or or-sign
      unless you go back and re-map them to their original values

3) Next, get in an edit session, type the circumflex and both brackets
   and then type HEX on the command line to see the values. I get hex
   B0 for the circumflex, hex BA for the left bracket, and hex BB for
   the right bracket. If you get other values, you will have to modify
   the assembler program CBRAKETS and the CLIST BKT.

4) There is a CLIST in FILE561 called BKT that is an EDIT MACRO that
   will convert all trigraphs and true compiler values for brackets
   and circumflex to the values needed in ISPF EDIT so you can see
   them properly while editing. This CLIST needs to be in a CLIST
   library in your SYSPROC concatenation while you are editing. When
   you bring in a C language program, use the BKT CLIST to make all the
   brackets and circumflexes visible as such on the screen.

5) For compiling the program, I built a solution that needs 2 CLISTs,
   some JCL, and an assembler program:
   a) CLIST CCMP is in FILE561. This CLIST saves the file being edited
      and then submits a job that will convert/compile/linkedit the
      program. This CLIST should be in a library in the SYSPROC
      concatenation during the EDIT session. You will have to change the
      last line to name the library that will contain the JCL EDCCB.
   b) CLIST CEDIT is in FILE561, and is an EDIT MACRO invoked by the
      CCMP CLIST above. It should need no changes, and should be in a
      library in the SYSPROC concatenation during the edit session.
      This edit macro accesses the JCL member EDCCB, changes all
      occurrences of XXXXXXXX to the current program's member name,
      then submits the JCL for execution.
   c) Assembler program CBRAKETS is in FILE558. It must be assembled and
      linked into a load library before executing the CCMP CLIST. It
      reads in a C language source program and changes all occurrences
      of the TSO EDIT values for brackets and circumflexes to the values
      required by the C language compiler. When this program is executed
      by the EDCCB JCL, it creates a temporary file that is fed into
      the C language compiler.
   d) JCL member EDCCB is in FILE560. It must be modified before use to
      include a valid job card. Also change the DSNAMEs in the STEPLIB
      and SYSIN DD statements in the CBRAKETS step, in the STEPLIB and
      SYSLIB DD's in the COMPILE step, and in the STEPLIB, SYSLIB, and
      SYSLMOD DD statements in the BIND step.

6. Once in place, when you are ready to try a compile on the program
   you are editing, invoke the CCMP CLIST which will:
   a) Save the program source code you are editing (must be in a PDS
      or PDSE).
   b) Edit the EDCCB JCL and change all occurrences of XXXXXXXX to
      the name of the member you were editing.
   c) Submit the resulting EDCCB JCL which will:
      1) Read in the saved C language source program and copy it to
         a temporary file after changing all brackets and circumflexes
         to the values the compiler likes.
      2) Run a C language compile of the temporary file created above.
      3) Bind (linkedit) the program to the load library you gave as
         SYSLMOD using the same member name as the source program.

7. Note: While this process takes care of the bracket and circumflex
         in the source program itself, it cannot do so for any header
         files or other things brought in at compile time. Therefore,
         any header files must be in native form with the brackets and
         circumflex characters set to the values needed by the compiler.
