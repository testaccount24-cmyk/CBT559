/*******************************************************************/
/*                      **** copysubr.c ****                       */
/*                                                                 */
/* copies every 50th record from the original subscriber file     */
/* downloaded to the IVRUPROD machine from the mainframe in order  */
/* to create a manageable file for use in testing (about 500       */
/* k-bytes). The output file will contain at least the first input */
/* record and the last two records (trailer record and \f\n record)*/
/* and the trailer record will be modified to contain the correct  */
/* record count for the test file.                                 */
/*                                                                 */
/* Author R Thornton February 1994                                 */
/*******************************************************************/
#include <stdio.h>
#include <stdlib.h>

void initialize(int argc, char *argv[]]); /* initialization function */
void mainline(void);                  /* mainline function */
void terminate(void);                 /* termination function */
void readrec(void);                   /* read next input file record */
void writerec(void);                  /* write record to output file */
void printline(void);                 /* print a line to report file */
int edit(char output[], char pattern[], char number[]); /* edit func */

FILE *infile, *outfile, *prtfile;     /* file handle pointers */
char innam[81];                       /* input file name */
char outnam[81];                      /* output file name */
char prtnam[81];                      /* print file name */

char prtline[135];                    /* print line buffer */
char inrecord[256];                   /* input file record area */
char outrecord[256];                  /* output file record area */

int i;                                /* general purpose int */
char number[32];                      /* ascii numbers for edit() */
int morerecs = -1;                    /* input end-of-file switch */
long incount = 0;                     /* input record counter */
long outcount = 0;                    /* output record counter */
int fiftycnt = 0;                     /* used to count 50 records */


void main(int argc, char *argv[])
{
 initialize(argc, argv);       /* open files */
 while(morerecs)               /* perform mainline until */
  mainline();               /* no more records */
 terminate();                  /* close files */
 exit(0);                      /* quit */
}
/**********************************************************************/
/* mainline function: process input file until no more records.       */
/**********************************************************************/
void mainline(void)
{
 strcpy(prtline,inrecord);     /* move input record to print */
 printline();                       /* and print it */
 strcpy(outrecord,inrecord);   /* move input record to output */
 writerec();                   /* write an output record */
 readrec();                    /* read next input record */
}
/**********************************************************************/
/* initialization: open files, read first input record.               */
/**********************************************************************/
void initialize(int argc, char *argv[])
{
  if(argc == 4) {
    strcpy(&innam,argv[1]);
    strcpy(&outnam,argv[2]);
 strcpy(&prtnam,argv[3]);
    }
    else {
   printf("\nUsage:  ");
      gets(innam);
      printf("\nEnter output file spec: ");
      gets(outnam);
      printf("\nEnter output file spec (or prn): ");
      gets(prtnam);
    }
  if((infile=fopen(innam,"rb")) == NULL) { /* open input */
    printf("Can't open file %s.",innam);
    exit(1);
  }
  if((outfile=fopen(outnam,"wb")) == NULL) { /* open output */
    printf("Can't open file %s.",outnam);
    exit(1);
  }
  if((prtfile=fopen(prtnam,"w"))==NULL) { /* open print file */
    printf("\nCan't open the printer file.");
    exit(1);
  }
  h1ptr = (char *)&header1;           /* point to header1 line */
  for(i=0;i<133;i++)                  /* clear header line */
 h1ptr[i] = ' ';
  header1.hdr_skip = '\f';            /* form feed to header line */
  memcpy(header1.title_line,"SKELETON REPORT TITLE",21);
  timezone = 5 * 60 * 60;               /* set local time for e.s.t */
  daylight = -1;                        /* indicate daylit sav time */
  time(&seconds);                       /* time in secs */
  t = localtime(&seconds);              /* local time to tm struct */
  sprintf(header1.hdr_date,"%2d\/%2d\/%2d",t->tm_mon,t->tm_mday,t->tm_year);
  header1.hdr_date[8] = ' ';             /* clear terminating null */
  memcpy(header1.page_lit,"PAGE ",5);    /* PAGE literal to header */
  prtline[133] = '\0';                   /* terminal null to prt line */
  headings();            /* write first heading */
  readrec();             /* read first input file record */
}
/**********************************************************************/
/* read next input file record. at end of file, set morerecs switch.  */
/**********************************************************************/
void readrec() {
  if(fgets(inrecord,255,infile) == NULL) /* read input until eof */
    morerecs = 0;                        /* set switch at end of file */
  if(morerecs)
    incount++;                           /* add 1 to records read */
}
/**********************************************************************/
/* write a record to the output file                                  */
/**********************************************************************/
void writerec() {
  fputs(outrecord,outfile);        /* write output record */
  outcount++;                      /* add 1 to records written */
}
/**********************************************************************/
/* write a line to the printer                                        */
/**********************************************************************/
void printline() {
  prtline[133] = '\n';           /* terminal newline to print line */
  prtline[134] = '\0';           /* terminal null to print line */
  fputs(prtline,prtfile);        /* write print line */
  linecnt++;                     /* add 1 to line counter */
  if(linecnt > 56)               /* check for end of page */
    headings();                  /* if eop, write header */
  else
    for(i=0;i<133;i++)
      prtline[i] = ' ';          /* clear print line to spaces. */
}
/**********************************************************************/
/* write a report heading                                             */
/**********************************************************************/
void headings() {
  linecnt = 0;                        /* clear line counter */
  pagecnt++;                          /* add 1 to page counter */
  sprintf(number,"%d",pagecnt);           /* convert to printable nbr */
  edit(header1.page_nbr,"zz,zz9",number); /* page nbr to header line */
  header1.newline = '\n';                /* terminal newline to header */
  header1.null_byte = '\0';              /* terminal null to header */
  fputs((char *)&header1,prtfile);        /* write header line */
  for(i=0;i<133;i++)
    prtline[i] = ' ';                 /* clear print line */
  prtline[133] = '\n';           /* terminal newline to print line */
  prtline[134] = '\0';           /* terminal null to print line */
  fputs(prtline,prtfile);             /* blank line after heading */
}
/**********************************************************************/
/* The edit function provides numeric report editing, including       */
/* leading zero suppression, check protection, floating $, leading    */
/* or trailing minus sign, insertion of commas, decimal points and    */
/* other non-numeric fields. The first parameter is the address of    */
/* the edited output, whose size will be the same as the pattern.     */
/* The second parameter is the editing pattern, which must be a true  */
/* null-terminated string containing the edit pattern. The third      */
/* is the number to be edited, a null-terminated string containing    */
/* only digits 0-9 except the first position, which is a -, if the    */
/* number is negative. The pattern may be up to 64 characters, and    */
/* the number to be edited may contain up to 32 characters. The       */
/* number may not contain more significant digits than there are      */
/* digit select characters in the pattern. If there are more digits   */
/* selected by the pattern than there are in the number, leading      */
/* zeros will be assumed. In the pattern, the first character may     */
/* be:      $ (floating dollar sign)                                  */
/*          * (check protection)                                      */
/*          - (floating minus sign)                                   */
/* The body of the edit pattern will be composed of digit select      */
/* characters (z and 9) and other characters, handled as follows:     */
/*          z (zero suppression output is a blank in this position    */
/*             until significance is set by receipt of a significant  */
/*             digit or a 9 in the pattern. After significance is     */
/*             set, output is a digit from the number.)               */
/*          9 (output is a digit from the number and significance     */
/*             is set, even if the digit is a leading zero.)          */
/*        other characters in the pattern will be output as-is after  */
/*             significance is set, but will be output as blanks      */
/*             before significance is set.                            */
/* Characters in the pattern following the last digit select will     */
/* be output as-is if the number is negative, otherwise output will   */
/* be blanks for these pattern positions.                             */
/*                                                                    */
/* When * check protection is selected, output will be *, rather      */
/* than blanks as mentioned above.                                    */
/*                                                                    */
/* An integer is returned to indicate success or errors:              */
/*                 0 = successful edit                                */
/*                 1 = pattern too long (over 64 characters)          */
/*                 2 = too many digits selected (over 32)             */
/*                 3 = no output digits selected in pattern           */
/*                 4 = number contains non-numeric data               */
/*                 5 = number has more digits than the pattern        */
/*                                                                    */
/* Examples:                            nbr=             outf=        */
/*    err=edit(outf,"zz,zz9.99-",nbr);  0                     0.00    */
/*                                      123                   1.23    */
/*                                      562983            5,629.83    */
/*                                      -4675                46.75-   */
/*    err=edit(outf,"$,$$$.$$",nbr);    0                             */
/*                                      123                  $1.23    */
/*                                      562983           $5,629.83    */
/*                                      -4675               $46.75    */
/*    err=edit(outf,"***.**",nbr);      0                             */
/*                                      123                 **1.23    */
/*                                      562983   err = 5              */
/*                                      -4675               *46.75    */
/*    err=edit(outf,"--,--9.99",nbr);   0                     0.00    */
/*                                      123                   1.23    */
/*                                      562983            5,629.83    */
/*                                      -46.75              -46.75    */
/*                                                                    */
/* Author R Thornton April 1989                                       */
/**********************************************************************/
/**/
int edit(char output[], char pattern[], char number[]) {
  char float_val = ' ';
  char fill_val = ' ';
  char sign_val = ' ';
  int signif = 0;
  int psize = 0;
  int pdig = 0;
  int plast = 0;
  int ndig = 0;
  char nbr[33];
  char ch= ' ';
  int po=0;
  int n=0;

/****************************************************************/
/* examine pattern: set up float and fill, count size and digits*/
/****************************************************************/
  if(((ch=pattern[0]) == '$') || (ch == '*') || (ch == '-'))
    float_val = ch;
  if(ch == '*')
    fill_val = '*';
  while((ch=pattern[po]) != '\0') {
    if((ch == 'z') || (ch == '9')) {
      pdig++;
      plast = po;
    }
    psize++;
    po++;
  }
  if(psize > 63)
    return(1);
  if(pdig > 32)
    return(2);
  if(!pdig)
    return(3);
/****************************************************************/
/* examine number: set up sign, count digits, check numeric.    */
/* set error if more digits than pattern, move right justified  */
/****************************************************************/
  if(number[0] == '-') {
    sign_val = '-';
    n = 1;
  }
  while((ch=number[n]) != '\0') {
    if((ch < '0') || (ch > '9'))
      return(4);
    ndig++;
    n++;
  }
  if(ndig > pdig)
    return(5);
  for(po=0;po<(pdig-ndig);po++)
    nbr[po] = '0';
  if(sign_val == ' ')
    n = 0;
  else
    n=1;
  for(;po<pdig;po++,n++)
    nbr[po] = number[n];
/****************************************************************/
/* scan across the pattern, setting the corresponding output    */
/* byte from pattern, fill, or amt depending on the pattern     */
/* character and state of significance.                         */
/****************************************************************/
  if(float_val != ' ') {
    output[0] = ' ';
    po = 1;
  }
  else
    po = 0;
  n = 0;
  while((po <= plast)) {
    ch = pattern[po];
    if(ch == 'z') {
      if(signif) {
        output[po] = nbr[n];
        n++;
      }
      else {
        if(nbr[n] == '0') {
          output[po] = fill_val;
          n++;
        }
        else {
          output[po] = nbr[n];
          signif = -1;
          n++;
          if(float_val == ' ')
            ;
          else
            if((float_val == '$') || (sign_val == '-'))
              output[po-1] = float_val;
        }
      }
    }
    else if(ch == '9') {
      output[po] = nbr[n];
      if(!signif) {
        signif = -1;
        if(float_val == ' ')
          ;
        else
          if((float_val == '$') || (sign_val == '-'))
            output[po-1] = float_val;
      }
      n++;
    }
    else {
      if(signif)
        output[po] = pattern[po];
      else
        output[po] = fill_val;
    }
    po++;
  }
  while((ch=pattern[po]) != '\0') {
    if(sign_val == ' ')
      output[po++] = fill_val;
    else
      output[po++] = pattern[po];
  }
  return(0);
}
/**********************************************************************/
/* termination: close files                                           */
/**********************************************************************/
void terminate() {
  sprintf(number,"%ld",incount);        /* convert input count to ascii */
  edit(prtline, "zz,zzz,zz9", number);    /* edit number to prtline */
  strcpy(prtline+10," input records read"); /* message to prt */
  printline();                              /* print count */
  sprintf(number,"%ld",outcount);       /* convert input count to ascii */
  edit(prtline, "zz,zzz,zz9", number);    /* edit number to prtline */
  strcpy(prtline+10," output records written"); /* message to prt */
  printline();                              /* print count */
  fclose(infile);                           /* close files */
  fclose(outfile);
  fclose(prtfile);
}
