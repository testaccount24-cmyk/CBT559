/************/
/* dropcr.c */
/******************************************************************/
/* Reads a standard ascii file whose records end in carriage-     */
/* return + line-feed and writes an identical file except that the*/
/* carriage-returns are dropped. Also the ending control-Z        */
/* (hex 1A) is also dropped.                                      */
/* Author R Thornton September 1994                               */
/******************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void initialize(int argc, char *argv[]); /* initialization func  */
void mainline(void);                    /* mainline function      */
void terminate(void);                   /* termination function   */
void readrec(void);                     /* read input file record */
void writerec(void);                    /* write output record    */

FILE *infile, *outfile;                 /* file pointers          */

char innam[81];                         /* input file name        */
char outnam[81];                        /* output file name       */

char inrecord[256];                     /* input file record area */

int i;                                  /* general purpose int    */
int morerecs = -1;                      /* input eof switch       */
long incount = 0;                       /* input record counter   */
long outcount = 0;                      /* output record counter  */

/******************************************************************/
/* executive routine: overall program control                     */
/******************************************************************/
void main(int argc, char *argv[]) {
   initialize(argc, argv);              /* open files             */
   while(morerecs)                      /* perform mainline until */
      mainline();                       /* no more records        */
   terminate();                         /* close files            */
   exit(0);                             /* quit                   */
}
/******************************************************************/
/* mainline function: process input file until no more records.   */
/******************************************************************/
void mainline(void) {
   writerec();                          /* write an output record */
   readrec();                           /* read next input record */
}
/******************************************************************/
/* initialization: open files, read first input record.           */
/******************************************************************/
void initialize(int argc, char *argv[]) {
  if(argc == 3) {                       /* if two filenames given:*/
    strcpy(innam,argv[1]);              /* 1st is input filename  */
    strcpy(outnam,argv[2]);             /* 2nd is output filename */
  }
  else {                                /* if neither 2 nor 3     */
    printf("\nEnter input file spec: "); /* ask for input filename*/
    gets(innam);                        /* and read it in         */
    printf("\nEnter output file spec: "); /* ask for output filenm*/
    gets(outnam);                       /* and read it in         */
    }
  if((infile=fopen(innam,"rb")) == NULL) { /* open input          */
    printf("Can't open file %s.",innam); /* open failed message   */
    exit(8);                            /* terminate              */
  }
  if((outfile=fopen(outnam,"wb")) == NULL) { /* open output       */
    printf("Can't open file %s.",outnam);
    exit(8);
  }
  readrec();                            /* read first input recd  */
}
/******************************************************************/
/* read next input file record. at eof, set morerecs switch.      */
/******************************************************************/
void readrec() {
  if(fgets(inrecord,255,infile) == NULL) /* read input until eof  */
    morerecs = 0;                       /* set switch at eof      */
}
/******************************************************************/
/* write a record to the output file                              */
/******************************************************************/
void writerec() {
  if(inrecord[0] == '\x1A')             /* if this is an eof recd */
    ;                                   /*   just drop it         */
  else {
    i = strlen(inrecord);               /* get input record length*/
    if((strcmp(&inrecord[i-2],"\r\n"))== 0) { /* ends with \r\n? */
      inrecord[i-2] = '\n';             /* yes, delete            */
      inrecord[i-1] = '\0';             /*   the \r               */
    }
    fputs(inrecord,outfile);            /* write output record    */
  }
}
/******************************************************************/
/* termination: close files                                       */
/******************************************************************/
void terminate() {
  fclose(infile);                       /* close input file       */
  fclose(outfile);                      /* close output file      */
}
