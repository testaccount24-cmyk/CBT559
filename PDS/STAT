/*
    */
/* PROGRAM-ID:  MEDSCREEN STATISTICAL REPORT
    */
/* AUTHOR:  JEFF KEELING
    */
/* DATE-WRITTEN: APRIL 1989
    */
/* REMARKS:  This program reports summary results of Expert System processing.
It  */
/*           shows the number of claims reviewed by MedScreen and how many of th
ose */
/*           were approved or denied or which remained unresolved.  The report i
s   */
/*           sorted by pend code and totals are reported in numbers and percenta
ges.*/
/*           The user will enter boundary period dates.  The program will only
    */
/*           process records from the master summary file that are between these
    */
/*           dates.
    */
/*              The program calls two exterior functions, 1) sort_summfile() and
    */
/*           2) edit.  Sort_summfile() is called to sort the input summary file
by  */
/*           pend code.  Edit() is called to format particular print lines for t
he  */
/*           report.  The program will be run on the PC.
    */
/*
    */

#include <stdio.h>
         /* library include files */
#include <stdlib.h>
#include <memory.h>
#include <string.h>
#include <time.h>

static char summfile_name[] = "c:\\c\\data\\sort_sum.dat";
         /* exterior file associations */

FILE *summfile_ptr, *outfile_ptr=NULL;
         /* pointers to files */


   struct summ_structure
         /* stucture for output summary file */
   {
      char log_year[2];
      char log_month[2];
      char log_day[2];
      char pend_code[2];
      char pend_text[25];
      char approve_totals[7];
      char deny_totals[7];
      char pend_totals[7];
      char carriage_return[1];
      char new_line_ch[1];
   } prev_summfile, summfile;

   struct print_summfile
         /* structure for output line of report */
   {
      char pend_code[2];
      char filler1[5];
      char pend_text[25];
      char filler2[6];
      char quantity_reviewed[7];
      char filler3[6];
      char quantity_approved[7];
      char filler4[6];
      char quantity_denied[7];
      char filler5[7];
      char quantity_unresolved[7];
   } print_summfile;

   struct start_date_structure
          /* date compare structures */
   {
      char start_year[2];
      char start_month[2];
      char start_day[2];
   } start_date;

   struct stop_date_structure
   {
      char stop_year[2];
      char stop_month[2];
      char stop_day[2];
   } stop_date;

   struct summ_date_structure
         /* structure for summary file date */
   {
      char summ_year[2];
      char summ_month[2];
      char summ_day[2];
   } summ_date;

   struct date_structure
         /* structure for user input date */
   {
      char month[2];
      char filler1;
      char day[2];
      char filler2;
      char year[2];
      char newline;
   }  date = {"  ",'/',"  ",'/',"  "};

   char header_line[133];
         /* output print lines */
   char print_line[133];
   char total_line[133];

   char workstring[32];
         /* working buffers */
   char run_date[9];
   char datebuffer[9];
   char future_date;
   char quantity_buffer[8];

   int pagectr = 1;
         /* counters */
   int linectr = 90;

   long total_claims = 0;
         /* accumulators */
   long quantity_reviewed = 0;
   long quantity_approved = 0;
   long quantity_denied = 0;
   long quantity_unresolved = 0;

   long total_quantity_reviewed = 0;
   long total_quantity_approved = 0;
   long total_quantity_denied = 0;
   long total_quantity_unresolved = 0;

   static int compare_ok = 0;
         /* numeric constants */
   static int zero = 0;
   static int line_size = 134;
   static int no_records = 0;
   static stat_lines_per_page = 48;

   char end_string = '\0';
         /* character constants */
   char forward_slash = '/';
   char carriage_return = '\r';
   char new_line_ch = '\n';

FILE * sort_summfile(void);
         /* prototype of sort_file() */
void start_program();
         /* prototype of start_program() */
void process();
         /* prototype of process() */
void end_program();
         /* prototype of end_program() */
int edit(char output[], char pattern[], char number[]);
         /* prototype of edit() */





main()
/* This function is the controlling function of the         */
/* program.  After, the print lines are initialized, the    */
/* call is made to sort_summfile() in order to sort the     */
/* summary file.  Then functions begin_program(), process(),*/
/* and end_program(), are then called.                      */
{
int i;
     for (i=zero; i<line_size; i++)
         /* initialize print lines */
 {
 print_line[i] = ' ';
 total_line[i] = ' ';
 header_line[i] = ' ';
 }

     summfile_ptr = sort_summfile();
         /* call sort program */

     start_program();
     process();
     end_program();
     exit(zero);

}
/*  End of main() */





void enter_date();

void start_program()
/* This function is called by main() and is used to open   */
/* the summary file and read the first record.  It sets the*/
/* previous summfile to the first summfile record if the   */
/* date is between the start and stop date entered by the  */
/* user.                                                   */
{
   if ( (summfile_ptr = fopen(summfile_name,"rb")) == NULL)
      {
      printf("\nThe sorted summary file cannot be opened.");
      printf("\nThe program is exiting.");
      printf("\nPress any key to continue.");
      getch();
      exit(zero);
      }
   if ( (outfile_ptr = fopen("prn","w")) == NULL)
      {
      printf("\nThe printer file cannot be opened.");
      printf("\nThe program is exiting.");
      printf("\nPress any key to continue.");
      getch();
      exit(zero);
      }
    if (fread(&summfile,sizeof(summfile),1,summfile_ptr) == no_records)
         /* read first summary file record */
      {
       printf("\nThere are no records in the summary file.");
       printf("\nThe program is exiting.");
       printf("\nPress any key to continue.");
       getch();
       exit(zero);
      }

   memcpy(summ_date.summ_year,summfile.log_year,2);
         /* set date to date of first record in */
   memcpy(summ_date.summ_month,summfile.log_month,2);
         /* summary file */
   memcpy(summ_date.summ_day,summfile.log_day,2);

   prev_summfile.pend_code[0] = 'Z';
         /* initialize previous summary file pend code */
   prev_summfile.pend_code[1] = 'Z';
            /* set previous summary file record to */
            /* first summary file record if the record */
   if ( (memicmp(&summ_date,&start_date,6) >= zero) && (memicmp(&summ_date,&stop
_date,6) <= zero) )  /* is within the date limits */
      prev_summfile = summfile;

   do
         /* allow user to enter boundary date fields */
      {
      printf("\nOnly records between the start and stop dates");
      printf("\nwill be processed.");
      printf("\nYou will need to enter the start date first.");
      enter_date();
      memcpy(start_date.start_year,date.year,2);
      memcpy(start_date.start_month,date.month,2);
      memcpy(start_date.start_day,date.day,2);

      printf("\nYou will need to enter the stop date next.");
      enter_date();
      memcpy(stop_date.stop_year,date.year,2);
      memcpy(stop_date.stop_month,date.month,2);
      memcpy(stop_date.stop_day,date.day,2);

      if (memcmp(&start_date,&stop_date,6) > zero)
  {
  printf("\n\nThe stop date is not after the start date.");
  printf("\nYou must reenter both dates.");
  }

      } while (memcmp(&start_date,&stop_date,6) > zero);

}
/* end start_program() */





void header(int pagectr);
         /* prototype of header() */
void print_record();
         /* prototype of print_record() */

void process()
/* This function is called by main() and is used to  */
/* process all records from the summary file. The    */
/* function header() will be called for a new page.  */
/* The function print_record()is called in order to  */
/* print the record.  If a record is not within the  */
/* date limits, it will not be processed.            */
{

int eof_indicator = 1;
int i;
     summfile.carriage_return[0] = carriage_return;
         /* set end of record characters */
     summfile.new_line_ch[0] = new_line_ch;

     do
     {
 if (  (memicmp(&summ_date,&start_date,6) >= zero) && (memicmp(&summ_date,&stop_
date,6) <= zero)  )
    {
       if (  (memicmp(summfile.pend_code,prev_summfile.pend_code,2) != compare_o
k )    /* if record is between start and */
       && (strcmp(prev_summfile.pend_code,"ZZ") != zero)  )
       /* stop dates and different from  */
    print_record();
/* previous record then print record */

       memcpy(quantity_buffer,summfile.approve_totals,7);
  /* summ totals for identical pend codes */
       quantity_reviewed += atol(quantity_buffer);
       memcpy(quantity_buffer,summfile.deny_totals,7);
       quantity_reviewed += atol(quantity_buffer);
       memcpy(quantity_buffer,summfile.pend_totals,7);
       quantity_reviewed += atol(quantity_buffer);

       memcpy(quantity_buffer,summfile.approve_totals,7);
       quantity_approved += atol(quantity_buffer);
       memcpy(quantity_buffer,summfile.deny_totals,7);
       quantity_denied += atol(quantity_buffer);
       memcpy(quantity_buffer,summfile.pend_totals,7);
       quantity_unresolved += atol(quantity_buffer);

       prev_summfile = summfile;
  /* set previous summary file record to */
            /* current summary record */
    }
    eof_indicator = fread(&summfile,sizeof(summfile),1,summfile_ptr);
  /* read next summary file record */

    memcpy(summ_date.summ_year,summfile.log_year,2);
  /* set date to date of current summary record */
    memcpy(summ_date.summ_month,summfile.log_month,2);
    memcpy(summ_date.summ_day,summfile.log_day,2);
     } while (eof_indicator == 1);
         /* check for end of file */

     if (quantity_reviewed != zero)
 print_record();
  /* print last record in memory */
}
/* end of process() */





void print_record()
/* This function is called by process() to print a record */
/* on the report.                                         */
{

   if (linectr > stat_lines_per_page)
                          /* page break logic */
      {
      header(pagectr++);
      linectr = zero;
      }
      memcpy(print_summfile.pend_code,prev_summfile.pend_code,2);
         /* print record */
      memcpy(print_summfile.filler1,"     ",5);
      memcpy(print_summfile.pend_text,prev_summfile.pend_text,25);
      memcpy(print_summfile.filler2,"      ",6);
      edit(print_summfile.quantity_reviewed,"zzz,zz9",ltoa(quantity_reviewed,wor
kstring,10));
      memcpy(print_summfile.filler3,"      ",6);
      edit(print_summfile.quantity_approved,"zzz,zz9",ltoa(quantity_approved,wor
kstring,10));
      memcpy(print_summfile.filler4,"      ",6);
      edit(print_summfile.quantity_denied,"zzz,zz9",ltoa(quantity_denied,workstr
ing,10));
      memcpy(print_summfile.filler5,"       ",7);
      edit(print_summfile.quantity_unresolved,"zzz,zz9",ltoa(quantity_unresolved
,workstring,10));
      fwrite(&print_summfile,sizeof(print_summfile),1,outfile_ptr);
      fprintf(outfile_ptr,"\n");
         /* advance printer line */

      linectr++;

      total_quantity_reviewed += quantity_reviewed;
         /* increment total accumulators */
      total_quantity_approved += quantity_approved;
      total_quantity_denied += quantity_denied;
      total_quantity_unresolved += quantity_unresolved;

      quantity_reviewed = zero;
         /* reset counters */
      quantity_approved = zero;
      quantity_denied = zero;
      quantity_unresolved = zero;

      prev_summfile = summfile;
         /* set previous summary file record  to */
}
         /* new record value */
/* end of print_record() */





void header(pagectr)
/* This function is called by both process() and print   */
/* record() in order to print the header on each new     */
/* page of the report.                                   */
{
   fprintf(outfile_ptr,"\f");
   memcpy(header_line," PROCESS DATE:   /  /
          PAGE:     ",87);
   memcpy(header_line+15,stop_date.stop_month,2);
   memcpy(header_line+18,stop_date.stop_day,2);
   memcpy(header_line+21,stop_date.stop_year,2);
   memcpy(header_line+74,itoa(pagectr,workstring,10),3);
   fputs(header_line,outfile_ptr);
   fprintf(outfile_ptr,"\n");
   _strdate(run_date);
   sprintf(header_line,"     RUN DATE: %8s\n",run_date,outfile_ptr);
   fputs(header_line,outfile_ptr);
   fputs("                        BLUE CROSS AND BLUE SHIELD OF VIRGINIA\n",outf
ile_ptr);
   fputs("                          MEDSCREEN MONTHLY STATISTICAL REPORT\n",outf
ile_ptr);
   memcpy(header_line,"                            FOR PERIOD   /  /   TO   /  /
  ",61);
   memcpy(header_line+39,start_date.start_month,2);
   memcpy(header_line+42,start_date.start_day,2);
   memcpy(header_line+45,start_date.start_year,2);
   memcpy(header_line+51,stop_date.stop_month,2);
   memcpy(header_line+54,stop_date.stop_day,2);
   memcpy(header_line+57,stop_date.stop_year,2);
   memcpy(header_line+61,"                                       ",40);
   fputs(header_line,outfile_ptr);
   fprintf(outfile_ptr,"\n");
   fputs(" \n",outfile_ptr);
   fputs(" \n",outfile_ptr);
   {
      fputs("PEND                                 QUANTITY     QUANTITY     QUAN
TITY     QUANTITY\n",outfile_ptr);
      fputs("CODE          PEND REASON            REVIEWED     APPROVED      DEN
IED     UNRESOLVED\n",outfile_ptr);
      fputs("----   --------------------------    --------     --------     ----
----    ----------\n",outfile_ptr);
      }
}
/* end of header() */





void end_program()
/* This function is called by main() to print the total */
/* line.                                                */
{
static int ten_thousand = 10000;

   if (total_quantity_reviewed == zero)
      {
       fputs("\nThere were no records in the summary file that were",outfile_ptr
);
       fputs("\nbetween the 'start' and 'stop' dates entered.",outfile_ptr);
       fprintf(outfile_ptr,"\f");
       }
   else
      {
      fputs("                                      =======      =======      ===
====       =======\n",outfile_ptr);
      memcpy(total_line,"DECISION GRAND TOTALS:",22);
      edit(total_line+36,"z,zzz,zz9",ltoa(total_quantity_reviewed,workstring,10)
);
      edit(total_line+49,"z,zzz,zz9",ltoa(total_quantity_approved,workstring,10)
);
      edit(total_line+62,"z,zzz,zz9",ltoa(total_quantity_denied,workstring,10));
      edit(total_line+76,"z,zzz,zz9\n",ltoa(total_quantity_unresolved,workstring
,10));
      memcpy(total_line+86,"                                                  ",
51);
      fputs(total_line,outfile_ptr);
      fprintf(outfile_ptr,"\n");
            /* write percentage line */
      memcpy(total_line,"IN PERCENTAGES:                             %
  %            %             %",86);
      edit(total_line+38,"zz9.z9",ltoa(((total_quantity_reviewed*ten_thousand)/t
otal_quantity_reviewed),workstring,10));
      edit(total_line+51,"zz9.z9",ltoa(((total_quantity_approved*ten_thousand)/t
otal_quantity_reviewed),workstring,10));
      edit(total_line+64,"zz9.z9",ltoa(((total_quantity_denied*ten_thousand)/tot
al_quantity_reviewed),workstring,10));
      edit(total_line+78,"zz9.z9",ltoa(((total_quantity_unresolved*ten_thousand)
/total_quantity_reviewed),workstring,10));
      memcpy(total_line+85,"                                                   "
,52);
      fputs(total_line,outfile_ptr);
         /* write total line */
      fprintf(outfile_ptr,"\f");
      }

      fclose(summfile_ptr);
         /* close all files */
      fclose(outfile_ptr);
}
/* end of end_program() */





void enter_date()
/* This function is called by start_program() to enter and */
/* verify the start and stop dates.                        */
{
   do
      {
      _strdate(datebuffer);
      printf("\nType the date in MM/DD/YY format and press [Enter]. ");
      gets(&date);

      if (memcmp(&date,&datebuffer,8) > zero)
  {
  printf("\n\nThe date entered is after today's date.");
  printf("\nType a 'Y' and press [Enter] if you still want this to be the date."
);
  printf("\nOtherwise, type an 'N' and press [Enter]. ");
  future_date = getche();
  }
      } while ( (future_date != 'Y') && (future_date != 'y') &&
  (memcmp(&date,&datebuffer,8) > zero) );


   if ( (date.filler1 != forward_slash) || (date.filler2 != forward_slash) )
         /* check for proper entry of forward */
      {
         /* slash characters */
      printf("\nThe date was entered incorrectly.");
      enter_date();
      }

   if ( (memcmp(date.month,"  ",2) == zero) || (memcmp(date.day,"  ",2) == zero)
         /* check for blanks or end string characters */
      || (memcmp(date.year,"  ",2) == zero) || (date.month[0] == end_string)
      || (date.month[11] == end_string) || (date.year[0] == end_string) || (date
.year[1] == end_string)
      || (date.day[0] == end_string) || (date.day[1] == end_string) )
      {
      printf("\nA date field(s) was left blank or entered incorrectly.");
      enter_date();
      }

   if ( memcmp(date.year,"89",2) < zero )
         /* year validation */
       {
       printf("\nThe year entered is too small.");
       enter_date();
       }
   else
      if (memcmp(date.year,"99",2) > zero)
  {
  printf("\nThe year entered is too large.");
  enter_date();
  }

   if (memcmp(date.month,"01",2) < zero)
         /* month validation */
      {
      printf("\nThe month entered is too small.");
      enter_date();
      }
   else
      if (memcmp(date.month,"12",2) > zero)
  {
  printf("\nThe month entered is too large.");
  enter_date();
  }

   if (memcmp(date.month,"02",2) == compare_ok)
         /* day validation for February */
      {
  if ( (memcmp(date.year,"92",2) == compare_ok)
  /* February validation on leap year */
     || (memcmp(date.year,"96",2) == compare_ok) )
     {
     if (memcmp(date.day,"01",2) < zero)
        {
        printf("\nThe day entered is too small.");
        enter_date();
        }
     else
        if (memcmp(date.day,"29",2) > zero)
    {
    printf("\nThe day entered is too large.");
    enter_date();
    }
     }
  else
     {
     if (memcmp(date.day,"01",2) < zero)
        {
        printf("\nThe day entered is too small.");
        enter_date();
        }
     else
        if (memcmp(date.day,"28",2) > zero)
    {
    printf("\nThe day entered is too large.");
    enter_date();
    }
     }
      }
      else
         /* day validation for April, June */
  if ( (memcmp(date.month,"04",2) == compare_ok)
  /* September, or November         */
       || (memcmp(date.month,"06",2) == compare_ok)
       || (memcmp(date.month,"09",2) == compare_ok)
       || (memcmp(date.month,"11",2) == compare_ok) )
     {
     if (memcmp(date.day,"01",2) < zero)
        {
        printf("\nThe day entered is too small.");
        enter_date();
        }
     else
        if (memcmp(date.day,"30",2) > zero)
    {
    printf("\nThe day entered is too large.");
    enter_date();
    }
     }
      else
         /* day validation for January, March,   */
  {
  if (memcmp(date.day,"01",2) < zero)
     {
     printf("\nThe day entered is too small.");
     enter_date();
     }
  else
     if (memcmp(date.day,"31",2) > zero)
        {
        printf("\nThe day entered is too large.");
        enter_date();
        }
  }
}
/* end enter_date() */


