/**************/
/* rdvsmseq.c */
/*********************************************************************/
/* Counts the records in a KSDS dataset and prints the total at      */
/* end of job.                                                       */
/*********************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define  REC_SIZE 1017
/*********************************************************************/
/* Function prototypes                                               */
/*********************************************************************/
static void print_amrc(void);
void main(void);
/*********************************************************************/
/* Global data areas                                                 */
/*********************************************************************/
struct {
  char data[1017];
} buffer;
FILE* vsamfile;
long RecordCount=0;
int rc=-1;
/*********************************************************************/
/* main() function definition.                                       */
/*********************************************************************/
void main(void) {
  vsamfile = fopen("dd:vsamfile","rb+,type=record");
  if (vsamfile == NULL) {
    print_amrc();
    printf("Error: fopen(\"dd:cluster\"...) failed\n");
    exit(8);
  }
  while(rc) {
    rc = fread(&buffer,1,REC_SIZE,vsamfile);
    if((rc < 0) || (rc > REC_SIZE) || ferror(vsamfile)) {
      printf("Error: reading vsam file\n");
      printf("rc from fread = %d",rc);
      exit(8);
    }
    if(rc > 0)
      RecordCount++;
  }
  printf("Total records in file = %ld",RecordCount);
  exit(0);
}
/*********************************************************************/
/* Routine to print file errors                                      */
/*********************************************************************/
static void print_amrc(void) {
    __amrc_type currErr = *__amrc; /* copy contents of __amrc     */
                                   /* structure so that values    */
                                   /* don't get jumbled by printf */
    printf("R15 value   = %d\n", currErr.__code.__feedback.__rc);
    printf("Reason code = %d\n", currErr.__code.__feedback.__fdbk);
    printf("RBA         = %d\n", currErr.__RBA);
    printf("Last op     = %d\n", currErr.__last_op);
    return;
}
