/**********/
/* abal.c */
/******************************************************************/
/* reads a C language source program and reformats it for the     */
/* following 79-byte record format:                               */
/*   col  1 - 9   (9)  blanks                                     */
/*   col 10 - 48  (39) instruction text                           */
/*   col 49       (1)  blank                                      */
/*   col 50 - 77  (28) comment                                    */
/*   col 78 - 79  (2)  carriage-return and line-feed              */
/* Instruction text may exceed the 39 bytes reserved for it, and  */
/* will be retained as-is, even if the resulting record exceeds 79*/
/* bytes. If the instruction text ends before column 72, an       */
/* attempt will be made to squeeze as much comment as possible    */
/* following the text, while maintaining a 79-byte record.        */
/* Comments will be stripped and squeezed into the space available*/
/* following the text, but not before column 50. Squeezing will   */
/* first be done by removing trailing blanks. If the result is too*/
/* long, the entire comment text will be stripped of leading      */
/* blanks and any multiple imbedded blanks. Finally, the excess   */
/* text will be trimmed from the right side. Whenever comment text*/
/* is shorter than the available space, blanks will be added so   */
/* that the comment string ends in column 77.                     */
/* Author R Thornton September 1994                               */
/******************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

void initialize(void);                  /* initialization func    */
void mainline(void);                    /* mainline function      */
void process(void);                     /* process function       */
void terminate(void);                   /* termination function   */
void readrec(void);                     /* read input file record */
void writerec(void);                    /* write output record    */
void strip_instruction(void);           /* strip instruction text */
void strip_comment(void);               /* strip comment from recd*/
void format_output_record(void);        /* format output record   */
void format_comment_block(void);        /* format comment blocks  */

FILE *infile, *outfile;                 /* file pointers          */

char innam[81];                         /* input file name        */
char outnam[81];                        /* output file name       */

char inrecord[256];                     /* input file record area */
char outrecord[256];                    /* output file record area*/

int i,in,ic,sc;                         /* subscripts             */
int morerecs = -1;                      /* input eof switch       */
long incount = 0;                       /* input record counter   */
long outcount = 0;                      /* output record counter  */
char c;                                 /* work character         */
char comment[256];                      /* hold area for comment  */
char instruction[256];                  /* hold area for instruct */
int reclen,instlen,cmtlen;              /* lengths                */
int quoted_string;                      /* quoted string indicator*/
int within_comment;                     /* within comment indic   */
int solid_text_found;                   /* solid text found       */

/******************************************************************/
/* executive routine: overall program control                     */
/******************************************************************/
void main(void) {
   initialize();                        /* open files             */
   while(morerecs)                      /* perform mainline until */
      mainline();                       /* no more records        */
   terminate();                         /* close files            */
   exit(0);                             /* quit                   */
}

/******************************************************************/
/* mainline function: process input file until no more records.   */
/******************************************************************/
void mainline(void) {
  strip_instruction();                  /* strip instruction text */
  strip_comment();                      /* strip comment from recd*/
  format_output_record();               /* format output record   */
  writerec();                           /* write an output record */
  readrec();                            /* read next input record */
}

/******************************************************************/
/* format the output record using the previously stripped comment */
/* and instruction text fields.                                   */
/******************************************************************/
void format_output_record(void) {
  if(within_comment) {
    format_comment_block();             /* format comment blocks  */
    goto for_exit;
  }
  for_exit:
    return;
}

/******************************************************************/
/* format_comment_block: performs formatting within comment blocks*/
/* to retain all text using word-wrap techniques. The indicator   */
/* within_comment is used to indicate that some piece of text is  */
/* being held for concatenation with the next statement.          */
/******************************************************************/
void format_comment_block(void) {
}

/******************************************************************/
/* strip_comment: extracts comment text from the input record and */
/* stores it in the instruction field.                            */
/******************************************************************/
void strip_comment(void) {
  cmtlen = 0;                           /* preset comment length  */
  comment[0] = '\0';                    /* null out comment       */
  for(; i<reclen; i++)                  /* find comment start     */
    if((inrecord[i] == '/') && (inrecord[i+1] == '*')) break;
  if(i >= reclen) goto sc_exit;         /* if no comment, exit    */
  sc = i;                               /* save comment start pos */
  for(ic=0; i<reclen; i++,ic++) {       /* copy comment text      */
    if((inrecord[i] == '*') && (inrecord[i+1] == '/')) break;
    comment[ic] = inrecord[i];          /* copy comment character */
  }
  if(inrecord[i] != '*') {              /* if no comment end found*/
    printf("\n%s",inrecord);            /*  display the input recd*/
    printf("\nAbove record missing ending */ on comment");
    printf("\npress any key to continue"); /* prompt for key entry*/
    c = getchar();                      /* await key pressed.     */
  }
  ic--;                                 /* back up to last byte   */
  while(ic && (comment[ic] == ' ')) /* back up to comment end */
    ic--;
  cmtlen = ic+1;                        /* set comment length     */
  comment[cmtlen] = '\0';               /* make it a valid string */
  sc_exit:
    return;
}

/******************************************************************/
/* strip_instruction: extracts instruction text from the input    */
/* record and stores it in the instruction field.                 */
/******************************************************************/
void strip_instruction(void) {          /* strip instruction text */
  instlen = 0;                          /* preset lengths         */
  comment[0] = '\0';                    /* preset null comment    */
  for(i=0;i<255;i++)
    instruction[i] = '\x02';
  instruction[0] = '\0';                /* preset null instruction*/
  solid_text_found = 0;                 /* preset indicator       */
  quoted_string = 0;                    /* preset indicator       */
  for(i=0,in=0; i<reclen; i++) {        /* copy instruction text  */
    c = inrecord[i];                    /* get current character  */
    instruction[in++] = c;              /* move char to instruct  */
    if(quoted_string) {                 /* if in a string:        */
      if(c == '\\') {                   /* ignore escape seq's    */
        instruction[in++] = inrecord[++i]; /* and following char */
        continue;                       /* and continue for loop  */
      }
      else
        if(c == '"') {                  /* if end of string       */
          quoted_string = 0;            /* reset indicator        */
          continue;                     /* and continue for loop  */
        }
    }
    else {                              /* if not in a string:    */
      if(c == '"') {                    /* starting a string?     */
        quoted_string = -1;             /* set indicator          */
        continue;                       /*  and continue the for  */
      }
      else {
        if((c == '/') && (inrecord[i+1]    == '*')) { /*comment start*/
          in--;                         /* step back to the slash */
          i--;                          /* step back to slash     */
          instruction[in] = ' ';        /* clear the slash        */
          break;                        /* break out of the for   */
        }
        else {
          if(c > ' ')                   /* solid character?       */
            solid_text_found = -1;      /* yes, indicate found    */
        }
      }
    }
  }
  while((in > 0) && (instruction[in] == ' '))
    in--;                               /* find end of instruction*/
  instlen = in;                         /* set instruction length */
  instruction[instlen] = '\0';          /* make it a valid string */
}

/******************************************************************/
/* initialization: open files, read first input record.           */
/******************************************************************/
void initialize(void) {
  if((infile=fopen("dd:input1","rb")) == NULL) { /* open input    */
    printf("Can't open the input1 file"); /* open failed message   */
    exit(1);                            /* terminate              */
  }
  if((outfile=fopen("dd:output1","wb")) == NULL) { /* open output */
    printf("Can't open the output1 file");
    exit(1);
  }
  readrec();                            /* read first input recd  */
}

/******************************************************************/
/* read next input file record. at eof, set morerecs switch.      */
/******************************************************************/
void readrec() {
  if(fgets(inrecord,255,infile) == NULL) /* read input until eof  */
    morerecs = 0;                       /* set switch at eof      */
  reclen = strlen(inrecord) - 2;        /* get input record length*/
}

/******************************************************************/
/* write a record to the output file                              */
/******************************************************************/
void writerec() {
  fputs(inrecord,outfile);            /* write output record    */
}

/******************************************************************/
/* termination: close files                                       */
/******************************************************************/
void terminate() {
  fclose(infile);                       /* close input file       */
  fclose(outfile);                      /* close output file      */
}
