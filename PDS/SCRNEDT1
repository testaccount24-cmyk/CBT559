/******************************************************************/
/* A screen editor Subsystem                                      */
/* From "Born to Code in C" by Herbert Schildt                    */
/******************************************************************/

#include <stdio.h>
#include <dos.h>
#include <string.h>
#include <bios.h>
#include <conio.h>

#define BUF_SIZE 32000
#define LINE_LEN 79
#define MAX_LINES 24
#define KILL_BUF_SIZE 4*LINE_LEN

char buf[BUF_SIZE];
char *curloc, *endloc;
int scrnx, scrny;
char killbuf[KILL_BUF_SIZE];
char *helpline =
  "F1: Save  F2: Load  F3: Find  F4: Replace\
   ^K: Kill line  ^Y: Yank  ^Z: Quit";

void edit(char *fname);
void help(void);
void gotoxy(int x, int y);
void clrline(int y);
void edit_clr_eol(int x, int y);
void clrscr(void);
void printline(char *p);
void delete_char(void);
void search(void);
void kill_line(void);
void upline(void);
void downline(void);
void left(void);
void right(void);
void scrolldn(int x, int y);
void scrollup(int topx, int topy, int endx, int endy);
void display_scrn(int x, int y, char *p);
void pagedown(void);
void pageup(void);
void replace(void);
void home(void);
void gotoend(void);
void yank(void);
int load(char *fname);
int save(char *fname);
void edit_gets(char *str);

main(int argc, char *argv[])
{
 if(argc == 2)
  edit(argv[1]);
 clrscr();
} /* end main */

/********************************************************/
/* This is the editor's entry function and main loop.   */
/* It is called with the name of the file to be edited. */
/********************************************************/
void edit(char *fname)
{
 union k
 {
  char ch[2];
  unsigned i;
 } key;
 char name[80];

 if(!load(fname))             /* Try to load the file */
  curloc = endloc = buf;
 strcpy(name, fname);
 clrscr();
 scrnx = scrny = 0;
 display_scrn(0, 0, curloc);  /* Display a screen full of text */
 help();                      /* Display help line             */
 gotoxy(0, 0);
 do                           /******* editor main loop *******/
 {
  key.i = bioskey(0);         /* Read 16-bit key code */
  if(!key.ch[0])              /* This is a command    */
  {
   switch(key.ch[1])
   {
    case 59:            /* F1: Save file        */
     save(name);
     break;
    case 60:            /* F2: Load file        */
     clrline(MAX_LINES);
     gotoxy(0, MAX_LINES);
     printf("\nEnter filename: ");
     edit_gets(name);
     if(*name)
     load(name);
     help();
     display_scrn(0, 0, curloc);
     scrnx = scrny = 0;
     break;
    case 61:            /* F3: Search           */
     search();
     break;
    case 62:            /* F4: Replace          */
     replace();
     break;
    case 71:            /* HOME                 */
     home();
     break;
    case 79:            /* END                  */
     gotoend();
     break;
    case 75:            /* LEFT                 */
     left();
     break;
    case 77:            /* RIGHT                */
     right();
     break;
    case 72:            /* UP                   */
     upline();
     break;
    case 80:            /* DOWN                 */
     downline();
     break;
    case 73:            /* PgUp                 */
     pageup();
     break;
    case 81:            /* PgDn                 */
     pagedown();
     break;
    case 83:            /* Del                  */
     if(curloc < endloc)
       delete_char();
     break;
   } /* end switch */
   if(curloc < buf)
   {
    scrnx = scrny = 0;
    curloc = buf;
   } /* end if */
   gotoxy(scrnx, scrny);   /* position cursor      */
  } /* end if */
 else                         /***** enter keystroke into file *****/
  {
   switch(key.ch[0])
   {
    case '\r':              /* Carriage return      */
     if(endloc == buf + BUF_SIZE - 2)
     break;
     memmove(curloc+1, curloc, endloc-curloc+1); /* move down 1 */
     *curloc = key.ch[0]; /* Put the CR in the file */
     curloc++;
     edit_clr_eol(scrnx, scrny); /* clear to eol */
     scrnx = 0;
     scrny++;
     if(scrny == MAX_LINES)      /* At bottom of page? */
     {
      scrny = MAX_LINES - 1;
      scrollup(0, 0, LINE_LEN, scrny);
     } /* end if */
     else
      scrolldn(scrnx, scrny);
     gotoxy(scrnx, scrny);
     printline(curloc);           /* Display the line */
     endloc++;                    /* Advance eof pointer */
     break;
    case '\b':              /* backspace */
     if(curloc == buf)
      break;
     left();
     delete_char();
     break;
    case 11:                /* ^K: Kill line */
     kill_line();
     break;
    case 25:                /* ^Y: Yank kill buffer */
     yank();
     break;
    default:                /* ordinary text character */
     if(endloc == buf + BUF_SIZE - 2)
     break;   /* If end of line */
     if(scrnx == LINE_LEN)
     break;          /* Can't type past end of line */
     memmove(curloc+1, curloc, endloc-curloc+1); /* move down 1 */
     *curloc = key.ch[0]; /* Put keystroke in file */
     putch(*curloc);      /* Display key on screen */
     scrnx++;             /* Advance X */
     gotoxy(scrnx, scrny);
     printline(curloc + 1);  /* Display the line */
     curloc++;            /* Advance the current location */
     endloc++;            /* Advance eof pointer */
   } /* end switch */
  gotoxy(scrnx, scrny);
    } /* end else */
 } /* end do */
 while(key.ch[0] != 26);              /* ^Z: Quit the editor */
} /* end edit */

/**********************************************************************/
/* printline() displays a line pointed to by p. This function stops   */
/* when it hits a carriage return or the end of the file.             */
/**********************************************************************/

void printline(register char *p)
{
 register int i;

 i = scrnx;
 while(*p != '\r' && *p && i < LINE_LEN)
 {
  putch(*p);
  p++;
  i++;
 } /* end while */
} /* end printline */

/**********************************************************************/
/* yank() inserts a previously killed line.                           */
/**********************************************************************/

void yank(void)
{
 char *p;

 p = killbuf;
 while(*p)
 {
  memmove(curloc+1, curloc, endloc - curloc + 1);
  *curloc = *p;              /* put keystroke in file */
  if(scrnx < LINE_LEN)
  {
   putch(*curloc);        /* display the key on the screen */
   scrnx++;
  } /* end if */
  curloc++;
  endloc++;
  p++;
 } /* end while */
 printline(curloc);
} /* end yank */

/*********************************************************************/
/* kill_line() deletes the line at the current location.             */
/*********************************************************************/

void kill_line(void)
{
 register int i;
 char *p, *killbufptr;

 if(*curloc == 'r')
 {
  delete_char();
  return;
 } /* end if */
 edit_clr_eol(scrnx, scrny);     /* clear to CR */
 p = curloc;
 i = 0;
 killbufptr = killbuf;
 while(*p != '\r' && p < endloc)
 {
  i++;
  *killbufptr = *p;           /* put in kill buffer */
  p++;
  if(killbufptr < killbuf + KILL_BUF_SIZE - 2)
   killbufptr ++;
 } /* end while */
 *killbufptr = '\0';
 memmove(curloc, curloc+1, endloc-curloc);
 endloc -= i;
} /* end kill_line */

/*******************************************************************/
/* replace() performs global search and replace.                   */
/*******************************************************************/

void replace(void)
{
 register int len1;
 char str1[80], str2[80];
 char *p, *p2;

 clrline(MAX_LINES);
 gotoxy(0, MAX_LINES);
 printf("\nEnter string to replace: ");
 edit_gets(str1);
 clrline(MAX_LINES);
 gotoxy(0,MAX_LINES);
 printf("\nEnter replacement: ");
 edit_gets(str2);
 p = curloc;
 len1 = strlen(str1);
 while(*str1)
 {
  while(*p && strncmp(str1, p, len1))
   p++;
  if(! *p)
   break;            /* not found */
  memmove(p, p+len1, endloc - p);    /* remove old string */
  endloc -= len1;
  p2 = str2;                         /* insert new string */
  while(*p2)
  {
   memmove(p+1, p, endloc - p + 1);
   *p = *p2;
   p++;
   endloc++;
   p2++;
  } /* end while */
 } /* end while */
 clrscr();
 p = curloc;                  /* find location of top of screen */
 for(len1 = scrny; len1 >= 0 && p > buf;)
 {
  p--;
  if(*p == '\r')
   len1--;
 } /* end for */
 if(*p == '\r')
  p++;
 display_scrn(0, 0, p);
 help();
} /* end replace */

/*********************************************************************/
/* delete_char() deletes the character at the current location       */
/*********************************************************************/

void delete_char(void)
{
 gotoxy(scrnx, scrny);
 if(*curloc == '\r')           /* CR, scroll display */
 {
  scrollup(0, scrny + 1, LINE_LEN, MAX_LINES - 1);
  memmove(curloc, curloc+1, endloc - curloc);
  endloc--;
  display_scrn(scrnx, scrny, curloc);
  help();
 } /* end if */
 else
 {
  memmove(curloc, curloc+1, endloc - curloc);
  endloc--;
  printline(curloc);
  printf(" ");
 } /* end else */
} /* end delete_char */

/*******************************************************************/
/* help() displays the help line.                                  */
/*******************************************************************/

void help(void)
{
 gotoxy(0, MAX_LINES);
 printf(helpline);
} /* end help */

/********************************************************************/
/* left() moves the current location left.                          */
/********************************************************************/

void left(void)
{
 if(curloc == buf)
  return;                /* can't go left */
 scrnx--;
 if(scrnx < 0)              /* at beginning of line */
 {
  scrnx = 0;
  upline();             /* go up to next line */
  while(*curloc != '\r')
  {
   curloc++;
   scrnx++;
  } /* end while */
 } /* end if */
 else
  curloc--;
} /* end left */

/**********************************************************************/
/* right() moves the current position right.                          */
/**********************************************************************/

void right(void)
{
 if(curloc + 1 > endloc)
  return;                 /* can't move right */
 scrnx++;
 if(scrnx > LINE_LEN || *curloc == '\r')  /* at end of line? */
 {
  scrnx = 0;
  scrny++;
  if(scrny == MAX_LINES)  /* at end of screen? */
  {
   scrny = MAX_LINES - 1;
   downline();     /* get next line */
   curloc--;       /* move cursor and current loc to start of new line */
   while(*curloc != '\r')
   curloc--;
   curloc++;
   scrnx = 0;
  } /* end if */
  else curloc++;
 } /* end if */
 else curloc++;
} /* end right */

/**********************************************************************/
/* search() finds a string.                                           */
/**********************************************************************/

void search(void)
{
 char str[80];
 register char *p;
 int len, i;

 clrline(MAX_LINES);    /* clear message line */
 gotoxy(0, MAX_LINES);
 printf("\nSearch string: ");
 edit_gets(str);
 if(! *str)
  return;
 p = curloc;
 len = strlen(str);
 while(*p && strncmp(str, p, len))  /* search for the string */
  p++;
 if(! *p)            /* not found */
  return;
 i = 0;      /* back up to start of line */
 while(p > buf && *p != '\r')
 {
  p--;
  i++;
 } /* end while */
 p++;
 i--;
 curloc = p + i;    /* reposition current loc to start of match */
 scrnx = i;
 scrny = 0;
 clrscr();    /* display screen of text at location of match */
 display_scrn(0, 0, p);
 help();
} /* end search */

/*********************************************************************/
/* upline() moves up one line. If possible, do not change scrnx.     */
/*********************************************************************/

void upline(void)
{
 register int i;
 char *p;

 if(curloc == buf)          /* at 1st byte in buffer? */
  return;
 p = curloc;
 if(*p == '\r')             /* if at end of line, back up */
  p--;
 for(; *p != '\r' && p > buf; p--);
 if(*p != '\r')            /* at first line, cannot go up */
  return;
 curloc = p;
 curloc--;                 /* skip past CR */
 i = scrnx;                /* save X coordinate */
 while(*curloc != '\r' && curloc >= buf)
  curloc--;
 scrny--;
 scrnx = 0;
 curloc++;
 if(scrny < 0)
 {
  scrolldn(0, 0);
  scrny = 0;
  gotoxy(0, 0);
  printline(curloc);
 } /* end if */
 while(i && *curloc != '\r') /* position t same scrnx as prev line, if poss */
 {
  curloc++;
  scrnx++;
  i--;
 } /* end while */
} /* end upline */

/*********************************************************************/
/* downline() moves down one line, trying to  keep scrnx at the same */
/* place, if possible.                                               */
/*********************************************************************/

void downline(void)
{
 register int i;
 char *p;
 i = scrnx;
 p = curloc;
 while(*p != '\r' && p < endloc)   /* advance current to next line */
  p++;
 if(p == endloc)                   /* can't go down */
  return;
 p++;                              /* skip past CR */
 curloc = p;
 scrny++;
 scrnx = 0;
 if(scrny == MAX_LINES)
 {
  scrny = MAX_LINES - 1;
  scrollup(0, 0, LINE_LEN, MAX_LINES - 1);
  gotoxy(scrnx, scrny);
  printline(curloc);
 } /* end if */
 curloc++;         /* advance to same position in next line */
 while(i && *curloc != '\r' && curloc < endloc)
 {
  curloc++;
  scrnx++;
  i--;
 } /* end while */
} /* end downline */

/*******************************************************************/
/* display_scrn() displays a screen full of text (up to 24 lines)  */
/* starting at the specified location.                             */
/*******************************************************************/

void display_scrn(int x, int y, char *p)
{
 register int i;

 gotoxy(x, y);
 i = 0;
 while(y < MAX_LINES && *p)
 {
  switch(*p)
  {
   case '\r':
    printf("\n");
    y++;
    i = 0;
    break;
   default:
    if(i < LINE_LEN)
     putch(*p);
    i++;
  } /* end switch */
  p++;
 } /* end while */
} /* end display_scrn */

/********************************************************************/
/* pagedown() will page down MAX_LINES lines.                       */
/********************************************************************/

void pagedown(void)
{
 register int i;
 clrscr();
 for(i = 0; i < MAX_LINES && curloc < endloc; )
 {
  if(*curloc == '\r')
   i++;
   curloc++;
 } /* end for */
 help();
 scrnx = 0;
 scrny = 0;
 display_scrn(0, 0, curloc);
} /* end pagedown */

/******************************************************************/
/* pageup() pages up MAX_LINES lines.                             */
/******************************************************************/

void pageup(void)
{
 register int i;

 clrscr();
 if(*curloc == '\r' && curloc > buf)  /* if currloc -> CR, move back 1 */
  curloc--;
 for(i = 0; i < MAX_LINES + 1 && curloc > buf; ) /* go back MAX_LINES */
 {
  if(*curloc == '\r')
   i++;
  curloc--;
 } /* end for */
 if(i == MAX_LINES + 1)   /* if not at top line step past the CR */
  curloc += 2;
 help();
 scrnx = 0;
 scrny = 0;
 display_scrn(0, 0, curloc);
} /* end pageup */

/********************************************************************/
/* home() goes to the top of the file.                              */
/********************************************************************/

void home(void)
{
 clrscr();
 curloc = buf;
 scrnx = scrny = 0;
 display_scrn(0, 0, curloc);
 help();
} /* end home */
/********************************************************************/
/* gotoend() goes to the end of the file.                           */
/********************************************************************/

void gotoend(void)
{
 clrscr();
 curloc = endloc;
 pageup();
} /* end gotoend */

/********************************************************************/
/* load() loads a file.                                             */
/********************************************************************/

int load(char *fname)
{
 FILE *fp;
 char ch, *p;

 if((fp = fopen(fname, "rb")) == NULL)
  return 0;
 p = buf;
 while(! feof(fp) && p != buf + BUF_SIZE - 2)
 {
  ch = getc(fp);
  if(ch != '\n' && ch != EOF)
  {
   *p = ch;
   p++;
  } /* end if */
 } /* end while */
 *p = '\0';
 fclose(fp);
 curloc = buf;
 endloc = p;
 return 1;
} /* end load */

/**********************************************************************/
/* save() saves a file.                                               */
/**********************************************************************/

int save(char *fname)
{
 FILE *fp;
 char *p, name[80];

 if (! *fname)
 {
  printf("\nFilename: ");
  gets(name);
 } /* end if */
 else
  strcpy(name, fname);
 if((fp = fopen(name, "wb")) == NULL)
  return 0;
 p = buf;
 while(p != endloc)
 {
  if(*p != '\r')
   putc(*p, fp);
  else
  {
   putc('\r', fp);
   putc('\n', fp);
  } /* end else */
   p++;
 } /* end while */
 fclose(fp);
 return 1;
} /* end save */

/**********************************************************************/
/* edit_gets() read a string from the keyboard, but do not scoll the  */
/* display when a RETURN is entered.                                  */
/**********************************************************************/

void edit_gets(char *str)
{
 char *p;

 p = str;
 for(;;)
 {
  *str = getch();
  if(*str == '\r')
  {
   *str = '\0';         /*NULL terminate after CR */
   return;
  } /* end if */
  if(*str == '\b')         /* backspace */
  {
   if(str > p)
   {
    str--;
    putch('\b');
    putch(' ');
    putch('\b');
   } /* end if */
  } /* end if */
  else
  {
   putch(*str);
   str++;
  } /* end else */
 } /* end for */
} /* end edit_gets */

/**********************************************************************/
/* cursor_pos() reads and saves the cursor coordinates.               */
/**********************************************************************/

void cursor_pos(void)
{
 union REGS i, o;

 i.h.bh = 0;
 i.h.ah = 3;
 int86(16, &i, &o);
} /* end cursor_pos */

/**********************************************************************/
/* gotoxy() sends cursor to specified x,y location (0,0 is upper left.*/
/**********************************************************************/

void gotoxy(int x, int y)
{
 union REGS i;

 i.h.dh = y;
 i.h.dl = x;
 i.h.ah = 2;
 i.h.bh = 0;
 int86(16, &i, &i);
} /* end gotoxy */

/**********************************************************************/
/* clrline() clears the entire line given its Y coordinate.           */
/**********************************************************************/
void clrline(int y)
{
 register int i;

 gotoxy(0,y);
 for(i = 0; i < LINE_LEN; i++)
  putch(' ');
} /* end clrline */
/**********************************************************************/
/* edit_clr_eol() clears to the end of the specified line. This       */
/* function is for the editor only because it clears a line up to a   */
/* carriage return.                                                   */
/**********************************************************************/

void edit_clr_eol(int x, int y)
{
 char *p;

 p = curloc;
 gotoxy(x, y);
 for(; x < LINE_LEN && *p != '\r' && *p; x++, p++)
 {
  printf(" ");
 } /* end for */
} /* end edit_clr_eol */

/**********************************************************************/
/* clrscr() clears the screen.                                        */
/**********************************************************************/

void clrscn(void)
{
 union REGS r;

 r.h.ah = 6;
 r.h.al = 0;
 r.h.ch = 0;
 r.h.cl = 0;
 r.h.dh = MAX_LINES;
 r.h.dl = LINE_LEN;
 r.h.bh = 7;
 int86(0x10, &r, &r);
} /* end clrscn */

/*********************************************************************/
/* scrolldn() scrolls down the screen. This function scrolls all but */
/* the bottom line.                                                  */
/*********************************************************************/

void scrolldn(int x, int y)
{
 union REGS r;

 r.h.ah = 7;
 r.h.al = 1;
 r.h.ch = y;
 r.h.cl = x;
 r.h.dh = MAX_LINES - 1;
 r.h.dl = LINE_LEN;
 r.h.bh = 7;
 int86(0x10, &r, &r);
} /* end scrolldn */

/*********************************************************************/
/* scrollup() scrolls up the screen using the specified coordinates  */
/*********************************************************************/

void scrollup(int topx, int topy, int endx, int endy)
{
 union REGS r;

 r.h.ah = 6;
 r.h.al = 1;
 r.h.ch = topy;
 r.h.cl = topx;
 r.h.dh = endy;
 r.h.dl = endx;
 r.h.bh = 7;
 int86(0x10, &r, &r);
} /* end scrollup */

