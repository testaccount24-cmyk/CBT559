/**************/
/* endckdup.c */
/*********************************************************************/
/* Purpose: Identify all duplicate element names for COBOL and ASSEM */
/*          element types in Endevor.                                */
/* Reads the element records file created by assembler program       */
/* ENDVDATA after sorting the files for BCBS01, PRODSUP, HCS, and    */
/* ITS together on element name and environment name.                */
/* Author R Thornton Dec 2000                                        */
/*********************************************************************/
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
/*********************************************************************/
/* Function Prototypes                                               */
/*********************************************************************/
int main(void);                /* Executive control routine */
void Initialization(void);     /* Initialization routine */
void Process(void);            /* Process control routine */
int  ReadElement(void);        /* Routine to read the ELEMENT file */
void WriteDup(void);           /* Routine to write the DUPS file */
void Terminate(void);          /* Termination routine */
/*********************************************************************/
/* Global data areas and file descriptions                           */
/*********************************************************************/
FILE *Element;               /* define the input file ptr */
FILE *Dups;                  /* define the output file ptr */

struct ElementRecord {       /* ELEMENT data record */
  char Element[8];           /* Element name */
  char Filler1;
  char Lang[11];             /* Language descriptor */
  char Filler2;
  char Environment[8];       /* Environment name */
  char Filler3;
  char System[8];            /* System name */
  char Filler4;
  char SSname[8];            /* SubSystem name */
  char Filler5;
  char Type[5];              /* Endevor type name */
  char Filler6;
  char PrcGrpName[8];        /* Endevor processor group name */
  char Filler7;
  char PrcName[8];           /* Endevor Processor name */
  char Filler8[9];
} LastRecord, CurrentRecord;

int ElementLeng = 80;          /* LRECL for ELEMENT file */

/*********************************************************************/
/* main(): this is the executive control routine                     */
/*********************************************************************/
int main(void) {               /* Executive control routine */
  Initialization();              /* initialize for processing */
  while(ElementLeng) {
    Process();                   /* process until end of file */
  }
  Terminate();                   /* terminate processing */
  exit(0);                       /* relinquish control */
}
/*********************************************************************/
/*                                                                   */
/*********************************************************************/
void Initialization(void) {    /* Initialization routine */

  Dups =(fopen("dd:DUPS","wb,type=record,recfm=FB,lrecl=80"));
  if(Dups == NULL) {
    printf("Unable to open the DUPS file\n");
    exit(8);
  }
  if(ferror(Dups)) {
    perror("Error trying to open the DUPS file");
    exit(8);
  }
  Element =(fopen("dd:ELEMENT","rb,type=record,recfm=FB,lrecl=80"));
  if(Element == NULL) {
    printf("Unable to open the ELEMENT file\n");
    exit(8);
  }
  if(ferror(Element)) {
    perror("Unable trying to open the ELEMENT file");
    exit(8);
  }
  ReadElement();              /* Read first ELEMENT record */
  memcpy(&LastRecord, &CurrentRecord, sizeof(LastRecord));
}
/*********************************************************************/
/* Process: read the element file and write out all records which    */
/* have duplicate element names.                                     */
/*********************************************************************/
void Process(void) {           /* Process control routine */
  ReadElement();                 /* read ELEMENT record */
  if(ElementLeng != 0) {         /* if more elements */
    if(memcmp(LastRecord.Element, CurrentRecord.Element, 8) == 0) {
      if(LastRecord.Lang[0] != '\xFF')  /* dup, last rec written? */
        WriteDup();              /* no, go write last record */
      memcpy(&LastRecord, &CurrentRecord, sizeof(LastRecord));
      WriteDup();                /* write current record
      LastRecord.Lang[0] = '\xFF'; /* show last written */
    }
    else
      memcpy(&LastRecord, &CurrentRecord, sizeof(LastRecord));
  }
}
/*********************************************************************/
/* Read next record from the ELEMENT file                            */
/*********************************************************************/
int  ReadElement(void) {       /* Routine to read the ELEMENT file */
  int rc;
  rc = fread(&CurrentRecord, 1, 80, Element); /* Read */
  if(ferror(Element)) {
    perror("Error reading ELEMENT file");
    exit(8);
  }
  if(feof(Element)) {             /* test for end of file */
    rc = 0;
  }
  ElementLeng = rc;                /* set EOF status indicator */
  return(rc);
}
/*********************************************************************/
/* Write last record to the DUPS file.                               */
/*********************************************************************/
void WriteDup(void) {          /* Routine to write the ELEMENT file */
  fwrite(&LastRecord, 1, ElementLeng, Dups); /* Write element */
  if(ferror(Dups)) {
    perror("Error writing to the DUPS file");
    exit(8);
  }
  return;
}
/*********************************************************************/
/* Termination routine: close files and prepare to relinquish control*/
/*********************************************************************/
void Terminate(void) {         /* Termination routine */
  fclose(Dups);                 /* Close DUPS file */
  fclose(Element);              /* Close ELEMENT file */
  return;
}
