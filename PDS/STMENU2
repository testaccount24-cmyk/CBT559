/*************/
/* stmenu2.c */
/*******************************************************************/
/* Program that creates printed report from IVR statistics file:   */
/*                            Event.arc                            */
/*  Output files:  printed report, Event.rpt.[date of .arc file]   */
/*                 (online copy of printed report),                */
/*                 Event.err.[date of .arc file]                   */
/*  11-4-93                                                        */
/* from skeleton.c generic program                                 */
/* Author R Thornton September 1993                                */
/* Revised by:  N Rowe     12-15-93                                */
/*******************************************************************/
#define _ALL_SOURCE
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include <ctype.h>
#define LINELEN 131
#define MAX_ENTRIES 47          /* number of entries in event table */
#define LIM 5                   /* loop limit for M-F dates array */

void initialize(int argc, char *argv[]); /* initialization function */
void mainline(void);                  /* mainline function */
void terminate(void);                 /* termination function */
void readrec(void);        /* read next input file record */
void procrec(void);               /* process input file record */
void exceptn(void);                   /* write record to error file */
void writerec(void);                  /* write record to output file */
void printline(void);                 /* print a line to report file */
int edit(char output[], char pattern[], char number[]); /* edit func */
void headings(void);                  /* print report heading */
void headout(void);                   /* headings to outfile.txt */
void back1day(void);                  /* back one date function */
void errdate(void);                   /* date error function    */

FILE *infile, *outfile, *prtfile,
   *errfile;     /* file handle pointers */
char innam[81];                       /* input file name */
char outnam[81];                      /* output file name */
char prtnam[81];                      /* print file name */
char errnam[81];                      /* error file name */

char dates[5][10];                    /* dates table for M - F */

struct {                              /* first heading line */
  char hdr_skip;                      /* form feed */
  char fill1[4];
  char hdr_date[10];                  /* report date */
  char ctr1[8];                       /* centering blanks */
  char title_line[38];                /* centered report title */
  char ctr2[8];                       /* centering blanks */
  char page_lit[5];                   /* page literal */
  char page_nbr[3];                   /* page number */
  char line_nl;
  char carr_rt;
  char page_null;                     /* terminating null */
} header1;

struct {                              /* second heading line */
  char hdr_skip;                      /* form feed */
  char ctr1[21];                      /* centering blanks */
  char titl2_line[39];                /* centered report title */
  char ctr2[16];                      /* centering blanks */
  char line_nl;
  char carr_rt;
  char page_null;                     /* terminating null */
} header2;

struct {                              /* third heading line */
  char hdr_skip;                      /* form feed */
  char ctr1[32];                      /* centering blanks */
  char hdr_for[4];        /* literal FOR      */
  char hdr_date[10];                  /* date of data reported */
  char ctr2[30];                      /* centering blanks */
  char line_nl;
  char carr_rt;
  char page_null;                     /* terminating null */
} header3;

struct {                              /* summary page header2 */
  char hdr_skip;                      /* form feed */
  char ctr1[22];                      /* centering blanks */
  char titl2_line[38];                /* centered report title */
  char ctr2[16];                      /* centering blanks */
  char line_nl;
  char carr_rt;
  char page_null;                     /* terminating null */
} header4;

struct {                              /* summary page header3 */
  char hdr_skip;                      /* form feed */
  char ctr1[26];                      /* centering blanks */
  char hdr_for[4];        /* literal FOR      */
  char hdr_date[23];                  /* date of data reported */
  char ctr2[23];                      /* centering blanks */
  char line_nl;
  char carr_rt;
  char page_null;                     /* terminating null */
} header5;

struct {                              /* error rpt header2 */
  char hdr_skip;                      /* form feed */
  char ctr1[22];                      /* centering blanks */
  char titl2_line[38];                /* centered report title */
  char ctr2[16];                      /* centering blanks */
  char line_nl;
  char carr_rt;
  char page_null;                     /* terminating null */
} errhead;

struct {                 /* footer line  */
  char fill1[4];
  char rpt_nm[12];        /* report name */
  char fill2[61];
  char line_nl;
  char carr_rt;
  char page_null;
} footer1;

union{
struct {            /* inrecord structure  */
  char sysno;                /* system number  */
  char comma1;                        /* comma          */
  char recdate[10];                   /* date of record yyyy.mm.dd */
  char blank;                         /* blank btw date and time   */
  char time[8];                       /* time in 00:00:00 format   */
  char comma2;                        /* comma           */
  char appname[8];                    /* appl name VA_INTRO        */
  char comma3;                        /* comma           */
  char eventdat[33];            /* combined event name and event cnt */
}infields;
char inrec[64];                       /* array of entire record     */
} inrecord;

union{
struct {                              /* print line structure */
  char new_line;                      /* new line character  */
  char fill1[4];
  char daytot[5];                     /* event total for day */
  char fill2[5];                      /* column spacing blanks */
  char text_nm[62];                   /* long description of event */
  char line_nl;                       /* new line char  */
  char carr_rt;
  char line_null;                     /* terminating null */
} detail;
char line[LINELEN+1];                 /* print line in array form */
}prt,out;

/* from genldat2.c, R Thornton  */
/*****************************************************************/
/* This function provides the caller with a table of information */
/* concerning a specified date. The caller places a date in one  */
/* of the Julian or Gregorian fields of the DATEGENL structure   */
/* and an indicator of the type date sent in the datyp field, and*/
/* invokes genldat2(), which fills in all the remaining fields in*/
/* the DATEGENL structure. A pointer to DATEGENL is passed to    */
/* this function by the caller.                                  */
/*****************************************************************/

struct
{
 enum
 {
  julian_yyyyddd_sent = 'j',
  gregorian_mmddyyyy_sent = 'g',
  gregorian_yyyymmdd_sent = 'y'
 } datyp;                          /* date supplied type */
 enum
 {
  successful_conversion = ' ',
  error_in_data_supplied = 'e'
 } daterr;                         /* result indicator */
 enum
 {
  Monday = '1',
  Tuesday = '2',
  Wednesday = '3',
  Thursday = '4',
  Friday = '5',
  Saturday = '6',
  Sunday = '7'
 } daywk;                          /* day of week indicator */
 enum
 {
  not_a_holiday = ' ',
  New_Years_Day = '1',
  Christmas_Eve = '2',
  Good_Friday = '3',
  Memorial_Day = '4',
  Independence_Day = '5',
  Labor_Day = '6',
  Thanksgiving_Day = '7',
  Friday_After_Thanksgiving = '8',
  Christmas_Day = '9'
 } holiday;                        /* holiday indicator */
 enum
 {
  not_leap_year = '0',
  leap_year = '1'
 } yeartyp;                        /* year type */
 char juldate[8];                         /* julian date yyyyddd */
 char gregmdy[9];                         /* gregorian date mmddyyyy */
 char gregymd[9];                         /* gregorian date yyyymmdd */
 char litdate[19];                  /* literal date, eg: May 9, 2002 */
 char julslash[9];                        /* julian date yy/ddd */
 char grgslash[11];                     /* gregorian date mm/dd/yyyy */
 char daylit[10];                 /* literal day of week, eg: Sunday */
 char monthlit[10];                       /* literal month, eg: July */
}DATEGENL, *p;


int i;                                /* general purpose int */
int j;
int k;
char *chptr;                          /* general purpose pointer */
char number[32];                      /* ascii numbers for edit() */
int morerecs = -1;                    /* input end-of-file switch */
long incount = 0;                     /* input record counter */
long outcount = 0;                    /* output record counter */
long errcount = 0;                    /* error record counter */
int linecnt = 0;                      /* print line counter */
int pagecnt = 0;                      /* print page counter */
int pagecnt2 = 0;                     /* page counter for outfile */
char eventnm[33];                     /* event name field save area */
int eventcnt;                         /* event count field save area */
struct tm *t;                         /* pointer to time structure */
time_t seconds;                       /* current timer value */
int dex;                          /* for loop counter to walk dates[]*/
int sch;                        /* for loop cntr to walk event_table */
char rptdate[10];

struct event_entry{              /* structure format for event_table */
   int daytot[5];                 /* integer array of counts M - F   */
   char event_nm[17];             /* event name in data file (abbrv) */
   char text_nm[75];              /* full event name for printing    */
};

/*  Following is the table of events + count for each event M - F */

struct event_entry event_table[MAX_ENTRIES] = {
 {{0,0,0,0,0},"hangups_at_intro",
     "Number of hangups during the Introduction"},
 {{0,0,0,0,0},"tot_subscr_calls",
     "Selections of 1 -subscriber- at Introduction"},
 {{0,0,0,0,0},"tot_prov_calls",
     "Selections of 2 -provider- at Introduction"},
 {{0,0,0,0,0},"rotary_calls",
     "No selection made at the Introduction, call routed to Default"},
 {{0,0,0,0,0},"subscr_id_routed",
     "Number of calls routed after input of subscriber ID"},
 {{0,0,0,0,0},"subscr_defaults",
     "Number of sub ID wrong entries going to Default Gate"},
 {{0,0,0,0,0},"subr_zeroout",
     "Selections of 1, then 0 to get to a rep"},
 {{0,0,0,0,0},"prv_zeroout",
     "Selections of 2 -Provider Inq Sys- then 0 for a rep"},
 {{0,0,0,0,0},"prv_ebc_select",
     "Eligibility, Benefits, and Claims selected at Step 14"},
 {{0,0,0,0,0},"prv_select_fep",
     "Number of times FEP Claims Status selected at Step 14"},
 {{0,0,0,0,0},"prv_fep_wrngchrg",
     "FEP Claims Status: calls routed to step 525 - invalid charge"},
 {{0,0,0,0,0},"prv_fep_2rep",
     "Number of times calls reach Step 33 from Step 525"},
 {{0,0,0,0,0},"prv_select_elig",
     "Eligibility selected at Step 31"},
 {{0,0,0,0,0},"prv_select_bene",
     "Benefits selected at Step 31"},
 {{0,0,0,0,0},"prv_select_claim",
     "Claims Status selected at Step 31"},
 {{0,0,0,0,0},"policy_medextnd",
     "1 -Medicare Extended- selected at Step 33"},
 {{0,0,0,0,0},"policy_phc_vas",
     "2 -PHC VS- selected at Step 33"},
 {{0,0,0,0,0},"policy_student",
     "3 -Student- selected at Step 33"},
 {{0,0,0,0,0},"policy_nasco",
     "4 -NASCO- selected at Step 33"},
 {{0,0,0,0,0},"policy_cp",
     "5 -C&P- selected at Step 33"},
 {{0,0,0,0,0},"policy_group",
     "6 -Group- selected at Step 33"},
 {{0,0,0,0,0},"policiy_fep",
     "7 -FEP- selected at Step 33"},
 {{0,0,0,0,0},"prv_elig_0_200",
     "Zeroout to a CSR is selected at Eligibility Step 200"},
 {{0,0,0,0,0},"prv_elig_0_202",
     "Zeroout to a CSR is selected at Eligibility Step 202"},
 {{0,0,0,0,0},"prv_elig_0_204",
     "Zeroout to a CSR is selected at Eligibility Step 204"},
 {{0,0,0,0,0},"prv_elig_0_208",
     "Zeroout to a CSR is selected at Eligibility Step 208"},
 {{0,0,0,0,0},"prv_elig_0_210",
     "Zeroout to a CSR is selected at Eligibility Step 210"},
 {{0,0,0,0,0},"prv_elig_0_213",
     "Zeroout to a CSR is selected at Eligibility Step 213"},
 {{0,0,0,0,0},"prv_bene_0_300a",
     "Zeroout to a CSR is selected at Benefits Step 300a"},
 {{0,0,0,0,0},"prv_bene_0_300b",
     "Zeroout to a CSR is selected at Benefits Step 300b"},
 {{0,0,0,0,0},"prv_bene_0_303",
     "Zeroout to a CSR is selected at Benefits Step 303"},
 {{0,0,0,0,0},"prv_bene_0_306",
     "Zeroout to a CSR is selected at Benefits Step 306"},
 {{0,0,0,0,0},"prv_bene_0_309",
     "Zeroout to a CSR is selected at Benefits Step 309"},
 {{0,0,0,0,0},"prv_bene_0_312",
     "Zeroout to a CSR is selected at Benefits Step 312"},
 {{0,0,0,0,0},"prv_bene_0_bc",
     "Zeroout to a CSR is selected at Company Benefits 1"},
 {{0,0,0,0,0},"prv_bene_0_bs",
     "Zeroout to a CSR is selected at Company Benefits 2"},
 {{0,0,0,0,0},"prv_bene_0_mm",
     "Zeroout to a CSR is selected at Company Benefits 3"},
 {{0,0,0,0,0},"prv_bene_0_de",
     "Zeroout to a CSR is selected at Company Benefits 4"},
 {{0,0,0,0,0},"prv_claim_0_407",
     "Zeroout to a CSR is selected at Claims Status Step 407"},
 {{0,0,0,0,0},"prv_claim_0_416",
     "Zeroout to a CSR is selected at Claims Status Step 416"},
 {{0,0,0,0,0},"prv_claim_0_417",
     "Zeroout to a CSR is selected at Claims Status Step 417"},
 {{0,0,0,0,0},"prv_claim_0_emp",
     "Number of calls routed to PIU for Claims Status for employee"},
 {{0,0,0,0,0},"fep_claim_0",
     "Zeroout to a CSR is selected at FEP Claims Intro"},
 {{0,0,0,0,0},"fep_claim_rep33",
     "Calls routed to Step 33 from the FEP Claims module"},
 {{0,0,0,0,0},"fep_prv_zeroout",
     "Zeroout to a CSR from FEP Claims after prv ID entered"},
 {{0,0,0,0,0},"fep_subr_default",
     "Number of times subscr ID is reentered in FEP Claims"},
 {{0,0,0,0,0},"fep_zeroout",
     "Zeroout to a CSR is selected after FEP Claims Intro"},

};

void genldat2(struct DATEGENL *p);       /* genldat2 prototype */

void main(int argc, char *argv[])
{
 initialize(argc, argv);       /* open files */
 while(morerecs)               /* perform mainline until */
  mainline();           /* no more records */
 terminate();                  /* close files */
 exit(0);                      /* quit */
}
/*********************************************************************/
/* mainline function: process input file until no more records.      */
/*********************************************************************/
void mainline(void)
{
 procrec();                    /* process record      */
 readrec();                    /* read next record    */
}
/*********************************************************************/
/* initialization: open files, read first input record.              */
/*********************************************************************/
void initialize(int argc, char *argv[])
{
  if(argc == 3) {
    strcpy(innam,argv[1]);
    strcpy(outnam,argv[2]);
  }
  else
    if(argc == 4) {
      strcpy(innam,argv[1]);
      strcpy(outnam,argv[2]);
      strcpy(prtnam,argv[3]);
    }
  else
    if(argc == 5) {
      strcpy(innam,argv[1]);
      strcpy(outnam,argv[2]);
      strcpy(prtnam,argv[3]);
      strcpy(errnam,argv[4]);
    }
    else {
      printf("\nEnter input file spec: ");
      gets(innam);
      printf("\nEnter output file spec: ");
      gets(outnam);
      printf("\nEnter output file spec (or prn): ");
      gets(prtnam);
      printf("\nEnter error file spec: ");
      gets(errnam);
    }
  if((infile=fopen(innam,"rb")) == NULL) {      /* open input */
    printf("Can't open file %s.",innam);
    exit(1);
  }
  if((outfile=fopen(outnam,"wb")) == NULL) {    /* open output */
    printf("Can't open file %s.",outnam);
    exit(1);
  }
  if((errfile=fopen(errnam,"wb")) == NULL) {    /* open error file */
    printf("\nCan't open the error file.");
    exit(1);
  }
  if((prtfile=fopen("prn","w")) == NULL) {    /* open print file */
    printf("\nCan't open the printer file.");
    exit(1);
  }

/*  set up headings       */

  chptr = (char *)&header1;           /* point to header1 line */
  for(i=0;i<sizeof(header1);i++)      /* clear header line */
    chptr[i] = ' ';
  header1.hdr_skip = ' ';             /* form feed to header line */
  memcpy(header1.title_line,"COMPANY IVR REPORT",
                             38);
  timezone = 5 * 60 * 60;             /* set local time for e.s.t */
  daylight = -1;                      /* indicate daylit sav time */
  time(&seconds);                     /* time in secs */
  t = localtime(&seconds);            /* local time to tm struct */
  if(t->tm_year > 50)                 /* convert year from 2 digits */
    t->tm_year += 1900;               /* to 4 digits             */
    else
      t->tm_year += 2000;
  sprintf(header1.hdr_date,"%02d/%02d/%4d",
 ((t->tm_mon)+1),t->tm_mday,t->tm_year);   /* date to header */
  k = strlen(header1.hdr_date);
  header1.hdr_date[k] = ' ';
  memcpy(header1.page_lit,"PAGE ",5); /* PAGE literal to header */
  header1.line_nl = '\n';
  header1.carr_rt = '\r';
  header1.page_null = '\0';           /* terminal null to header */

  chptr = (char *)&header2;           /* point to header2 line */
  for(i=0;i<sizeof(header2);i++)      /* clear header2 line */
    chptr[i] = ' ';
  memcpy(header2.titl2_line,"DAILY DIRECTTALK MENU SELECTIONS REPORT",
                             39);
  header2.line_nl = '\n';
  header2.carr_rt = '\r';
  header2.page_null = '\0';           /* terminal null to header */

  chptr = (char *)&header3;           /* point to header3 line */
  for(i=0;i<sizeof(header3);i++)      /* clear header3 line */
    chptr[i] = ' ';
  memcpy(header3.hdr_for,"FOR ",4);   /* literal FOR to header3 */
  header3.line_nl = '\n';
  header3.carr_rt = '\r';
  header3.page_null = '\0';           /* terminal null to header */

  chptr = (char *)&header4;           /* point to header4 line */
  for(i=0;i<sizeof(header4);i++)      /* clear header4 line */
    chptr[i] = ' ';
  memcpy(header4.titl2_line,"WEEKLY DIRECTTALK MENU SUMMARY REPORT",
                             38);
  header4.line_nl = '\n';
  header4.carr_rt = '\r';
  header4.page_null = '\0';           /* terminal null to header */

  chptr = (char *)&header5;           /* point to header5 line */
  for(i=0;i<sizeof(header5);i++)      /* clear header5 line */
    chptr[i] = ' ';
  memcpy(header5.hdr_for,"FOR ",4);   /* literal FOR to header5 */
  header5.line_nl = '\n';
  header5.carr_rt = '\r';
  header5.page_null = '\0';           /* terminal null to header */

  chptr = (char *)&errhead;           /* point to errhead line */
  for(i=0;i<sizeof(errhead);i++)      /* clear errhead line */
    chptr[i] = ' ';
  memcpy(errhead.titl2_line,"ERROR REPORT FOR EVENT.ARC (STMENU2.C)",
                             38);
  errhead.line_nl = '\n';
  errhead.carr_rt = '\r';
  errhead.page_null = '\0';           /* terminal null to errhead */

  fputs((char*)&errhead,errfile);    /* write errhead for error rpt */
  prt.detail.carr_rt = '\r';
  prt.detail.line_nl = '\n';
  prt.detail.line_null = '\0';
  for(i=0;i<sizeof(prt.detail)-3;i++)
 prt.line[i] = ' ';
  fputs(prt.line,errfile);           /* write blank line */

  chptr = (char *)&footer1;           /* point to footer1 line */
  for(i=0;i<sizeof(footer1);i++)      /* clear footer1 line */
    chptr[i] = ' ';
  memcpy(footer1.rpt_nm,"RPT: stmenu2",12);    /* literal to footer1 */
  footer1.line_nl = '\n';
  footer1.carr_rt = '\r';
  footer1.page_null = '\0';           /* terminal null to footer */

/* pass current date to genldat2, then back up to previous Friday  */

  sprintf(DATEGENL.gregmdy,"%02d%02d%4d",
  ((t->tm_mon)+1),t->tm_mday,t->tm_year);    /* date to DATEGENL */
  DATEGENL.datyp = 'g';               /* date type to DATEGENL */
  p = &DATEGENL;
  genldat2((struct DATEGENL *)p);  /* pointer to DATEGENL  */
  while(DATEGENL.daywk != '5')        /* while day of week is not */
    back1day();                       /* Friday back up one day   */
  for(dex=LIM-1;dex>=0;dex--)  {
 edit(dates[dex],"9999.99.99",DATEGENL.gregymd); /* reformat, */
 back1day();                   /* save M - F dates of report */
  }                                   /* week                       */
  readrec();                        /* read first input file record */
}
/*********************************************************************/
/*  back1day: back up one date function                              */
/*********************************************************************/
void back1day()  {
 long newdate = 0;             /* field to hold converted date */

 newdate = atol(DATEGENL.juldate);   /* convert date for arithmetic */
 newdate += -1;                /* subtract 1 day  */

 sprintf(DATEGENL.juldate,"%7ld",newdate);
 DATEGENL.datyp = 'j';         /* send new date back to   */
 p = &DATEGENL;                /* genldat2 and fill structure */
 genldat2(p);
 if(DATEGENL.daterr == 'e')  {     /* send year-crossing or leap  */
  errdate();                /* year date to errdate       */
  sprintf(DATEGENL.juldate,"%7d",newdate);
  DATEGENL.datyp = 'j';
  p = &DATEGENL;
  genldat2(p);
 }
}
/*********************************************************************/
/*  errdate:  date error function                                    */
/*********************************************************************/
void errdate()  {               /* handles backing up across a year */
 int yr;                       /* and accounts for leap year       */
 int dy;
 char jday[4];
 char jyear[5];
 int dex;

 sprintf(jyear,"%s",&DATEGENL.juldate[4]);
 for(dex=0;dex>3 && dex<8;dex++)
  sprintf(jday,"%s",&DATEGENL.juldate[dex]);
 yr = atoi(jyear);
 dy = atoi(jday);

 if(dy == 0) {
  dy = 366;
  yr += -1;
 }
 if(dy == 366)
  dy += -1;
 else
  printf("Date Error Function ABEND ... stmenu2.c aborted");
  exit(2);
}
/*********************************************************************/
/* procrec:  determine valid record, send to exceptn() or writerec() */
/*********************************************************************/
void procrec()  {
 int error = 0;
 int i;
 int sch;


 if(inrecord.infields.comma1 == ',');   /* tests for good file  */
 if(inrecord.infields.blank == ' ');    /* by looking for the   */
 if(inrecord.infields.comma2 == ',');   /* comma delimiters and */
 if(inrecord.infields.comma3 == ',');   /* blanks in the inrecord */
 else                                   /* structure             */
    error = 1;

 error = 2;                            /*  assume date not found  */
 for(dex=0;dex<LIM;dex++)  {
   if ((memcmp(inrecord.infields.recdate, dates[dex], 10)) == 0) {
     error = 0;                        /* compares the first 10   */
     break;                            /* chars of recdate to the  */
   }                                  /* dates[] for the week wanted */
 }
 if(error)
   exceptn();
 else  {
   i = strlen(eventnm);                 /* get length of eventnm */
   for(;i>0;i--)  {                     /* set up loop to drop   */
     if((eventnm[i] == 0) || (eventnm[i] == ' ')); /* blanks */
     else  {          /* at end of eventnm so   */
       eventnm[i+1] = 0;                /* it will match event_nm */
   break;                        /* in the event_table     */
     }
    }
   for(sch=0;sch<MAX_ENTRIES;sch++)
     if(strcmp(event_table[sch].event_nm,eventnm) == 0)
        break;                          /* compares eventnm in data */
   if(sch == MAX_ENTRIES)               /* to event_nm in table to  */
        error = 3;                      /* get a hit                */
   if(error)
        exceptn();
   else  {
  event_table[sch].daytot[dex] = eventcnt; /* puts eventcnt */
   }                                    /* in data into table array */
 }
}

/*********************************************************************/
/* exceptn:  write a record to the exception file                    */
/*********************************************************************/
void exceptn()  {
/*  linecnt = 0;
    if(linecnt == 0 || linecnt > 56)
 linecnt++;       */
    chptr = (char *)&inrecord;         /* point to the inrecord  */
    fputs(inrecord.inrec,errfile);     /* write inrecord to errfile */
    errcount++;
}
/*********************************************************************/
/* read next input file record. at end of file, set morerecs switch. */
/*********************************************************************/
void readrec() {
  if(fgets(inrecord.inrec,64,infile) == NULL) /* read input to eof */
    morerecs = 0;                       /* set switch at end of file */
  if(morerecs)
    incount++;                           /* add 1 to records read */
  strcpy(eventnm,inrecord.infields.eventdat); /* copy eventdat */
  chptr = strtok(eventnm,",");         /* parse the event in eventnm */
  chptr = strtok(0,"\n");              /* parse the count in eventnm */
  eventcnt = atoi(chptr);               /* convert count to integer  */
}
/*********************************************************************/
/* write a record to the output file                                 */
/*********************************************************************/
void writerec() {
  fputs(out.line,outfile);            /* write output record */
  outcount++;                         /* add 1 to records written */
}
/*********************************************************************/
/* write a line to the printer                                       */
/*********************************************************************/
void printline() {
  prt.detail.line_null = '\0';
  prt.detail.line_nl = '\n';
  prt.detail.carr_rt = '\r';
  fputs(prt.line,prtfile);            /* write print line */
  out = prt;
  fputs(out.line,outfile);
/*  headout();  */
  linecnt++;                          /* add 1 to line counter */
  if(linecnt >= MAX_ENTRIES)
  {
 for(i=0;i<sizeof(prt.detail)-3;i++)
   prt.line[i] = ' ';       /* clear prt line to blanks */
 for(j=0;j<10;j++)
    fputs(prt.line,prtfile);   /* write blank lines */
 fputs((char*)&footer1,prtfile);  /* write footer line */
  }
  else  {
    for(i=0;i<sizeof(prt.detail)-3;i++)
 prt.line[i] = ' ';
    for(i=0;i<sizeof(out.detail)-3;i++)
 out.line[i] = ' ';
  }
}
/*********************************************************************/
/* headings() - write a heading for printed report                   */
/*********************************************************************/
void headings() {
  linecnt = 0;                         /* clear line counter */
  pagecnt++;                           /* add 1 to page counter */
  sprintf(number,"%3d",pagecnt);       /* convert to printable nbr */
  memcpy(header1.page_nbr,number,3);
  edit(header1.page_nbr,"zz9",number);  /* page nbr to header line */
  fputs((char*)&header1,prtfile);      /* write header1 line */
  prt.detail.line_null = '\0';
  prt.detail.line_nl = '\n';
  prt.detail.carr_rt = '\r';
  for(i=0;i<sizeof(prt.detail)-3;i++)
    prt.line[i] = ' ';                 /* clear print line */
  fputs(prt.line,prtfile);             /* blank line after heading */

  if(pagecnt != 6)
  {
    fputs((char*)&header2,prtfile);    /* write header2 line */
    fputs((char*)&header3,prtfile);    /* write header3 line */
    fputs(prt.line,prtfile);           /* blank line after heading */
    fputs(prt.line,prtfile);           /* second blank line  */
  }
  else
    {
    fputs((char*)&header4,prtfile);    /* write summary header4 line */
    fputs(prt.line,prtfile);
    fputs((char*)&header5,prtfile);    /* write summary header5 line */
    fputs(prt.line,prtfile);           /* blank line after heading */
    fputs(prt.line,prtfile);           /* second blank line  */
    }
}
/*********************************************************************/
/* headout() - write a report heading for outfile.txt                */
/*********************************************************************/
void headout() {
  linecnt = 0;                         /* clear line counter */
  pagecnt2++;                           /* add 1 to page counter */
  sprintf(number,"%3d",pagecnt2);       /* convert to printable nbr */
  memcpy(header1.page_nbr,number,3);
  edit(header1.page_nbr,"zz9",number);  /* page nbr to header line */
  fputs((char*)&header1,outfile);      /* write header1 line */
  out.detail.line_null = '\0';
  out.detail.line_nl = '\n';
  out.detail.carr_rt = '\r';
  for(i=0;i<sizeof(out.detail)-3;i++)
    out.line[i] = ' ';                 /* clear print line */
  fputs(out.line,outfile);             /* blank line after heading */

  if(pagecnt != 6)
  {
    fputs((char*)&header2,outfile);    /* write header2 line */
    fputs((char*)&header3,outfile);    /* write header3 line */
    fputs(out.line,outfile);           /* blank line after heading */
    fputs(out.line,outfile);           /* second blank line  */
  }
  else
    {
    fputs((char*)&header4,outfile);    /* write summary header4 line */
    fputs(out.line,outfile);
    fputs((char*)&header5,outfile);    /* write summary header5 line */
    fputs(out.line,outfile);           /* blank line after heading */
    fputs(out.line,outfile);           /* second blank line  */
    }
}

/*********************************************************************/
/* termination: close files                                          */
/*********************************************************************/
void terminate() {

  for(dex=0;dex<LIM;dex++)            /* 1st for loop that walks the */
  {                                    /* dates array  */
    memcpy(header3.hdr_date,&dates[dex][5],2); /* date of data in */
    header3.hdr_date[2] = '/';                    /* header3     */
    memcpy(&header3.hdr_date[3],&dates[dex][8],2);
    header3.hdr_date[5] = '/';
    memcpy(&header3.hdr_date[6],dates[dex],4);
    headings();
    headout();
    header1.hdr_skip = '\f';
      for(sch=0;sch<MAX_ENTRIES;sch++)  /* 2nd for loop that walks */
      {                                 /* the event_table array */
 sprintf(prt.detail.daytot,"%5u",event_table[sch].daytot[dex]);
 prt.detail.daytot[5] = ' '; /* blank out null at end of daytot */
 strcpy(prt.detail.text_nm,event_table[sch].text_nm);
 j = strlen(prt.detail.text_nm);
 prt.detail.text_nm[j]    = ' '; /* blank out null at end of text_nm */
 printline();                    /* execute printline function   */
      }
  }
    memcpy(header5.hdr_date,&dates[0][5],2); /* copy dates to header */
    header5.hdr_date[2] = '/';              /* for the summary page */
    memcpy(&header5.hdr_date[3],&dates[0][8],2);
    header5.hdr_date[5] = '/';
    memcpy(&header5.hdr_date[6],dates[0],4);
    header5.hdr_date[10] = ' ';
    header5.hdr_date[11] = '-';
    header5.hdr_date[12] = ' ';
    memcpy(&header5.hdr_date[13],&dates[4][5],2);
    header5.hdr_date[15] = '/';
    memcpy(&header5.hdr_date[16],&dates[4][8],2);
    header5.hdr_date[18] = '/';
    memcpy(&header5.hdr_date[19],dates[4],4);

  headings();
  headout();
  for(sch=0;sch<MAX_ENTRIES;sch++)  /* for loop that walks the event */
    {                               /* table for summary of eventcnt */
 for(i=0,dex=0;dex<LIM;dex++)              /* for loop that does the*/
   i += event_table[sch].daytot[dex]; /* sum                        */
 sprintf(prt.detail.daytot,"%5u",i);       /* put the sum in daytot */
 prt.detail.daytot[5] = ' ';               /* get rid of null       */
 strcpy(prt.detail.text_nm,event_table[sch].text_nm);
 j = strlen(prt.detail.text_nm);           /* get rid of null at end*/
 prt.detail.text_nm[j] = ' ';              /* of text_nm            */
 printline();
      }
  fclose(infile);                           /* close files */
  fclose(outfile);
  fclose(prtfile);
  fclose(errfile);
}
