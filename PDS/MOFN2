/***********/
/* mofn2.c */
/*********************************************************************/
/* Calculates all the possible combinations on N items taken M at a  */
/* time and writes the resulting data to a file.                     */
/*                                                                   */
/* Author R Thornton November, 2000                                  */
/*********************************************************************/
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define N 16
#define M 4
/*********************************************************************/
/* Global data areas                                                 */
/*********************************************************************/
char n[N][2] = {{'0','1'}, {'0','2'}, {'0','3'}, {'0','4'}, {'0','5'},
        {'0','6'}, {'0','7'}, {'0','8'}, {'0','9'}, {'1','0'},
        {'1','1'}, {'1','2'}, {'1','3'}, {'1','4'}, {'1','5'},
        {'1','6'}};
char m[M][2] = {{'0','1'}, {'0','2'}, {'0','3'}, {'0','4'}};
FILE *output1;               /* output file pointer */
struct {
  char digit[4][3];
 char filler1[3];
} record;
long count = 0;               /* output record count */
int more_combos = -1;         /* process switch */
/*********************************************************************/
/* Function prototypes                                               */
/*********************************************************************/
int  main(void);             /* executive control routine */
void Initialize(void);       /* Initialize for porcessing */
int  Locate_Msubi_In_N(int); /* locate m[i] in n */
int  Locate_Next_Unused_In_N(int, int); /* find next unused in n */
int  Check_Duplicate_In_M(int, int);    /* check for dup in m */
void Write_Combination(void);  /* write combination to output file */
void Terminate(void);        /* termination routine */
void Develop_Next_Combination(void); /* build the next combination */
/*********************************************************************/
/* executive control routine                                         */
/*********************************************************************/
int  main(void) {            /* executive control routine */
 Initialize();              /* Initialize for processing */
 while(more_combos) {
  Write_Combination();     /* go write combination in m[] to output */
  Develop_Next_Combination(); /* go develop next combination */
 }
 Terminate();               /* terminate processing normally */
 return(0);
}
/*********************************************************************/
/* Build the next combination in the m[] array;                      */
/*********************************************************************/
void Develop_Next_Combination(void) {
 int i, j, p;               /* work fields */
 i = M - 1;                       /* start at right end of combo */
 Locate_In_Full:
  p = Locate_Msubi_In_N(i);      /* locate m[i] in n */
 Get_Next_Unused:
  p = Locate_Next_Unused_In_N(i, p); /* locate next unused char in n */
  if((p >= N) || (p < 0)) {
    if(i == 0) {
     more_combos = 0;             /* all thru, signal complete */
     return;
    }
    else {
     i--;
     goto Locate_In_Full;
    }
  }
  else {
    memcpy(m[i], n[p],2);
    i++;
    p = -1;
    if(i < M)
     goto Get_Next_Unused;
    else
     return;
 }
}
/*********************************************************************/
/* Terminate processing: write final output count and close file.    */
/*********************************************************************/
void Terminate(void) {
 printf("%ld combinations found.\n",count);
 fclose(output1);
 exit(0);
}
/*********************************************************************/
/* Write the combination in the m[] array to the output file.        */
/*********************************************************************/
void Write_Combination(void) {
 int k;
 memset(&record,' ',sizeof(record));       /* clear record to blanks */
 for(k=0;k<4;k++)
  memcpy(record.digit[k], m[k], 2); /* move digits to record */
  record.filler1[0] = '\r';
  record.filler1[1] = '\n';
  record.filler1[2] = '\x0';
 fwrite(&record, 1, sizeof(record), output1); /* write record */
 count++;                      /* count combinations */
}
/*********************************************************************/
/*  Initialize for processing: Open output file.                     */
/*********************************************************************/
void Initialize(void) {
 output1 = (fopen("dd:OUTPUT1","wb,type=record,recfm=FB,lrecl=15"));
 if(output1 == NULL) {
  perror("Error opening file OUTPUT1: ");
  exit(8);
 }
}
/*********************************************************************/
/* Locates the character at m[i] in n[] and returns its index value. */
/*********************************************************************/
int Locate_Msubi_In_N(int i) {
 int p;
 for(p=0; p<N; p++)
  if(!memcmp(m[i], n[p], 2))
   break;
 if((p >= N) || (p < 0)) {
  printf("Error: couldn't find m[i] in n.\n");
  exit(8);
 }
 return(p);
}
/*********************************************************************/
/* search forward in n[] beginning with n[p] until a field is found  */
/* that is not already used in m[]. If no field is found, p=N on     */
/* return, else p contains the subscript to the field found.         */
/*********************************************************************/
int  Locate_Next_Unused_In_N(int i, int p) {
 int j;
 while(++p < N)
  if(Check_Duplicate_In_M(i, p))    /* if n[p] has no dup in m[] */
   return(p);                          /* return p to caller */
 return(N);                          /* when all n[p]'s are dups */
}
/*********************************************************************/
/* Check current trial field at n[p] for a duplicate at any position */
/* in m. If a duplicate is found, return 0, else non-zero.           */
/*********************************************************************/
int Check_Duplicate_In_M(int i, int p) {
 int j;
 for(j = i-1; j>=0; j--)               /* start scan at m[i-1] */
  if((memcmp(m[j], n[p], 2) == 0))    /* if an equal is found */
   return(0);                            /* return 0 */
 return(-1);                           /* return -1 if no equal found*/
}
