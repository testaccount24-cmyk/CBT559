/* screen generation program */
#include "scr.h"

int ulrow=0, ulcol=0, lrrow=24, lrcol=79;        /* Default area 0,0,24,79 */
int c_row=0, c_col=0;                             /* Cursor row and column */
int attr=0x0F;                                        /* Default attribute */
int style=1;                                           /* Defaul box style */
int boxed=0;                                       /* Area boxed indicator */
int box_attr=0x0F;                                  /* Box color attribute */
int line_attr;                                   /* Current line attribute */
unsigned int k;                              /* Extended Value of key read */
unsigned char c;                                       /* ASCII key value */


      /* function prototypes */
void show_help(void);                                                /* F1 */
void define_area(void);                                              /* F2 */
void cycle_bg_color();                                           /* Alt-F2 */
void cycle_fg_color();                                           /* Ctl-F2 */
void clear_current_area();                                           /* F3 */
void draw_box(void);                                                 /* F4 */
void cycle_box_color();                                          /* Alt-F4 */
void cycle_box_style();                                          /* Ctl-F4 */
void cycle_line_color();                                             /* F5 */
void load_screen();                                                  /* F9 */
void save_screen(void);                                             /* F10 */
void ascii_chars(void);
void cursor_up_1_row(void);
void cursor_down_1_row(void);
void cursor_left_1_column(void);
void cursor_right_1_column(void);


/**************************************************************************/
/* Executive routine: Initialize for processing, permit user to draw on   */
/* the screen, and call appropriate functions to handle function keys.    */
/**************************************************************************/
void main() {
 scr_clear(0,0,24,79);                              /* clear the screen */
 show_help();                                    /* display help screen */
 set_cur(c_row, c_col,0);                          /* Set cursor to 0,0 */

 while(-1) {
  k = kbd_getc();                                   /* Read keyboard */
  c = 0x00FF & k;                    /* Get the ASCII portion into c */
  k >>= 8;                          /* Shift extended key value right */
  if(c)                            /* If key pressed is normal ASCII */
   ascii_chars();                       /* Write it to the screen */
  else
   switch(k) {
    case 0x3B:                               /* F1 key pressed */
     show_help();                    /* Display HELP screen */
     break;
    case 0x3C:                               /* F2 key pressed */
     define_area();                   /* Define screen area */
     break;
    case 0x69:                           /* Alt-F2 key pressed */
     cycle_bg_color();       /* Cycle area background color */
     break;
    case 0x5F:                           /* Ctl-F2 key pressed */
     cycle_fg_color();       /* cycle area foreground color */
     break;
    case 0x3D:                               /* F3 key pressed */
     clear_current_area();     /* Clear current screen area */
     break;
    case 0x3E:                               /* F4 key pressed */
     draw_box();                    /* Draw box around area */
     break;
    case 0x6B:                           /* Alt-F4 key pressed */
     cycle_box_color();          /* Cycle box outline color */
     break;
    case 0x61:                           /* Ctl-F4 key pressed */
     cycle_box_style();                  /* Cycle box style */
     break;
    case 0x3F:                               /* F5 key pressed */
     cycle_line_color();        /* cycle current line color */
     break;
    case 0x43:                               /* F9 key pressed */
     load_screen();             /* Load a saved screen file */
     break;
    case 0x44:                              /* F10 key pressed */
     save_screen();        /* save current screen to a file */
     break;
    case 0x71:                          /* Alt-F10 key pressed */
     exit(0);                       /* termnate the program */
    case 0x48:                           /* Up arrow */
     cursor_up_1_row();
     break;
    case 0x50:                         /* Down arrow */
     cursor_down_1_row();
     break;
    case 0x4B:                         /* Left arrow */
     cursor_left_1_column();
     break;
    case 0x4D:                        /* Right arrow */
     cursor_right_1_column();
     break;
    default:                        /* Any other non-ASCII key */
     break;                               /* just ignore it */
   }
 }
}

/*************************************************************************/
/* First push the current screen onto the stack. Display the help screen,*/
/* and wait for any key press, then restore the current screen from the  */
/* stack and return to caller.                                           */
/*************************************************************************/
void show_help(void) {                                             /* F1 */
 int ulr=0, ulc=0, lrr=15, lrc=38;                /* HELP Box corners */
 int style=1;                                       /* HELP Box style */
 int attr=0x0F;                                /* HELP Box attributes */
 int i, j;                                                 /* Indexes */

 scr_push();                        /* Push current screen onto stack */
 put_box(ulr, ulc, lrr, lrc, style);                      /* Draw box */
 scr_clear(ulr+1,ulc+1, lrr-1, lrc-1);              /* Clear interior */
 put_attr(0x0F, ulr, ulc, lrr, lrc);                /* Set attributes */
 scr_puts("F1  -  HELP (This screen)          ", attr, ulr+1, ulc+2);
 scr_puts("F2  -  Define Screen Area          ", attr, ulr+2, ulc+2);
 scr_puts("Alt-F2  -  Cycle Background Color  ", attr, ulr+3, ulc+2);
 scr_puts("Ctl-F2  -  Cycle Foreground Color  ", attr, ulr+4, ulc+2);
 scr_puts("F3  -  Clear Current Area          ", attr, ulr+5, ulc+2);
 scr_puts("F4  -  Draw Box in Area            ", attr, ulr+6, ulc+2);
 scr_puts("Alt-F4  -  Cycle Box Color         ", attr, ulr+7, ulc+2);
 scr_puts("Ctl-F4  -  Cycle Box Style         ", attr, ulr+8, ulc+2);
 scr_puts("F5  -  Cycle Current Line Color    ", attr, ulr+9, ulc+2);
 scr_puts("F9  -  Load Screen File            ", attr, ulr+10, ulc+2);
 scr_puts("F10  - Save and End                ", attr, ulr+11, ulc+2);
 scr_puts("Alt-F10 - End Without Save         ", attr, ulr+12, ulc+2);
 scr_puts("Press any key to continue          ", attr, ulr+14, ulc+2);
 kbd_getc();                                         /* Read keyboard */
 scr_pop(-1);                         /* Restore saved screen to view */
 return;                                          /* Return to caller */
}

/***************************************************************************/
/* Ask user to define the area by positioning the cursor at the upper left */
/* and pressing Enter, then at the lower right and pressing Enter. If the  */
/* Esc key is pressed at any time, the routine exits without change. Only  */
/* the Esc, Enter, and arrow keys are recognized by this function. On      */
/* successful completion, the area corner values are set and boxed is off. */
/***************************************************************************/
void define_area(void) {                                             /* F2 */
 int sav_ulr, sav_ulc, sav_lrr, sav_lrc, sav_box;
 char string[80];

 sav_ulr = ulrow;     /* save current stuff */
 sav_ulc = ulcol;
 sav_lrr = lrrow;
 sav_lrc = lrcol;
 sav_box = boxed;
 scr_push();
 scr_clear(11,1,11,78);          /* ask for upper left location */
 put_box(10,0,12,79,1);
 scr_puts("Position cursor in box upper left using arrow keys, then press enter"
,0x0F,11,2);
 get_cur(&ulrow, &ulcol,0);    /* set box ul to current cursor position */
 c_row = ulrow;
 c_col = ulcol;
 while(-1) {
  k = kbd_getc();
  switch(k) {
   case 0x1C0D:           /* Enter key */
    break;
   case 0x4800:           /* Up arrow */
    ulrow--;
    if(ulrow < 0)
     ulrow = 24;
    set_cur(ulrow, ulcol, 0);
    break;
   case 0x5000:           /* Down arrow */
    ulrow++;
    if(ulrow > 24)
     ulrow = 0;
    set_cur(ulrow, ulcol, 0);
    break;
   case 0x4B00:          /* Left arrow */
    ulcol--;
    if(ulcol < 0)
     ulcol = 79;
    set_cur(ulrow, ulcol, 0);
    break;
   case 0x4D00:          /* Right arrow */
    ulcol++;
    if(ulcol > 79)
     ulcol = 0;
    set_cur(ulrow, ulcol, 0);
    break;
   case 0x011B:         /* Esc key */
    ulrow = sav_ulr;
    ulcol = sav_ulc;
    lrrow = sav_lrr;
    lrcol = sav_lrc;
    boxed = sav_box;
    scr_pop(-1);
    return;
   default:
    break;
  }
  if(k == 0x1C0D)
   break;
 }

 scr_clear(11,1,11,78);          /* ask for lower right location */
 put_box(10,0,12,79,1);
 scr_puts("Position cursor in box lower right using arrow keys, then press enter
",0x0F,11,2);
 get_cur(&lrrow, &lrcol,0);    /* set box lr to current cursor position */
 c_row = lrrow;
 c_col = lrcol;
 while(-1) {
  k = kbd_getc();
  switch(k) {
   case 0x1C0D:           /* Enter key */
    break;
   case 0x4800:           /* Up arrow */
    lrrow--;
    if(lrrow < 0)
     lrrow = 24;
    set_cur(lrrow, lrcol, 0);
    break;
   case 0x5000:           /* Down arrow */
    lrrow++;
    if(lrrow > 24)
     lrrow = 0;
    set_cur(lrrow, lrcol, 0);
    break;
   case 0x4B00:          /* Left arrow */
    lrcol--;
    if(lrcol < 0)
     lrcol = 79;
    set_cur(lrrow, lrcol, 0);
    break;
   case 0x4D00:          /* Right arrow */
    lrcol++;
    if(lrcol > 79)
     lrcol = 0;
    set_cur(lrrow, lrcol, 0);
    break;
   case 0x011B:         /* Esc key */
    ulrow = sav_ulr;
    ulcol = sav_ulc;
    lrrow = sav_lrr;
    lrcol = sav_lrc;
    boxed = sav_box;
    scr_pop(-1);
    return;
   default:
    break;
  }
  if(k == 0x1C0D)
   break;
 }
 if((ulrow+1 < lrrow) && (ulcol+1 < lrcol)) {
  scr_clear(11,1,11,78);                            /* Error message */
  put_box(10,0,12,79,1);
  sprintf(string,"Box corners are %2d,%2d,%2d,%2d",ulrow,ulcol,lrrow,lrcol);
  scr_puts(string,0x0F,11,2);
  k = kbd_getc();                                /* Wait for any key */
  scr_pop(-1);
  put_attr(attr, ulrow, ulcol, lrrow, lrcol);
  c_row = ulrow;
  c_col = ulcol;
  set_cur(c_row, c_col, 0);
  boxed = 0;
 }
 else {
  scr_clear(11,1,11,78);                            /* Error message */
  put_box(10,0,12,79,1);
  scr_puts("Box lower right is not below and right of upper left.",0x0F,11,2);
  k = kbd_getc();                                /* Wait for any key */
  get_cur(&c_row, &c_col,0);                  /* Set cursor position */
  ulrow = sav_ulr;
  ulcol = sav_ulc;
  lrrow = sav_lrr;
  lrcol = sav_lrc;
  boxed = sav_box;
  scr_pop(-1);
 }
}

/***************************************************************************/
/*  Cycle through background colors as user presses Alt-F2                 */
/***************************************************************************/
void cycle_bg_color() {              /* Alt-F2 */
 int bga;
 attr += 16;                   /* high-order nibble controls background */
 attr &= 0x007F;                               /* don't permit flashing */
 if(boxed) {
  box_attr &= 0x000F;    /* Turn off bg attribute in boxed attribute */
  bga = attr & 0x00F0; /* Capture bg attribute only from area attrib */
  box_attr |= bga;                   /* Make bg same in area and box */
  put_attr(box_attr, ulrow, ulcol, lrrow, lrcol);
  put_attr(attr, ulrow+1, ulcol+1, lrrow-1, lrcol-1);
 }
 else
  put_attr(attr, ulrow, ulcol, lrrow, lrcol);
}

/***************************************************************************/
/* Cycle through foreground colors as user presses Ctl-F2                  */
/***************************************************************************/
void cycle_fg_color() {                                          /* Ctl-F2 */
 if((attr & 0x000F) == 0x000F)
  attr &= 0xFFF0;
 else
  attr += 1;           /* Low order nibble controls foreground color */
 if(boxed)
  put_attr(attr, ulrow+1, ulcol+1, lrrow-1, lrcol-1);
 else
  put_attr(attr, ulrow, ulcol, lrrow, lrcol);
}

/***************************************************************************/
/* Clear the currently defined screen area.                                */
/***************************************************************************/
void clear_current_area() {                                          /* F3 */
 if(boxed) {
  scr_clear(ulrow+1, ulcol+1, lrrow-1, lrcol-1);
  put_attr(attr, ulrow+1, ulcol+1, lrrow-1, lrcol-1);
 }
 else {
  scr_clear(ulrow, ulcol, lrrow, lrcol);
  put_attr(attr, ulrow, ulcol, lrrow, lrcol);
 }
}

/***************************************************************************/
/* Draw a box around the current area. Indicate area is boxed.  Use the    */
/* box style currently set.                                                */
/***************************************************************************/
void draw_box(void) {                                                /* F4 */
 int bga;

 boxed = -1;
 bga = (attr & 0x00F0);                  /* Copy bg from area attribute */
 box_attr &= 0xFF0F;
 box_attr |= bga;
 put_box(ulrow, ulcol, lrrow, lrcol, style);
 put_attr(box_attr, ulrow, ulcol, lrrow, lrcol);
 put_attr(attr, ulrow+1, ulcol+1, lrrow-1, lrcol-1);
}

/***************************************************************************/
/* Cycle the color of the box outlining the current area.                  */
/***************************************************************************/
void cycle_box_color() {                                         /* Alt-F4 */
 int bga;

 if((box_attr & 0x000F) == 0x000F)
  box_attr &= 0xFFF0;
 else
  box_attr += 1;
 box_attr &= 0x000F;        /* Turn off bg attribute in boxed attribute */
 bga = attr & 0x00F0;     /* Capture bg attribute only from area attrib */
 box_attr |= bga;                       /* Make bg same in area and box */
 put_attr(box_attr, ulrow, ulcol, lrrow, lrcol);
 put_attr(attr, ulrow+1, ulcol+1, lrrow-1, lrcol-1);
}

/***************************************************************************/
/* Cycle through the four box styles as the user presses Ctl-F4            */
/***************************************************************************/
void cycle_box_style() {                                         /* Ctl-F4 */
 style += 1;
 if(style > 3)
  style = 0;
 draw_box();
}

/***************************************************************************/
/* Cycle through text colors for the current line only.                    */
/***************************************************************************/
void cycle_line_color() {                                            /* F5 */
 if((line_attr & 0x000F) == 0x000F)
  line_attr &= 0xFFF0;
 else
  line_attr += 1;
 if(boxed)
  put_attr(line_attr, c_row, ulcol+1, c_row, lrcol-1);
 else
  put_attr(line_attr, c_row, ulcol, c_row, lrcol);
}

/***************************************************************************/
/* Ask user for name of screen file to load, read it into a buffer and     */
/* make it the current screen.                                             */
/***************************************************************************/
void load_screen() {                                                 /* F9 */
 char filename[80];
 char buffer[4000];

 scr_push();
 scr_clear(11,1,12,78);          /* Ask for filename */
 put_box(10,0,13,79,1);
 scr_puts("Enter name of filename containing the screen image:",0x0F,11,2);
 filename[0] = 0x00;
 scr_gets(filename, 0x0F, 12,2,78,UPPER);

 if(filename[0] == 0x00) {
  scr_pop(-1);
  return;
 }
 if(!(read_window(buffer, filename)) == NOERROR) {
  put_window(buffer,0,0,24,79,0,0);
  ulrow = ulcol = boxed = c_row = c_col = 0;
  lrrow = 24;
  lrcol = 79;
  attr = 0x0F;
  set_cur(c_row, c_col, 0);
 }
 else
  scr_pop(-1);
}

/***************************************************************************/
/* Move cursor up 1 row within current area.                               */
/***************************************************************************/
void cursor_up_1_row(void) {
 c_row--;
 if(boxed)
  if(c_row < ulrow+1)
   c_row = lrrow-1;
  else ;
 else
  if(c_row < ulrow)
   c_row = lrrow;
 set_cur(c_row, c_col, 0);
}

/***************************************************************************/
/* Move cursor down 1 row within current area.                             */
/***************************************************************************/
void cursor_down_1_row(void) {
 c_row++;
 if(boxed)
  if(c_row > lrrow-1)
   c_row = ulrow+1;
  else ;
 else
  if(c_row > lrrow)
   c_row = ulrow;
 set_cur(c_row, c_col, 0);
}

/***************************************************************************/
/* Move cursor left 1 column within current area.                          */
/***************************************************************************/
void cursor_left_1_column(void) {
 c_col--;
 if(boxed)
  if(c_col < ulcol+1)
   c_col = lrcol-1;
  else ;
 else
  if(c_col < ulcol)
   c_col = lrcol;
 set_cur(c_row, c_col, 0);
}

/***************************************************************************/
/* Move cursor right one column within current area.                       */
/***************************************************************************/
void cursor_right_1_column(void) {
 c_col++;
 if(boxed)
  if(c_col > lrcol-1)
   c_col = ulcol+1;
  else ;
 else
  if(c_col > lrcol)
   c_col = ulcol;
 set_cur(c_row, c_col, 0);
}

/***************************************************************************/
/*  Display ascii characters on screen.                                    */
/***************************************************************************/
void ascii_chars(void) {
 if(c >= ' ') {
  scr_putc(c, c_row, c_col, attr);
  cursor_right_1_column();
 }
}

/*************************************************************************/
/* First push the current screen onto the screen stack. Ask the user for */
/* a filename. Open the file. If it exists, ask permission to write over */
/* it. If o.k., write stacked screen image to the file. Pop current      */
/* off the stack and return to caller.                                   */
/*************************************************************************/
void save_screen(void) {
 char filename[80];
 int remove=-1;

 scr_push();                 /* push current screen onto screen stack */
 scr_clear(10,0,13,79);      /* clear area for box */

 put_box(10,0,13,79,1);                      /* get filename for save */
 scr_puts("Enter filename for the screen save:",0x0F,11,23);
 filename[0] = '\0';
 scr_gets(filename,0x0F,12,2,79,UPPER);

 scr_pop(remove);         /* pop current screen back off screen stack */

 if(filename[0] == '\0')                   /* Return if no name given */
  return;
 else
  write_window(filename);     /* else write current screen to file */
}
