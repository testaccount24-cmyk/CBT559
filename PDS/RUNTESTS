/**************/
/* runtests.c */
/*********************************************************************/
/* Reads the first four files created by split4.c and stores them in */
/* arrays in memory. All combinations of one record from each file   */
/* are built. For each set of records, the fields are tested for     */
/* duplicates, and the combination is rejected, if there is any      */
/* duplicate. If no duplicate is found, the combination is tested for*/
/* four formulas. If all four are true, a solution is displayed.     */
/*                                                                   */
/* Author R Thornton November, 2000                                  */
/*********************************************************************/
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
/*********************************************************************/
/* Global data areas                                                 */
/*********************************************************************/
FILE *infiles[4];              /* file pointers */
struct {
  char digit[4][3];
 char filler1[3];
} record;
int data[2000][4];           /* data from files 1-4 */
int start[4];                /* starting indexes for file data */
int end[4];                  /* ending indexes for file data */
/*********************************************************************/
/* Function prototypes                                               */
/*********************************************************************/
int  main(void);             /* executive control routine */
void Initialize(void);       /* Initialize for porcessing */
void Terminate(void);        /* termination routine */
int  Check_Duplicates(int []); /* check for duplication in trial */
int  Check_Formulas(int []); /* check formulas against trial */
void Display_Solution(int []); /* display a solution */
/*********************************************************************/
/* executive control routine                                         */
/*********************************************************************/
int  main(void) {            /* executive control routine */
  int i, j, k, l, t;
  int trial[16];             /* trial number set */
  long count=0;              /* iteration count */

  Initialize();              /* Initialize for processing */
  for(i=start[0]; i<=end[0]; i++)
  for(j=start[1]; j<=end[1]; j++)
  for(k=start[2]; k<=end[2]; k++)
  for(l=start[3]; l<=end[3]; l++) {
    for(t=0; t<4; t++) trial[t] = data[i][t]; /* copy numbers 1-4 */
    for(; t<8; t++) trial[t] = data[j][t-4];  /* copy numbers 5-8 */
    for(; t<12; t++) trial[t] = data[k][t-8]; /* copy numbers 9-12 */
    for(; t<16; t++) trial[t] = data[l][t-12]; /* copy nbrs 13-16 */
    count++;                        /* increment interval counter */
    if(count > 1000000) {
      count = 0;                    /* reset counter */
      printf("At 10K: i=%d, j=%d, k=%d, l=%d\n",i,j,k,l);
    }
    if(Check_Duplicates(trial)) continue;
    if(Check_Formulas(trial)) continue;
    Display_Solution(trial);
  }
  Terminate();                   /* Finished, terminate processing */
  return(0);
}
/*********************************************************************/
/* Check_Duplicates: checks the numbers in the trial array for any   */
/* duplicated values. Returns 0 if no duplicates found, else non-zero*/
/*********************************************************************/
int  Check_Duplicates(int trial[16]) {
  int i, j;
  int chk[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                 16};
  for(i=0; i<16; i++) {
    j = trial[i];              /* get number from trial */
    if(chk[j] == 0)            /* check for number already used */
      return(-1);                /* return -1 if duplicate found */
    else
      chk[j] = 0;                /* show number used if not a dup */
  }
  return(0);                    /* no duplicates, return zero */
}
/*********************************************************************/
/* Check_formulas: checks the numbers in the trial array against four*/
/* formulas. Returns 0 if trial satisfies all formulas, else non-zero*/
/*********************************************************************/
int  Check_Formulas(int trial[16]) {
  int i;
  if(!((trial[0] - trial[4] + trial[8] * trial[12]) == 2))
    return(-1); /* formula failed, return -1 */
  if(!((trial[1] - trial[5] + trial[9] * trial[13]) == 181))
    return(-1); /* formula failed, return -1 */
  if(!((trial[2] + trial[6] * trial[10] - trial[14]) == 105))
    return(-1); /* formula failed, return -1 */
  if(!((trial[3] + trial[7] + trial[11] * trial[15]) == 89))
    return(-1); /* formula failed, return -1 */
  return(0);               /* all formulas valid, return 0 */
}
/*********************************************************************/
/* Display_solution: displays number values found for a solution.    */
/*********************************************************************/
void Display_Solution(int trial[16]) {
  printf("Solution found: %02d %02d %02d %02d %02d %02d %02d %02d "
       "%02d %02d %02d %02d %02d %02d %02d %02d\n",
        trial[0], trial[1], trial[2], trial[3],
        trial[4], trial[5], trial[6], trial[7],
        trial[8], trial[9], trial[10], trial[11],
        trial[12], trial[13], trial[14], trial[15]);
}
/*********************************************************************/
/* Termination routine.                                              */
/*********************************************************************/
void Terminate(void) {
  exit(0);
}
/*********************************************************************/
/*  Initialize for processing: Open input files and load them into   */
/*  arrays.                                                          */
/*********************************************************************/
void Initialize(void) {
  int i;
  char filename[] = "dd:input1";  /* file name prototype */
  int j, k;                 /* work int's */
  int count=0;              /* input record count */
  int indx=0;               /* index to data array */
  int more_records = 1;     /* =0 at eof input1 */
  char work[3];             /* conversion work area */

  for(i=0; i<4; i++) {
    sprintf(&filename[8], "%1d", i+1);  /* specialize filename */
    infiles[i] = (fopen(filename,"rb,type=record,recfm=FB,lrecl=15"));
    if(infiles[i] == NULL) {
      printf("Error opening file %s\n", filename);
      perror(" ");
      exit(8);
    }
    more_records = 1;       /* indicate more records available */
    count = 0;              /* reset record count for file */
    start[i] = indx;        /* set starting index for file */
    while(more_records) {
      more_records = fread(&record, 15, 1, infiles[i]); /* read */
      if(ferror(infiles[i])) {
        printf("\nAt file INPUT%c, record number %d: ",i+1, count);
        perror("Read error occurred.");
        printf("\n");
        exit(8);
      }
      if(!more_records) { /* when at end of file: */
        end[i] = indx-1;    /* set ending index value */
        fclose(infiles[i]); /* close this file */
        break;            /* break out of while loop */
      }
      count++;                   /* count input records */
      for(j=0; j<4; j++) {
        memcpy(&work, record.digit[j], 2); /* copy character field */
        work[2] = '\x0';           /* make it a string */
        k = atoi(work);            /* convert it to int */
        data[indx][j] = k;         /* copy number to data array */
      }
      indx++;                      /* advance to next data element */
    }
  }
}
