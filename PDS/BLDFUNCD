/**************/
/* bldfuncd.c */
/*********************************************************************/
/* Reads the text file containing all of sections 3.7 and 4.1 of the */
/* C Language Runtime Reference manual and extracts function data:   */
/* for each function, writes the function name, manual reference     */
/* location, and short description. In most cases, at least two more */
/* lines will follow, which contain the #define needed and the proto-*/
/* type statement.                                                   */
/*                                                                   */
/* The input file is created by saving the bookmanager file for the  */
/* C/C++ Run-Time Library Reference (EDCLB010.BOO) to the PC hard    */
/* drive as a .txt file, then deleting everything up to Section 3.7  */
/* and everything following the end of section 4.1, and transferring */
/* the remainder to the mainframe.                                   */
/*                                                                   */
/* Input file is RECFM=VB,LRECL=255                                  */
/* Output file is RECFM=FB,LRECL=117                                 */
/*                                                                   */
/* Author R Thornton Nov 2000                                        */
/*********************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>

/*********************************************************************/
/* Defines.                                                          */
/*********************************************************************/
#define InRecSize 256
#define OutRecSize 117

/*********************************************************************/
/* Function prototypes.                                              */
/*********************************************************************/
void Initialize(void);        /* Initialization. */
int  ReadInput1(void);        /* Read next Input1 record. */
void WriteOutput1(void);      /* Write output1 record. */
int  main(void);              /* Executive control routine. */
void Process(void);           /* Main processing routine */
void Terminate(void);         /* Termination routine */
void FindFunction(void);      /* Find next function in INPUT1 */
void FindStandard(void);      /* Find the Standards header */
void FindFormat(void);        /* Find the Format header */
void FindHeaders(void);       /* Find and write the header/prototype */

/*********************************************************************/
/* Global data areas.                                                */
/*********************************************************************/
FILE *Input1, *Output1;       /* Define the files. */
int RecSize = 1;              /* Size of last input record read */
int NoFunction = 1;           /* Set to 0 when function found. */
int NoStandard = 1;           /* Set to 0 when Standards found. */
int NoFormat = -1;            /* Set to 0 when Format found */
int NoGeneral = -1;           /* Set to 0 when Genl Descript found */
int RecNo;                    /* Sequential record nbr w/in function */
int sub;                      /* Subscript to next output record byte*/
char ManRef[7];               /* Manual Reference field */
char FuncDesc[65];            /* Function Description field */
char InRec[InRecSize];        /* Input1 record area. */
char OutRec[OutRecSize];      /* Output1 record area */
/*********************************************************************/
/* Executive control routine: Overall process control.               */
/*********************************************************************/
int main(void) {
  Initialize();               /* Initialize for processing */
  while(RecSize)              /* Perform processing routine */
    Process();                /* Until there are no more records. */
  Terminate();                /* Then terminate processing */
  return(0);                  /* Relinquish control */
}
/*********************************************************************/
/* Initialize for processing: open files                             */
/*********************************************************************/
void Initialize(void) {
  Input1 = fopen("dd:INPUT1", "rb,type=record,recfm=vb,lrecl=255");
  if (Input1 == NULL) {
     perror("Could not open INPUT1 stream");
     exit(8);
  }
  Output1= fopen("dd:OUTPUT1", "wb,type=record,recfm=fb,lrecl=117");
  if (Output1 == NULL) {
     perror("Could not open OUTPUT1 stream");
     exit(8);
  }
  memset(&OutRec, ' ', sizeof(OutRec)); /* clear output record */
}
/*********************************************************************/
/* Process the Input1 file: locate each function and write its data  */
/* to the Output1 file.                                              */
/*********************************************************************/
void Process(void) {
  NoFunction = -1;               /* Indicate no function found (yet)*/
  NoStandard = -1;               /* Indicate no Standards found (yet)*/
  NoFormat = -1;                 /* Indicate no Format found (yet) */
  NoGeneral = -1;                /* Indicate no General found (yet) */
  while(NoFunction && RecSize)
      FindFunction();            /* go find the next function */
  if(RecSize == 0) goto Exit_pr; /* exit if end of file */
  while(NoStandard && NoFormat)
      FindStandard();            /* go find the standards */
  if(RecSize == 0) goto Exit_pr; /* exit if end of file */
  memcpy(&OutRec[sub], FuncDesc, 65); /* Function Descript to output */
  memcpy(&OutRec[OutRecSize-10], ManRef, 7); /* Manual Ref to out */
  RecNo = 0;                     /* Reset function record count */
  memcpy(&OutRec[OutRecSize-2], "00", 2); /* record count for func */
  WriteOutput1();                /* Write an output record */
  while(NoFormat && NoGeneral && RecSize)
   FindFormat();                 /* Go find the Format header  */
  if(RecSize == 0) goto Exit_pr; /* exit if end of file */
  while(NoGeneral && RecSize)    /* if more recs and genl not found */
   FindHeaders();                /* find, output headers, prototypes */
  Exit_pr: return;
}
/*********************************************************************/
/* Find next function in INPUT1: reads a record from INPUT1 and      */
/* searches for the next function description. when found, saves     */
/* the function name and manual location.                            */
/*********************************************************************/
void FindFunction(void) {
  char HoldRec[256];                     /* Record hold area */
  int i,j;                               /* Work fields */
  if(ReadInput1()) {                     /* read, continue if not eof*/
    if((memcmp(InRec, "   3.7.", 7) == 0) || /* Found manual ref? */
       (memcmp(InRec, "   4.1.", 7) == 0)) { /* If found... */
      memcpy(HoldRec, InRec, RecSize); /* save the record */
      memset(ManRef, ' ', 7);           /* clear manual ref field */
      for(i=0;i<7;i++) {                /* move manual reference */
          if(HoldRec[i+3] == ' ') break;
        else
          ManRef[i] = HoldRec[i+3];
      }
      if(HoldRec[i+3] == ' ' && HoldRec[i+4] != ' ') { /*1 blank b4?*/
      for(sub=0;i<RecSize;i++, sub++) {
        if(HoldRec[i+4] == ' ') break;
        else                       /* Move function name() */
          if(sub < 32)
            OutRec[sub] = HoldRec[i+4];
          else goto Exit_ff;
      }
      sub++;                       /* set sub for next outrec byte */
      if(memcmp(HoldRec+i+2, "() -- ", 6)) goto Exit_ff;
      memset(FuncDesc, ' ', 65); /* Clear function descript*/
      for (i+=8,j=0;j<65;i++,j++) {    /* Move description */
        if(i < RecSize)
          FuncDesc[j] = HoldRec[i];
        else break;
      }
      NoFunction = 0;           /* show function def found */
      }
    }
  }
Exit_ff: return;
}
/*********************************************************************/
/* Find the Standards header. If the Format header is found, we      */
/* missed the Standards header. Set the appropriate indicator.       */
/* Once the Standards header is found, read forward to get the name  */
/* of the highest standard supported and move it into the Standards  */
/* field of the output record.                                       */
/*********************************************************************/
void FindStandard(void) {
  if(ReadInput1()) {                   /* Read, continue if not eof */
   if(!(memcmp(InRec, "   Standards", 12))) { /* Found Standards?*/
      NoStandard = 0;                   /* Yes, set the indicator */
     if(!ReadInput1()) goto Exit_fs; /* Read blank line */
     if(!ReadInput1()) goto Exit_fs; /* Read +---- line */
     if(!ReadInput1()) goto Exit_fs; /* Read | Standards line */
     if(!ReadInput1()) goto Exit_fs; /* Read +---- line */
     if(!ReadInput1()) goto Exit_fs; /* Read | xxxxxx line */
     OutRec[sub++] = '<';            /* delimit standard name */
     memcpy(&OutRec[sub], &InRec[5], 20); /* Move standard name */
       for(sub+=19; OutRec[sub] == ' '; sub--) { /*Fnd lst non-blnk */
     }
     OutRec[sub+1] = '>';            /* delimit standard name */
     sub += 3;                       /* set next output record sub */
   }
   else
      if(!(memcmp(InRec, "   Format", 9))) /* Found Format header?*/
        NoFormat = 0;                /* Yes, set the indicator */
  }
Exit_fs: return;
}
/*********************************************************************/
/* Find the Format header. If the General Description header is found*/
/* we missed the Format header. Set the appropriate indicator.       */
/*********************************************************************/
void FindFormat(void) {
  if(ReadInput1()) {                   /* Read, continue if not eof */
   if(!(memcmp(InRec, "   Format", 9))) /* Found Format header?*/
      NoFormat = 0;                     /* Yes, set the indicator */
   else
      if(!(memcmp(InRec, "   General", 10))) /* Found Gen'l Desc hdr?*/
        NoGeneral = 0;               /* Yes, set the indicator */
  }
}
/*********************************************************************/
/* Find the header file and prototype lines and write them to the    */
/* output file. Stop when the General Description header is found.   */
/*********************************************************************/
void FindHeaders(void) {
  int i,j;                                    /* Work fields */
  if(ReadInput1()) {                   /* Read, continue if not eof */
   if(RecSize < 15) goto Exit_fh;          /* ignore non-headers */
   if(!(memcmp(InRec, "   General ", 11))) { /* Found Gen'l Desc hdr?*/
      NoGeneral = 0;                    /* Yes, set the indicator */
      return;                           /* and return */
   }
   if((memcmp(InRec, "     ", 5) == 0) &&  /* strip non-headers */
      (InRec[5] != ' '))                        /* strip... */
      ;
   else goto Exit_fh;                           /* strip... */
   for(i=5,j=5;j<65;i++,j++)            /* move in data */
      if(i < RecSize)
        OutRec[j] = InRec[i];
      else break;
   RecNo++;                       /* add 1 to function record count */
   sprintf(&OutRec[OutRecSize-2], "%02d", RecNo); /* func recd cnt */
   WriteOutput1();                      /* write the line */
 }
Exit_fh: return;
}
/*********************************************************************/
/* Read next record from the Input1 file into the InRec area.        */
/*********************************************************************/
int  ReadInput1(void) {
  int rc;                                /* return value for fread() */
  rc = fread(InRec, 1, InRecSize, Input1);  /* read Input1 record */
  if(ferror(Input1)) {                  /* I/O error occurred? */
     perror("Error reading Input1");    /* display error message */
     exit(8);                           /* terminate in error */
  }
  if(feof(Input1))                      /* if end of file, */
     RecSize = 0;                       /* set record size to 0 */
  else
     RecSize = rc;                      /* else set record length */
  InRec[RecSize] = '\x0';               /* make InRec a true string */
  if(InRec[1] == '|') InRec[1] = ' ';   /* clear | to blank in pos 2 */
  return(RecSize);
}
/*********************************************************************/
/* Write next Output1 record from the OutRec area.                   */
/*********************************************************************/
void WriteOutput1(void) {
  fwrite(&OutRec, 1, sizeof(OutRec), Output1);
  if(ferror(Output1)) {/* I/O error occurred? */
     perror("fwrite failed for Output1"); /* yes, write error msg */
     exit(8);                    /* and terminate in error */
  }
  memset(&OutRec, ' ', sizeof(OutRec)); /* clear output record */
}
/*********************************************************************/
/* Terminate processing: close files and return control.             */
/*********************************************************************/
void Terminate(void)  {
  fclose(Input1);                /* Close the INPUT1 file. */
  fclose(Output1);               /* Close the OUTPUT1 file. */
  exit(0);                       /* Relinquish control. */
}
