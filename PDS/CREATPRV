          /*****************************************************************/
          /*                     **** creatprv.c ****                      */
          /*                                                               */
          /* File purification program for the provider file as received   */
          /* from the mainframe via JES2 RJE. Form feed characters (\f) are*/
          /* removed. Each data record is checked to insure it contains    */
          /* only a 7-digit provider number followed by a new-line         */
          /* character (\n). The last record in the file is a trailer      */
          /* record that begins with \xFF followed by an uppercase "T" and */
          /* the file record count. The trailer record is written to the   */
          /* prvcnt file and the count is used to validate the number of   */
          /* records read from the input file. All good provider records   */
          /* are written to the new provider file, while error records are */
          /* written to the error file.                                    */
          /* Author R Thornton February 1994                               */
          /*****************************************************************/
          #include <stdio.h>
          #include <stdlib.h>
          #include <time.h>
          #include <ctype.h>

          void initialize(int argc, char *argv[])); /* initialization      */
          void mainline(void);                  /* mainline function       */
          void terminate(void);                 /* termination function    */
          void read_a_record(void);             /* read next input file rec*/
          void writerec(void);                  /* write record to output  */
          void writecnt(void);                  /* write to the counts file*/
          void writeerr(void);                  /* write error records     */
          void trailrecd(void);                 /* process trailer record  */
          int edit(char output[], char pattern[], char number[]); /* edit  */

          FILE *infile, *outfile, *cntfile, *errfile; /* file pointers     */
          char innam[81];                       /* input file name         */
          char *inptr;                          /* input record pointer    */
          char outnam[81];                      /* output file name        */
          char cntnam[81];                      /* count file name         */
          char errnam[81];                      /* error file name         */

          char inrecord[256];                   /* input file record area  */
          char outrecord[256];                  /* output file record area */
          char cntline[256];                    /* count file buffer       */
          char errline[256];                    /* error file buffer       */
          char hold_record[256];

          int i;                                /* general purpose int     */
          char number[32];                      /* ascii numbers for edit()*/
          int morerecs = -1;                    /* input end-of-file switch*/
          int record_waiting = 0;               /* record waiting switch   */
          long incount = 0;                     /* input record counter    */
          long outcount = 0;                    /* output record counter   */
          long errcnt = 0;                      /* error record counter    */
          long tlrcnt = 0;                      /* number from trailer rec */
          int recdlen;                          /* input record length     */
          struct tm *t;                         /* pointer to time struct  */
          time_t seconds;                       /* current timer value     */


          void main(int argc, char *argv[]) {
                  initialize(argc, argv);       /* open files              */
                  while(morerecs)               /* perform mainline        */
                          mainline();           /*   while more records    */
                  terminate();                  /* close files             */
                  exit(0);                      /* quit                    */
          }
          /*****************************************************************/
          /* mainline function: process input file until no more records.  */
          /*****************************************************************/
          void mainline(void) {
            if((*inptr) == '\f')       /* if 1st byte of record is formfeed*/
                  inptr++;                    /*   step past it            */
            if((*inptr) == '\xFF')     /* if this is a trailer record      */
                  trailrecd();                /*   go process it
     */
            else {                     /* otherwise                        */
                  recdlen = strlen(inptr);    /* measure input record leng */
                  if((recdlen == 8) ||
                      ((recdlen == 9) && (inptr[7] == '\x0D'))) { /* good? */
                    for(i=0; i<7; i++) { /* check for 7 decimal digits     */
                          if(isdigit(inptr[i])) /* if digit found          */
                            ;                    /*    keep checking       */
                          else                   /* if non-numeric found   */
                            break;                   /*   quit checking    */
                    }
                    if(i == 7)                /*   if all numerics         */
                          writerec();                /*     write record   */
                  }
                  else                        /*    otherwise              */
                          writeerr();                /* write to error file*/
            }
            recdlen = 0;               /* clear for next read              */
            while(!recdlen && morerecs) /* read next input record          */
                  read_a_record();
          }
          /*****************************************************************/
          /* initialization: open files, read first input record.          */
          /*****************************************************************/
          void initialize(int argc, char *argv[]) {
                  if(argc == 5) {              /* if 5 parameters entered  */
                    strcpy(&innam,argv[1]); /*       1) input prov filename*/
                    strcpy(&outnam,argv[2]); /*      2) output prov filenam*/
                    strcpy(&cntnam,argv[3]); /*      3) count file name    */
                    strcpy(&errnam,argv[4])); } /* 4) error file name      */
              else {                       /* otherwise incorrect invocation
  */
                    printf("\nUsage is: ");    /*   show usage example     */
                    printf("\ncreatprv old_prv_file new_prv_file counts_file err
or_file\n ");
                    exit(1); }                 /*   and exit abnormally    */
            if((infile=fopen(innam,"rb")) == NULL) { /* open old provider  */
                  printf("Can't open file %s.\n",innam); /* tell user      */
                  exit(1); }                   /* and exit abnormally      */
            if((outfile=fopen(outnam,"wb")) == NULL) { /* open new pror    */
                  printf("Can't open file %s.\n",outnam); /* tell user     */
                  exit(1); }                            /* abnormal exit   */
            if((cntfile=fopen(cntnam,"w"))==NULL) { /* open count file     */
                  printf("\nCan't open the counts file.\n"); /* tell user  */
                  exit(1); }                               /* abnormal exit*/
            if((errfile=fopen(errnam,"w"))==NULL) { /* open error file     */
                  printf("\nCan't open the error file.\n");  /* tell user  */
                  exit(1); }                      /* anormal exit          */
            timezone = 5 * 60 * 60;          /* set local time for e.s.t   */
            daylight = -1;                   /* indicate daylit sav time   */
            time(&seconds);                  /* time in secs               */
            t = localtime(&seconds);         /* local time to tm struct    */
            sprintf(cntline,"%2d/%2d/%2d",((t->tm_mon)+1),t->tm_mday,t->tm_year)
;
            cntline[8] = '\n';               /* terminal nl to count line  */
            cntline[9] = '\0';               /* terminal null to count line*/
            writecnt();                      /* write date to count file   */
            strcpy(inrecord,cntline);        /* copy date for error log fil*/
            writeerr();                      /* write date to log file     */
            errcnt--;                        /* deduct for date header     */
            while(!recdlen && morerecs)      /* read next input record     */
                  read_a_record();
          }
          /*****************************************************************/
          /* process the trailer record.                                   */
          /*****************************************************************/
          void trailrecd() {
            inptr++;                      /* step past the initial \xFF    */
            if((*inptr) == 'T') {         /* if 2nd byte is "T"            */
                  tlrcnt = atol(inptr+1); /* convert trailer count         */
                  if(tlrcnt == 0)         /* trailer count invalid?        */
                    writeerr();           /*   write to error file         */
                  else                    /* otherwise                     */
                    incount--;            /* deduct trailer from input cnt */
            }
            else                          /* else if 2nd byte not "T"      */
                  writeerr();             /*   invalid trailer record      */
          }
          /*****************************************************************/
          /* read next input file record. at eof file, set morerecs switch.*/
          /*****************************************************************/
          void read_a_record(void) {
                  if(record_waiting) {
                          record_waiting = 0;
                          strcpy(inrecord,hold_record);
                  }
                  else {
                          if((fgets(inrecord,256,infile)) == NULL) {
                                  morerecs = 0;
                                  recdlen = 0;
                          }
                  }
                  if(morerecs) {
                          while((inrecord[0] == '\n') || (inrecord[0] == '\f'))
                                  strcpy(inrecord,inrecord+1);
                          recdlen = strlen(inrecord);
                          if(recdlen > 8)
                                  if(inrecord[7] == '\f') {
                                          record_waiting = -1;
                                          strcpy(hold_record, inrecord+8);
                                          inrecord[7] = '\n';
                                          inrecord[8] = '\0';
                                          recdlen = strlen(inrecord);
                                  }
                  }
                  if(recdlen > 0 ) {
                          incount++;
                          inptr = inrecord;
                  }
          }
          /*****************************************************************/
          /* write a record to the output file                             */
          /*****************************************************************/
          void writerec() {
            inptr[7] = '\n';                 /* insure ending newline      */
            inptr[8] = '\0';                 /* insure terminating null    */
            fputs(inptr,outfile);            /* write output record        */
            outcount++;                      /* add 1 to records written   */
          }
          /*****************************************************************/
          /* write a line to the counter file                              */
          /*****************************************************************/
          void writecnt() {
            fputs(cntline,cntfile);          /* write counter file line    */
          }
          /*****************************************************************/
          /* write a record to the error file                              */
          /*****************************************************************/
          void writeerr() {
            if(inrecord[0] == '\x1A')        /* if end of file             */
              incount--;                            /* don't count it      */
            else {
              i = strlen(inrecord);            /* get input record length  */
              if(inrecord[i-1] == '\n')        /* if nl present            */
                    ;                                 /*   do nothing      */
              else {                           /* otherwise                */
                    inrecord[i] = '\n';               /*   add nl to end   */
                    inrecord[i+1] = '\0'; }           /*   reset terminator*/
              fputs(inrecord,errfile);         /* write output record      */
              errcnt++;                        /* add 1 to error record cnt*/
            }
          }
          /*****************************************************************/
          /* The edit function provides numeric report editing, including  */
          /* leading zero suppression, check protection, floating $,       */
          /* leading or trailing minus sign, insertion of commas, decimal  */
          /* points and other non-numeric fields. The first parameter is   */
          /* the address of the edited output, whose size will be the same */
          /* as the pattern. The second parameter is the editing pattern,  */
          /* which must be a null-terminated string containing the edit    */
          /* pattern. The third is the number to be edited, a null-        */
          /* terminated string containing only digits 0-9 except the first */
          /* position, which is a -, if the number is negative. The        */
          /* pattern may be up to 64 characters, and the number to be      */
          /* edited may contain up to 32 characters. The number may not    */
          /* contain more significant digits than there are digit select   */
          /* characters in the pattern. If there are more digits selected  */
          /* by the pattern than there are in the number, leading zeros    */
          /* will be assumed. In the pattern, the first character may be:  */
          /*    $ (floating dollar sign)                                   */
          /*    * (check protection)                                       */
          /*    - (floating minus sign)                                    */
          /* The body of the edit pattern will be composed of digit select */
          /* characters (z and 9) and other characters, handled as follows:*/
          /*    z (zero suppression output is a blank in this position     */
          /*      until significance is set by receipt of a significant    */
          /*      digit or a 9 in the pattern. After significance is       */
          /*      set, output is a digit from the number.)                 */
          /*    9 (output is a digit from the number and significance      */
          /*      is set, even if the digit is a leading zero.)            */
          /*      other characters in the pattern will be output as-is     */
          /*      after significance is set, but will be output as blanks  */
          /*      before significance is set.                              */
          /* Characters in the pattern following the last digit select will*/
          /* be output as-is if the number is negative, otherwise output   */
          /* will be blanks for these pattern positions.                   */
          /*                                                               */
          /* When * check protection is selected, output will be *, rather */
          /* than blanks as mentioned above.                               */
          /*                                                               */
          /* An integer is returned to indicate success or errors:         */
          /*                 0 = successful edit                           */
          /*                 1 = pattern too long (over 64 characters)     */
          /*                 2 = too many digits selected (over 32)        */
          /*                 3 = no output digits selected in pattern      */
          /*                 4 = number contains non-numeric data          */
          /*                 5 = number has more digits than the pattern   */
          /*                                                               */
          /* Examples:                            nbr=             outf=   */
          /*    err=edit(outf,"zz,zz9.99-",nbr);  0                  0.00  */
          /*                                      123                1.23  */
          /*                                      562983         5,629.83  */
          /*                                      -4675             46.75- */
          /*    err=edit(outf,"$,$$$.$$",nbr);    0                        */
          /*                                      123               $1.23  */
          /*                                      562983        $5,629.83  */
          /*                                      -4675            $46.75  */
          /*    err=edit(outf,"***.**",nbr);      0                        */
          /*                                      123              **1.23  */
          /*                                      562983   err= 5          */
          /*                                      -4675            *46.75  */
          /*    err=edit(outf,"--,--9.99",nbr);   0                  0.00  */
          /*                                      123                1.23  */
          /*                                      562983         5,629.83  */
          /*                                      -46.75           -46.75  */
          /*                                                               */
          /* Author R Thornton April 1989                                  */
          /*****************************************************************/
          /**/
          int edit(char output[], char pattern[], char number[]]) {
            char float_val = ' ';
            char fill_val = ' ';
            char sign_val = ' ';
            int signif = 0;
            int psize = 0;
            int pdig = 0;
            int plast = 0;
            int ndig = 0;
            char nbr[33];
            char ch= ' ';
            int po=0;
            int n=0;

          /*****************************************************************/
          /* examine pattern: set up float and fill, count size and digits */
          /*****************************************************************/
            if(((ch=pattern[00]) == '$') || (ch == '*') || (ch == '-'))
              float_val = ch;
            if(ch == '*')
              fill_val = '*';
            while((ch=pattern[po]) != '\0') {
              if((ch == 'z') || (ch == '9')) {
                pdig++;
                plast = po;
              }
              psize++;
              po++;
            }
            if(psize > 63)
              return(1);
            if(pdig > 32)
              return(2);
            if(!pdig)
              return(3);
          /*****************************************************************/
          /* examine number: set up sign, count digits, check numeric.     */
          /* set error if more digits than pattern, move right justified   */
          /*****************************************************************/
            if(number[0] == '-') {
              sign_val = '-';
              n = 1;
            }
            while((ch=number[n]) != '\0') {
              if((ch < '0') || (ch > '9'))
                return(4);
              ndig++;
              n++;
            }
            if(ndig > pdig)
              return(5);
            for(po=0;po<(pdig-ndig);po++)
              nbr[po] = '0';
            if(sign_val == ' ')
              n = 0;
            else
              n=1;
            for(;po<pdig;po++,n++)
              nbr[po] = number[n];
          /*****************************************************************/
          /* scan across the pattern, setting the corresponding output     */
          /* byte from pattern, fill, or amt depending on the pattern      */
          /* character and state of significance.                          */
          /*****************************************************************/
            if(float_val != ' ') {
              output[0] = ' ';
              po = 1;
            }
            else
              po = 0;
            n = 0;
            while((po <= plast)) {
              ch = pattern[po];
              if(ch == 'z') {
                if(signif) {
                  output[po] = nbr[n];
                  n++;
                }
                else {
                  if(nbr[n] == '0') {
                    output[po] = fill_val;
                    n++;
                  }
                  else {
                    output[po] = nbr[n];
                    signif = -1;
                    n++;
                    if(float_val == ' ')
                      ;
                    else
                      if((float_val == '$') || (sign_val == '-'))
                        output[po-1] = float_val;
                  }
                }
              }
              else if(ch == '9') {
                output[po] = nbr[n];
                if(!signif) {
                  signif = -1;
                  if(float_val == ' ')
                    ;
                  else
                    if((float_val == '$') || (sign_val == '-'))
                      output[po-1] = float_val;
                }
                n++;
              }
              else {
                if(signif)
                  output[po] = pattern[po];
                else
                  output[po] = fill_val;
              }
              po++;
            }
            while((ch=pattern[po]) != '\0') {
              if(sign_val == ' ')
                output[po++] = fill_val;
              else
                output[po++] = pattern[po];
            }
            return(0);
          }
          /*****************************************************************/
          /* termination: close files                                      */
          /*****************************************************************/
          void terminate() {
            sprintf(number,"%ld",incount); /* cnvrt input file cnt to ascii*/
            edit(cntline, "zz,zzz,zz9", number); /* edit number to cntline */
            strcpy(cntline+10," input records read\n"); /* msg to count lin*/
            writecnt();                    /* write count line             */
            sprintf(number,"%ld",tlrcnt);  /* convert trailer cnt to ascii */
            edit(cntline, "zz,zzz,zz9", number); /* edit number to cntline */
            strcpy(cntline+10," trailer record count\n"); /* msg to cnt lin*/
            writecnt();                    /* write count line             */
            sprintf(number,"%ld",outcount); /* cnvrt output count to ascii */
            edit(cntline, "zz,zzz,zz9", number); /* edit number to cntline */
            strcpy(cntline+10," output records written\n"); /* msg to  line*/
            writecnt();                    /* write count line             */
            sprintf(number,"%ld",errcnt);  /* cnvrt error record count     */
            edit(cntline, "zz,zzz,zz9", number); /* edit number to cntline */
            strcpy(cntline+10," error records written\n"); /* msg to line  */
            writecnt();                    /* write count line             */
            if(incount == tlrcnt)          /* if input count = trailer cnt */
                  strcpy(cntline, "Input and trailer counts match\n");
            else                           /* if not,                      */
                  strcpy(cntline,"ERROR==> Input and trailer counts do not match
!! <==ERROR\n");
            writecnt();                    /* write count line             */
            strcpy(errline,cntline);       /* copy message to errline      */
            writeerr();                    /* and write to error log fi    */
            errcnt--;                      /* don't count messages         */
            if(incount != (outcount + errcnt)) {  /* if input = output cnts*/
                     strcpy(cntline,"ERROR==> Input and output counts do not bal
ance!<==ERROR\n");
              writecnt();                    /* write count line           */
              strcpy(errline,cntline);       /* copy message to errline    */
              writeerr();                    /* and write to error log file*/
            }
            fclose(infile);                /* close input provider file    */
            fclose(outfile);               /* close output provider file   */
            fclose(cntfile);               /* close count file             */
            fclose(errfile);               /* close error log file         */
          }
