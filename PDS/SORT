/* PROGRAM-ID:  SORT
          */
/* AUTHOR:  JEFF KEELING
          */
/* DATE WRITTEN: APRIL 1989
          */
/* REMARKS:  The first function, sort_logfile(), reads in a file and sorts the r
ecords    */
/*           on two designated fields.  It gives the record number and the sort
fields    */
/*           to a temporary structure that is dynamically created to contain onl
y as      */
/*           many records as the input file contains.  This program sorts first
on        */
/*           pend_code and then by claim number.  We need only store a record nu
mber      */
/*           and two sort fields (for each record in the input file) in temporar
y memory. */
/*           We then use the values in the temporary structure to read the corre
sponding  */
/*           record in the input file and print this record out to a new sorted
file.     */
/*           We perform these two actions for each record in the temporary struc
ture.     */
/*           The final product is a new file that contains the sorted records of
 the      */
/*           input file.  This function is called by the Approve/Deny/Pend - Exe
cution    */
/*           program.
          */
/*                The sort_summfile() function is the second function and sorts
the       */
/*           summary file on pend code only.  This function is called by the Sta
tistical  */
/*           program.
          */

#include <stdio.h>
         /* library include files */
#include <stdlib.h>
#include <search.h>
#include <memory.h>
#include <string.h>
#include <io.h>

static char logfile_name[] = "c:\\c\\data\\logfile.dat";
         /* exterior file association */
static char sorted_logfile_name[] = "c:\\c\\data\\sort_log.dat";

FILE  *logfile_ptr=NULL, *sorted_logfile_ptr=NULL;
         /* pointers to files */

   struct log_structure
         /* structure for input log file */
   {
      char claim_number[9];
      char subscriber_ID[15];
      char log_year[2];
      char log_month[2];
      char log_day[2];
      char pend_code[2];
      char pend_text[25];
      char MedScreen_status_code[1];
      char MedScreen_reason_code[2];
      char MedScreen_reason_text[25];
      char filler[15];
      char new_line_ch[1];
      char carriage_return[1];
   } logfile;

   struct log_sort_structure
         /* temporary sorting structure */
   {
      int  record_number;
      char pend_code[2];
      char claim_number[9];
   } *log_ptr, *first_log_ptr;

   int zero = 0;


compare(struct log_sort_structure *arg1, struct log_sort_structure *arg2);
         /* prototype of compare() */

FILE * sort_logfile(void)
{
int i;
long number_of_records;
long file_size;
long offset;

   if ( (logfile_ptr = fopen(logfile_name,"rb")) == NULL)
         /* open input log file */
      {
      printf("\nThe log file cannot be opened.  The program is exiting.");
      exit(zero);
      }

   file_size = filelength(fileno(logfile_ptr));
         /* allocate size of temporary structure */
   number_of_records = file_size/sizeof(logfile);
   log_ptr = calloc(number_of_records,sizeof(struct log_sort_structure));
   first_log_ptr = log_ptr;
         /* set pointer to beginning of */
            /* temporary memory buffer */
   for (i=zero; i<number_of_records; i++)
         /* move sort fields from logfile record */
      {
         /* to temporary structure record */
      fread(&logfile,sizeof(logfile),1,logfile_ptr);
      memcpy(log_ptr->pend_code,logfile.pend_code,2);
      memcpy(log_ptr->claim_number,logfile.claim_number,9);
      log_ptr->record_number = i;
      log_ptr++;
      }

   fclose(logfile_ptr);
            /* call sort routine */
   qsort(first_log_ptr,number_of_records,sizeof(struct log_sort_structure),compa
re);

   log_ptr = first_log_ptr;
         /* set pointer to first record of */
            /* temporary structure */
   if ( (logfile_ptr = fopen(logfile_name,"rb")) == NULL)
         /* open input log file */
      {
      printf("\nThe log file cannot be opened.  The program is exiting.");
      exit(zero);
      }
   if ( (sorted_logfile_ptr = fopen(sorted_logfile_name,"w+b")) == NULL)
         /* open new file for sorted records */
      {
      printf("\nThe sorted log file cannot be opened.  The program is exiting.")
;
      exit(zero);
      }
   for (i=zero; i<number_of_records; i++,log_ptr++)
      {
         /* load sorted records to new file */
      offset = log_ptr->record_number * sizeof(logfile);
      if (fseek(logfile_ptr,offset,zero) != zero)

  {
  printf("\nCan't move pointer to specified record.\nThe program is exiting.");
  exit(zero);
  }
      fread(&logfile,sizeof(logfile),1,logfile_ptr);

      fwrite(&logfile,sizeof(logfile),1,sorted_logfile_ptr);
      }
fclose(logfile_ptr);
fclose(sorted_logfile_ptr);

return(sorted_logfile_ptr);
}

compare(struct log_sort_structure *arg1, struct log_sort_structure *arg2)
/* This function compares pend codes first then claim numbers */
/* from two records and returns a code to qsort.              */
{
      return (memicmp(arg1->pend_code,arg2->pend_code,11));
}








/******************** Statistical Sorting ********************************/

static char summfile_name[] = "c:\\c\\data\\summfile.dat";
static char sorted_summfile_name[] = "c:\\c\\data\\sort_sum.dat";

FILE  *summfile_ptr=NULL, *sorted_summfile_ptr=NULL;
         /* pointers to files */

   struct summ_structure
         /* stucture for output summary file */
   {
      char log_year[2];
      char log_month[2];
      char log_day[2];
      char pend_code[2];
      char pend_text[25];
      char approve_totals[7];
      char deny_totals[7];
      char pend_totals[7];
      char new_line_ch[1];
   } summfile;

   struct summ_sort_structure
         /* temporary sorting structure */
   {
      int  record_number;
      char pend_code[2];
   } *summ_ptr, *first_summ_ptr;


compare2(struct summ_sort_structure *arg1, struct summ_sort_structure *arg2);
         /* prototype of copare() */

FILE * sort_summfile(void)
{
int i;
long number_of_records;
long file_size;
long offset;

   if ( (summfile_ptr = fopen(summfile_name,"rt")) == NULL)
         /* open input summary file */
      {
      printf("\nThe summary file cannot be opened.  The program is exiting.");
      exit(zero);
      }
   file_size = filelength(fileno(summfile_ptr));
         /* allocate size of temporary structure */
   number_of_records = file_size/sizeof(summfile);
   summ_ptr = calloc(number_of_records,sizeof(struct summ_sort_structure));
   first_summ_ptr = summ_ptr;
         /* set pointer to beginning of temporary */
            /* memory buffer */
   for (i=zero; i<number_of_records; i++)
         /* move sort fields from summary file record */
      {
         /* to temporary structure record */
      fread(&summfile,sizeof(summfile),1,summfile_ptr);
      memcpy(summ_ptr->pend_code,summfile.pend_code,2);
      summ_ptr->record_number = i;
      summ_ptr++;
      }

   fclose(summfile_ptr);
            /* call sort routine */
   qsort(first_summ_ptr,number_of_records,sizeof(struct summ_sort_structure),com
pare2);

   summ_ptr = first_summ_ptr;
         /* set pointer to first recrd of temporary */
            /* structure */
   if ( (summfile_ptr = fopen(summfile_name,"rt")) == NULL)
         /* open input summary file */
      {
      printf("\nThe summary file cannot be opened.  The program is exiting.");
      exit(zero);
      }
   if ( (sorted_summfile_ptr = fopen(sorted_summfile_name,"w+t")) == NULL)
         /* open new file for sorted records */
      {
      printf("\nThe file for the sorted summary records cannot be opened.");
      printf("\nThe program is exiting.");
      exit(zero);
      }
   for (i=zero; i<number_of_records; i++,summ_ptr++)
      {
         /* load sorted records to new file */
      offset = summ_ptr->record_number * sizeof(summfile);
      if (fseek(summfile_ptr,offset,zero) != zero)
  {
  printf("\nCan't move pointer to specified record.\nThe program is exiting.");
  exit(zero);
  }
      fread(&summfile,sizeof(summfile),1,summfile_ptr);

      fwrite(&summfile,sizeof(summfile),1,sorted_summfile_ptr);
      }
fclose(summfile_ptr);
fclose(sorted_summfile_ptr);

return(sorted_summfile_ptr);
}


compare2(struct summ_sort_structure *arg1, struct summ_sort_structure *arg2)
/* This function compares pend codes first then claim numbers */
/* from two records and returns a code to qsort.              */
{
      return (memicmp(arg1->pend_code,arg2->pend_code,2));
}
