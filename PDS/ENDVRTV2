/**************/
/* endvrtv2.c */
/*****************************************************************/
/* Program to build a control statement stream for Endevor       */
/* retrieves using a hard-coded model which is specialized by a  */
/* set of member names read in from the input1 file. output is   */
/* written to the output1 file. The output dataset can be read   */
/* into an Endevor retrieve job to retrieve a number of elements */
/* at one time via batch job execution.                          */
/* The input1 file is that created by the ENDVDATA program which */
/* provides the environment, system, subsystem, type, and element*/
/* names, which are all used. See program ENDVRTVL for a program */
/* using only element name as input.                             */
/* As written, the output dataset specified in the retrieve state*/
/* ments is BC0THOR.TST.ENDEVOR.ASM. Also, STAGE 2 is hard-coded */
/* and TYPE name is assumed to be 5-bytes long.                  */
/* Author R Thornton Sep 2001.                                   */
/*****************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/*****************************************************************/
/* Global data areas                                             */
/*****************************************************************/
  int MoreRecords = -1;              /* zero at EOF INPUT1 */
  char InRec[80];                    /* record from input1 file */
  char OutRec[6][80] = {
       "RETRIEVE ELEMENT '12345678'             "
                       "                                        ",
       "  FROM ENVIRONMENT '12345678' SYSTEM '12"
                       "345678' SUBSYSTEM '12345678'            ",
       "    TYPE '12345' STAGE 2                "
                       "                                        ",
       "  TO DSNAME 'BC0THOR.TST.ENDEVOR.ASM'   "
                       "                                        ",
       "  OPTIONS CCID 'OPSUPPORT' COMMENTS \"NEE"
                       "D FOR DOCUMENTATION\"                    ",
       "    NO SIGNOUT NOSEARCH  .              "
                       "                                        "};
  FILE *input1,*output1;             /* file pointers */

/*****************************************************************/
/* Function prototypes                                           */
/*****************************************************************/
int main(void);                      /* Executive control routine */
void Initialize(void);               /* Initialization routine */
void Process(void);                  /* Processing routine */
void ReadInput1(void);               /* Reads the INPUT1 file */
void WriteOutput1(void);             /* Writes the OUTPUT1 file */
void Terminate(void);                /* Termination routine */

/*****************************************************************/
/* main() function: executive control                            */
/*****************************************************************/
int main() {
  Initialize();                      /* Initialize for processing */
  while(MoreRecords)                 /* Until INPUT1 is exhausted, */
    Process();                       /*    process records. */
  Terminate();                       /* Terminate processing */
  return(0);
}
/*****************************************************************/
/* Initialize(): Initialization routine. Opens files.            */
/*****************************************************************/
void Initialize(void) {
  input1=fopen("dd:input1","rb,type=record,recfm=fb,lrecl=80");
  if(input1 == NULL) {
    perror("\nCan't open the INPUT1 file");
    exit(8);
  }
  output1=fopen("dd:output1","wb,type=record,recfm=fb,lrecl=80");
  if(output1 == NULL) {
    perror("\nCan't open the OUTPUT1 file");
    exit(8);
  }
}
/*****************************************************************/
/* Process: for each INPUT1 record, write a set of Endevor       */
/* control statements that will cause retrieval of the member    */
/* name given by the input1 file record.                         */
/*****************************************************************/
void Process(void) {
  ReadInput1();              /* Read next INPUT1 record */
  if(!MoreRecords) return;   /* Return if end of file */
  WriteOutput1();            /* write OutRec to output1 file */
}
/*****************************************************************/
/* ReadInput1() reads the next record from the INPUT1 file into  */
/* the inrec area. At end of file, the MoreRecords field is set  */
/* to zero (false).                                              */
/*****************************************************************/
void ReadInput1(void) {
  int InRecLen;

  InRecLen=fread(InRec, 1,  80, input1);
  if(ferror(input1)) {
    perror("\nError (ferror) reading INPUT1 file");
    exit(8);
  }
  if(feof(input1)) {
    MoreRecords = 0;
    return;
  }
  if(InRecLen == 0) {
    perror("\nError (0 read) reading INPUT1 file");
    exit(8);
  }
}
/*****************************************************************/
/* WriteOutput1 moves the element name from the InRec record into*/
/* the OutRec[0] area, the environment, system, and subsystem to */
/* the OutRec[1] area, and the type to the OutRec[2] area, then  */
/* all 6 OutRec[] records are written to the Output1 file.       */
/*****************************************************************/
void WriteOutput1(void) {
  int i;

  memset(&OutRec[0][18], ' ', 9); /* clear member name */
  memset(&OutRec[1][20], ' ', 9); /* clear environment name */
  memset(&OutRec[1][38], ' ', 9); /* clear system name */
  memset(&OutRec[1][59], ' ', 9); /* clear subsystem name */
  memset(&OutRec[2][10], ' ', 6); /* clear type name */

  for(i=0; i<8; i++) {
    if(InRec[i] == ' ') break;
    OutRec[0][i+18] = InRec[i];      /* move a byte of member name */
  }
  OutRec[0][i+18] = '\'';

  for(i=0; i<8; i++) {
    if(InRec[i+21] == ' ') break;
    OutRec[1][i+20] = InRec[i+21];   /* move a byte of environ. name */
  }
  OutRec[1][i+20] = '\'';

  for(i=0; i<8; i++) {
    if(InRec[i+30] == ' ') break;
    OutRec[1][i+38] = InRec[i+30];   /* move a byte of system name */
  }
  OutRec[1][i+38] = '\'';

  for(i=0; i<8; i++) {
    if(InRec[i+39] == ' ') break;
    OutRec[1][i+59] = InRec[i+39];   /* move a byte of subsys name */
  }
  OutRec[1][i+59] = '\'';

  for(i=0; i<8; i++) {
    if(InRec[i+48] == ' ') break;
    OutRec[2][i+10] = InRec[i+48];   /* move a byte of type name */
  }
  OutRec[2][i+10] = '\'';

  for(i=0; i<6; i++) {
    fwrite(OutRec[i], 1,  80, output1);
    if(ferror(output1)) {
      perror("\nError (ferror) writing OUTPUT1 file");
      InRec[8] = '\x00';
      printf("\nMember at failure is %s, record contains: ",InRec);
      OutRec[i][80] == '\x00';
      printf("\n%s",OutRec[i]);
      exit(8);
    }
  }
}
/*****************************************************************/
/* Terminate() closes the files and prepares for termination.    */
/*****************************************************************/
void Terminate(void) {
  fclose(input1);
  fclose(output1);
}
