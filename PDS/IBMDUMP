/*********************************************************************/
/* Reads an IBM SYSUDUMP that is created by a //SYSUDUMP DD or by    */
/* issuing PRINT DATASET - PRINT - PRINT CLOSE from an SDSF job      */
/* that contains an IBM dump.                                        */
/* 1. Read through the input file until the ASCB: literal is found.  */
/*    If not found, abend with a message.                            */
/*                                                                   */
/* Author R Thornton June, 2001                                      */
/*********************************************************************/
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
/*********************************************************************/
/* Global data areas                                                 */
/*********************************************************************/
FILE *input1, *output1;  /*file pointers*/
char Record Ý121¨;
int n1=1, n2=0, n3=0, n4=0, n5=0, n6=0, n7=0, n8=0; /* output counts */
int count=0;                 /* input1 record count */
/*********************************************************************/
/* Function prototypes                                               */
/*********************************************************************/
int  main(void);             /* executive control routine */
void AnalyzeDump(void);      /* analyze the dump data */
void PrintResult(void);      /* print results of analysis */
void Initialize(void);       /* Initialize for porcessing */
void Terminate(void);        /* termination routine */
/*********************************************************************/
/* Executive control routine                                         */
/*********************************************************************/
int  main(void) {            /* executive control routine */
  int more_records = 1;      /* =0 at eof input1 */
  Initialize();              /* Initialize for processing */
  while(more_records)        /* Analyze the dump data until */
    AnalyzeDump();           /*  the dump file is exhausted. */
  PrintResult();             /* Print results of analysis. */
  Terminate();               /* Finished, terminate processing */
  return(0);                 /* Return control to caller */
}
/*********************************************************************/
/* Analyze content of the dump file                                  */
/*********************************************************************/
void AnalyzeDump(void) {
    more_records = fread(&record, 15, 1, input1); /* read record */
    if(ferror(input1)) {
      printf("\nAt record number %d ",count);
      perror("Read error on input1");
      exit(8);
    }
    if(!more_records) break;   /* quit at end of file */
    count++;                   /* count input records */
    memcpy(&work, record.digit[0], 2); /* copy 1st field */
    work[2] = '\x0';           /* make it a string */
    d1 = atoi(work);           /* convert it to int */
    memcpy(&work, record.digit[1], 2); /* copy 2nd field */
    work[2] = '\x0';           /* make it a string */
    d2 = atoi(work);           /* convert it to int */
    memcpy(&work, record.digit[2], 2); /* copy 3rd field */
    work[2] = '\x0';           /* make it a string */
    d3 = atoi(work);           /* convert it to int */
    memcpy(&work, record.digit[3], 2); /* copy 4th field */
    work[2] = '\x0';           /* make it a string */
    d4 = atoi(work);           /* convert it to int */
    if(((d2 * d4) % d3) == 0)  /* formula 1 division ok? */
      if((d1 - d2 / d3 * d4) == 7) {  /* try formula1, if true: */
        fwrite(&record, 1, sizeof(record), output1); /* write record */
        n1++;                      /* count combinations */
      }
    if((d3 % d4) == 0)          /* formula 2 division ok? */
      if((d1 - d2 - d3 / d4) == 4) {  /* try formula2, if true: */
        fwrite(&record, 1, sizeof(record), output2); /* write record */
        n2++;                      /* count combinations */
    }
    if((d1 + d2 + d3 * d4) == 174) {  /* try formula3, if true: */
      fwrite(&record, 1, sizeof(record), output3); /* write record */
      n3++;                      /* count combinations */
    }
    if((d1 + d2 + d3 + d4) == 28) {  /* try formula4, if true: */
      fwrite(&record, 1, sizeof(record), output4); /* write record */
      n4++;                      /* count combinations */
    }
    if((d1 - d2 + d3 * d4) == 2) {  /* try formula5, if true: */
      fwrite(&record, 1, sizeof(record), output5); /* write record */
      n5++;                      /* count combinations */
    }
    if((d1 - d2 + d3 * d4) == 181) {  /* try formula6, if true: */
      fwrite(&record, 1, sizeof(record), output6); /* write record */
      n6++;                      /* count combinations */
    }
    if((d1 + d2 * d3 - d4) == 105) {  /* try formula7, if true: */
      fwrite(&record, 1, sizeof(record), output7); /* write record */
      n7++;                      /* count combinations */
    }
    if((d1 + d2 + d3 * d4) == 89) {  /* try formula8, if true: */
      fwrite(&record, 1, sizeof(record), output8); /* write record */
      n8++;                      /* count combinations */
    }
  }
}
/*********************************************************************/
/* Terminate processing: print final output counts and close files.  */
/*********************************************************************/
void Terminate(void) {
  printf("%d output1 combinations found.\n",n1);
  printf("%d output2 combinations found.\n",n2);
  printf("%d output3 combinations found.\n",n3);
  printf("%d output4 combinations found.\n",n4);
  printf("%d output5 combinations found.\n",n5);
  printf("%d output6 combinations found.\n",n6);
  printf("%d output7 combinations found.\n",n7);
  printf("%d output8 combinations found.\n",n8);
  fclose(output1);
  fclose(output1);
  fclose(output2);
  fclose(output3);
  fclose(output4);
  fclose(output5);
  fclose(output6);
  fclose(output7);
  fclose(output8);
  exit(0);
}
/*********************************************************************/
/*  Initialize for processing: Open output file.                     */
/*********************************************************************/
void Initialize(void) {
  input1 = (fopen("dd:INPUT1","rb,type=record,recfm=FB,lrecl=15"));
  if(input1 == NULL) {
    perror("Error opening file INPUT1: ");
    exit(8);
  }
  output1 = (fopen("dd:OUTPUT1","wb,type=record,recfm=FB,lrecl=15"));
  if(output1 == NULL) {
    perror("Error opening file OUTPUT1: ");
    exit(8);
  }
  output2 = (fopen("dd:OUTPUT2","wb,type=record,recfm=FB,lrecl=15"));
  if(output2 == NULL) {
    perror("Error opening file OUTPUT2: ");
    exit(8);
  }
  output3 = (fopen("dd:OUTPUT3","wb,type=record,recfm=FB,lrecl=15"));
  if(output3 == NULL) {
    perror("Error opening file OUTPUT3: ");
    exit(8);
  }
  output4 = (fopen("dd:OUTPUT4","wb,type=record,recfm=FB,lrecl=15"));
  if(output4 == NULL) {
    perror("Error opening file OUTPUT4: ");
    exit(8);
  }
  output5 = (fopen("dd:OUTPUT5","wb,type=record,recfm=FB,lrecl=15"));
  if(output5 == NULL) {
    perror("Error opening file OUTPUT5: ");
    exit(8);
  }
  output6 = (fopen("dd:OUTPUT6","wb,type=record,recfm=FB,lrecl=15"));
  if(output6 == NULL) {
    perror("Error opening file OUTPUT6: ");
    exit(8);
  }
  output7 = (fopen("dd:OUTPUT7","wb,type=record,recfm=FB,lrecl=15"));
  if(output7 == NULL) {
    perror("Error opening file OUTPUT7: ");
    exit(8);
  }
  output8 = (fopen("dd:OUTPUT8","wb,type=record,recfm=FB,lrecl=15"));
  if(output8 == NULL) {
    perror("Error opening file OUTPUT8: ");
    exit(8);
  }
}
