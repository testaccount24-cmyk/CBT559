/**************/
/* csecmch2.c */
/*********************************************************************/
/* Reads the UNMCHEL and UNMCHCS files output from program CSECTMCH  */
/* after sorting the UNMCHCS file in member name order. This program */
/* attempts to match the unmatched endevor element names in the      */
/* UNMCHEL file to the member names in the UNMCHCS file. Only those  */
/* UNMCHCS records are considered which have only a single member per*/
/* csect. all input records are written to the element and csect     */
/* files, respectively. Several tests are made on each record pair:  */
/*  test0: (UNMCHCS file only) if there are multiple member segments */
/*         the record is written with compare code = 0 and the next  */
/*         record is read.                                           */
/*  test1: Element name in the UNMCHEL record is compared to the     */
/*         record having the lower value is written with compare     */
/*         code set to 1 and the next record in that file is read.   */
/*  test2: The element name in the UNMCHEL record is compared byte-  */
/*         by byte with the csect name in the UNMCHCS record. If they*/
/*         differ my one byte or less, the t2 indicator is set true. */
/*  test3: The language field is compared between the UNMCHEL and    */
/*         UNMCHCS records. If equal, the t3 indicator is set true.  */
/* All output records will contain a compare code in position 9,     */
/* containing the value:                                             */
/* 0 = This CSECT record contains multiple member segments.          */
/* 1 = This record failed test1. No further tests were made.         */
/* 2 = This record passed test1, but failed tests 2 and 3.           */
/* 3 = This record passed test1 and test3, but failed test2.         */
/* 4 = This record passed test1 and test2, but failed test3.         */
/* 5 = This record passed all three tests.                           */
/*                                                                   */
/* Author R Thornton Nov 2000                                        */
/*********************************************************************/
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
/*********************************************************************/
/* Function Prototypes                                               */
/*********************************************************************/
int main(void);                /* Executive control routine */
void Initialization(void);     /* Initialization routine */
void Process(void);            /* Process control routine */
void Test1(void);              /* Routine to apply test1 */
void Test2(void);              /* Routine to apply test2 */
void Test3(void);              /* Routine to apply test3 */
char SetCode(void);            /* Routine to set compare code */
int  ReadElement(void);        /* Routine to read the UNMCHEL file */
int  ReadCsect(void);          /* Routine to read the UNMCHCS file */
void WriteElement(void);       /* Routine to write the ELEMENT file */
void WriteCsect(void);         /* Routine to write the CSECT file */
void Terminate(void);          /* Termination routine */
/*********************************************************************/
/* Global data areas and file descriptions                           */
/*********************************************************************/
FILE *Unmchel, *Unmchcs, *Element, *Csect; /* define the file ptrs */

struct {                     /* UNMCHCS/CSECT data record */
  char CCsect[8];             /* csect name */
  char CMatch;                /* match code */
  char CLang[3];              /* language: COB, ASM, ??? */
  char CDsnInd[3];            /* dsname indicator: OUT, IMS, CIC, HCS
                                  to indicate the endevor load library
                                  containing the member */
  char CMember[8];            /* member name */
  char CRest[27962];          /* remaining DsnInd/Member pairs */
} CsectRecord;

struct {                     /* UNMCHEL/ELEMENT data record */
  char EElement[8];           /* Element name */
  char ECode;                 /* Compare code */
  char ELang[11];             /* Language descriptor */
  char EFiller2;
  char EEnvironment[8];       /* Environment name */
  char EFiller3;
  char ESystem[8];            /* System name */
  char EFiller4;
  char ESSname[8];            /* SubSystem name */
  char EFiller5;
  char EType[5];              /* Endevor type name */
  char EFiller6;
  char EPrcGrpName[8];        /* Endevor processor group name */
  char EFiller7;
  char EPrcName[8];           /* Endevor Processor name */
  char EFiller8[9];
} ElementRecord;

int t1, t2, t3;                /* test result indicators */
int CsectLeng = 80;            /* LRECL for current CSECT file record*/
int CsectMax = 27988;          /* max LRECL for CSECT file */
int ElementLeng = 80;          /* LRECL for ELEMENT file */

/*********************************************************************/
/* main(): this is the executive control routine                     */
/*********************************************************************/
int main(void) {               /* Executive control routine */
  Initialization();              /* initialize for processing */
  while(CsectLeng || ElementLeng) {
    Process();                   /* process the files */
  }
  Terminate();                   /* terminate processing */
  exit(0);                       /* relinquish control */
}
/*********************************************************************/
/*                                                                   */
/*********************************************************************/
void Initialization(void) {    /* Initialization routine */
  Unmchcs =(fopen("dd:UNMCHCS","rb,type=record,recfm=VB,lrecl=27988"));
  if(ferror(Unmchcs)) {
    perror("Unable to open UNMCHCS");
    exit(8);
  }
  Unmchel =(fopen("dd:UNMCHEL","rb,type=record,recfm=FB,lrecl=80"));
  if(ferror(Unmchel)) {
    perror("Unable to open UNMCHCS");
    exit(8);
  }
  Csect =(fopen("dd:CSECT","wb,type=record,recfm=VB,lrecl=27988"));
  if(ferror(Csect)) {
    perror("Unable to open CSECT");
    exit(8);
  }
  Element =(fopen("dd:ELEMENT","wb,type=record,recfm=FB,lrecl=80"));
  if(ferror(Element)) {
    perror("Unable to open ELEMENT");
    exit(8);
  }
  ReadCsect();                /* Read first UNMCHCS record */
  ReadElement();              /* Read first UNMCHEL record */
}
/*********************************************************************/
/* Process: match records on element name vs member name and write   */
/* output records with appropriate match codes in positions 9.       */
/*********************************************************************/
void Process(void) {           /* Process control routine */
  if((CsectLeng == 0) && (ElementLeng == 0)) goto Exit_pr;
  if(CsectLeng > 26) {
    CsectRecord.CMatch = '0';    /* set multiple member indicator */
    WriteCsect();                /* write the CSECT record */
    ReadCsect();                 /* Read next CSECT record */
    goto Exit_pr;                /* go return */
  }
  Test1();                       /* compare member to element */
  if(t1 == 0)  {                 /* member = element? */
    Test2();                     /* yes, go compare csect:element */
    Test3();                     /* go compare languages */
    ElementRecord.EElement[8] = SetCode(); /* set match code in rec */
    CsectRecord.CMatch = ElementRecord.EElement[8]; /* copy code */
    WriteCsect();                /* write the CSECT record */
    WriteElement();              /* write the ELEMENT record */
    ReadCsect();                 /* read UNMCHCS record */
    ReadElement();               /* read UNMCHEL record */
    goto Exit_pr;
  }
  else   {
    if(t1 < 0) {                   /* is element name low? */
      ElementRecord.EElement[8] = '1'; /* show member != element */
      WriteElement();              /* write the ELEMENT record */
      ReadElement();               /* read UNMCHEL record */
    }
    else {
      CsectRecord.CMatch = '1';    /* show member != element */
      WriteCsect();                /* write the CSECT record */
      ReadCsect();                 /* read UNMCHCS record */
    }
  }
Exit_pr:
  return;
}
/*********************************************************************/
/* Apply test1: compare Element name to Member name;                 */
/*********************************************************************/
void Test1(void) {             /* Routine to apply test1 */
  t1 = memcmp(ElementRecord.EElement, CsectRecord.CMember, 8);
  return;                      /* return */
}
/*********************************************************************/
/* Apply test2: compare csect name to element name. If they differ   */
/* by only 1 byte, set t2 true, else false.                          */
/*********************************************************************/
void Test2(void) {             /* Routine to apply test2 */
int i,j,k=0,lc,le;
  t2 = -1;                     /* assume t2 true */
  if(CsectRecord.CCsect[0] != ElementRecord.EElement[0]) {
    t2 = 0;                    /* 1st chars differ, t2 false */
    return;
  }
  for(lc=0;lc<8;lc++)          /* count Csect name size */
    if(CsectRecord.CCsect[lc] == ' ')
      break;
  for(le=0;le<8;le++)          /* count Element name size */
    if(ElementRecord.EElement[le] == ' ')
      break;
  i = le - lc;                 /* compute length difference */
  if(i < 0)
    i = lc - le;
  if(i > 1)  {                 /* lengths differ > 1, t2 false */
    t2 = 0;
    return;
  }
  for(i=1,j=1;i<8;i++,j++) {
    if(j > 7)  break;
    if(CsectRecord.CCsect[i] == ElementRecord.EElement[j])
      continue;
    else {
      k++;
      if(k > 1) {
        t2 = 0;
        return;
      }
      if(le == lc) {
        continue;
      }
      else {
        if(le > lc) {
          i--;
          continue;
        }
        else {
          j--;
          continue;
        }
      }
    }
  }
}
/*********************************************************************/
/* Test3 compares the languages between the records.                 */
/*********************************************************************/
void Test3(void) {             /* Routine to apply test3 */
  if(CsectRecord.CLang[0] == ElementRecord.EType[0])
    t3 = 1;                    /* Same language, set to true */
  else
    t3 = 0;                    /* Unequal, set false */
}
/*********************************************************************/
/* Return the record match code based on the three test results.     */
/*********************************************************************/
char SetCode(void) {           /* Routine to set compare code */
  if(t1 == 0) {
    if(t2 && t3)  {
      return('5');             /* t1, t2, t3 all true */
    }
    else   {
      if(t2) {
        return('4');          /* t1 and t2 true */
      }
      else  {
        if(t3)   {
          return('3');        /* t1 and t3 true */
        }
        else {
          return('2');        /* only t1 true */
        }
      }
    }
  }
  else  {
    return('1');              /* t1 false */
  }
}
/*********************************************************************/
/* Read next record from the ELEMENT file                            */
/*********************************************************************/
int  ReadElement(void) {       /* Routine to read the UNMCHEL file */
  int rc;
  rc = fread(&ElementRecord, 1, 80, Unmchel); /* Read */
  if(ferror(Unmchel)) {
    perror("Error reading UNMCHEL file");
    exit(8);
  }
  if(feof(Unmchel)) {             /* test for end of file */
    rc = 0;
    ElementRecord.EElement[0] = '\xFF'; /* setelement name high */
  }
  ElementLeng = rc;                /* set Element record length */
  return(rc);
}
/*********************************************************************/
/* Read next record from the UNMCHCS file                            */
/*********************************************************************/
int  ReadCsect(void)  {        /* Routine to read the UNMCHCS file */
int rc;
  rc = fread(&CsectRecord, 1, CsectMax, Unmchcs); /* Read */
  if(ferror(Unmchcs)) {
    perror("Error reading UNMCHCS file");
    exit(8);
  }
  if(feof(Unmchcs)) {             /* test for end of file */
    rc = 0;
    CsectRecord.CCsect[0] = '\xFF'; /* set csect name high */
    CsectRecord.CMember[0] = '\xFF'; /* set member name high */
  }
  CsectLeng = rc;                  /* set Csect record length */
  return(rc);
}
/*********************************************************************/
/* Write current record to the ELEMENT file                          */
/*********************************************************************/
void WriteElement(void) {      /* Routine to write the ELEMENT file */
  fwrite(&ElementRecord, 1, ElementLeng, Element); /* Write element */
  if(ferror(Element)) {
    perror("Error writing to the ELEMENT file");
    exit(8);
  }
  return;
}
/*********************************************************************/
/* Write currect record to the CSECT file                            */
/*********************************************************************/
void WriteCsect(void) {        /* Routine to write the CSECT file */
  fwrite(&CsectRecord, 1, CsectLeng, Csect); /* write CSECT file rec */
  if(ferror(Element)) {
    perror("Error writing to the CSECT file");
    exit(8);
  }
  return;
}
/*********************************************************************/
/* Termination routine: close files and prepare to relinquish control*/
/*********************************************************************/
void Terminate(void) {         /* Termination routine */
  fclose(Unmchel);               /* Close UNMCHEL file */
  fclose(Unmchcs);               /* Close UNMCHCS file */
  fclose(Csect);                /* Close CSECT file */
  fclose(Element);              /* Close ELEMENT file */
  return;
}
