/* following example program for AIX uses the extended curses library */
/* (libcur.a) to create a series of displays on the screen            */
#include <cur00.h>
#include <signal.h>

#define NCOLS 80
#define NLINES 24
#define MAXPATTERNS 11

struct locs {
 char y, x;
}

typedef struct locs LOCS;

LOCS layout[NCOLS * NLINES]; /* current board layout */

int pattern,                   /* current pattern number */
 numstars;                  /* number of stars in ptern */

main() {

 char *getenv();
 int die();

 srand(getpid());          /* initialize random sequence */
 initscr();
 signal(SIGINT,die);
 noecho();
 leaveok(stdscr,TRUE);
 scrollok(stdscr,FALSE);

 for(;;) {
  makeboard();           /* make the board setup */
  puton('*');            /* put on '*'s */
  system("sleep 2");
  erase();
  refresh();
 }
}
/*********************************************************************/
/* On program exit, move the cursor to the lower left corner by      */
/* direct addressing, since current location is not certain.         */
/* We say we used to be at the upper right corner to obtain absolute */
/* addressing.                                                       */
/*********************************************************************/
die() {
 signal(SIGINT,SIG_IGN);
 mvcur(LINES/2, COLS/2, 0, 0);
 wclear(curscr);
 wrefresh(curscr);
 endwin();
 exit(0);
}
/*********************************************************************/
/* Make the current board setup. It picks a random pattern and calls */
/* ison() to determine if the character is on that pattern or not.   */
/*********************************************************************/
makeboard() {
 register int y, x;
 register LOCS *lp;

 pattern = rand() % MAXPATTERNS;
 lp = layout;
 for(y=0; y<NLINES; y++) {
  for(x=0; x<NCOLS; x++) {
   if(ison(y, x)) {
    lp->y = y;
    lp++->x = x;
   }
  }
 }
 numstars = lp - layout;
}

/*********************************************************************/
/* Return TRUE if (y, x) is on the current pattern.                  */
/*********************************************************************/
ison(y, x)
 register int y, x;
{
 switch(pattern) {
  case 0:        /* Alternating lines */
   return !(y & 01);
  case 1:        /* Box */
   if(y<3 || y >= NLINES - 3)
    return TRUE;
   return(x<4 || x >= NCOLS - 4);
  case 2:        /* Cross */
   return((x + y) & 01);
  case 3:        /* Bar across center */
   return(y >= 9 && y <= 15);
  case 4:        /* Alternating columns */
   return !(x & 02);
  case 5:        /* Bar down center */
   return(x >= 36 && x <= 44);
  case 6:        /* Bar across and down center */
   return((y >= 9 && y <= 15) || (x >= 37 && x <= 43));
  case 7:        /* Bar across and down center, in a box */
   if(y < 3 || y >= NLINES - 3)
    return TRUE;
   if(x < 4 || x >= NCOLS - 4)
    return TRUE;
   return((y >= 10 && y <= 14) || (x >= 36 && x <= 44));
  case 8:        /* Asterisk */
   if(abs(x - y) <= 2 || abs(NLINES - (x + y)) <= 2)
    return TRUE;
   if(abs((NLINES/2) - x) <= 2)
    return TRUE;
   return(abs((NLINES/2) - y) <= 1 && x <= NLINES);
  case 9:        /* Ellipse */
   return((
     ((float)((x-40) * (x-40))) / 1521 +
     ((float) ((y-12) * (y-12))) / 121
       ) <= 1
      );
  case 10:      /* Circle */
   return ((
      ((float)((x-28) * (x-28))) / 729 +
      ((float) ((y-12) * (y-12))) / 121
     ) <= 1
       );
 }
}

puton(ch)
register char ch;
{
 register LOCS *lp;
 register LOCS *end;
 LOCS temp;
 register int r;

 end = &layout[numstars];
 for(lp = layout; lp < end; lp++) {
  r = rand() % numstars;
  temp = *lp;
  *lp = layout[r];
  layout[r] = temp;
 }
 for(lp = layout; lp < end; lp++) {
  mvaddch(lp->y, lp->x, ch);
  refresh();
 }
}
