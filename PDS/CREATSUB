                    /*******************************************************/
                    /*                     **** creatsub.c ****            */
                    /*                                                     */
                    /* File purification program for the subscriber file as*/
                    /* received from the mainframe via JES2 RJE. Form feed */
                    /* characters are removed. Each data record is checked */
                    /* to insure it contains a 9-digit subscriber number   */
                    /* followed by 6 spaces, a 4-digit gate number, a      */
                    /* single character A, and an ending new-line          */
                    /* character. The last record in the file is a trailer */
                    /* record that begins with uppercase TRAILER followed  */
                    /* by the file record count. The trailer record is     */
                    /* written to the subcnt file and the count is used to */
                    /* validate the number of records read from the input  */
                    /* file. All good subscriber records are written to the*/
                    /* new subscriber file, while error records are written*/
                    /* to the error file.                                  */
                    /* Author R Thornton February 1994                     */
                    /*******************************************************/
                    #include <stdio.h>
                    #include <stdlib.h>
                    #include <time.h>
                    #include <ctype.h>

                                         /* function prototypes */

                    void initialize(int argc, char *argv[]]); /* initialize*/
                    void mainline(void);         /* mainline               */
                    void terminate(void);        /* termination            */
                    void read_a_record(void);    /* read next record       */
                    void writerec(void);         /* write record to output */
                    void writecnt(void);         /* write to counts file   */
                    void writeerr(void);         /* write error records    */
                    void trailrecd(void);        /* process trailer record */
                    int edit(char output[], char pattern[], char number[]);

                    FILE *infile, *outfile, *cntfile, *errfile; /*file ptrs*/
                    char innam[81];              /* input file name        */
                    char *inptr, *scan;          /* input record pointer   */
                    char outnam[81];             /* output file name       */
                    char cntnam[81];             /* count file name        */
                    char errnam[81];             /* error file name        */

                    char inrecord[256];          /* input file record area */
                    char outrecord[256];         /* output file record area*/
                    char cntline[256];           /* count file buffer      */
                    char errline[256];           /* error file buffer      */
                    char hold_record[256];       /* temporary hold area    */

                    int i;                       /* general purpose int    */
                    int goodrec;                 /* valid record indicator */
                    char number[32];             /* ascii numbers for edit */
                    int morerecs = -1;           /* end-of-file switch     */
                    int record_waiting = 0;      /* record waiting switch  */
                    long incount = 0;            /* input record counter   */
                    long outcount = 0;           /* output record counter  */
                    long errcnt = 0;             /* error record counter   */
                    long tlrcnt = 0;             /* trailer record count   */
                    int recdlen;                 /* input record length    */
                    struct tm *t;                /* pointer to time struct */
                    time_t seconds;              /* current timer value    */

                    void main(int argc, char *argv[]) {
                      initialize(argc, argv);    /* open files             */
                      while(morerecs)            /* perform mainline until */
                        mainline();              /* no more records        */
                      terminate();               /* close files            */
                      exit(0);                   /* quit                   */
                    }
                    /*******************************************************/
                    /* mainline function: process input file until eof.    */
                    /*******************************************************/
                    void mainline(void) {
                      goodrec = -1;              /* set invalid record sw  */
                      if((*inptr) == '\f')       /* 1st byte is formfeed?  */
                      inptr++;                   /*   yes, step past it    */
                      if((*inptr) == 'T')        /* this is trailer record?*/
                        trailrecd();             /*   yes, go process it   */
                      else {                     /* otherwise              */
                        recdlen = strlen(inptr); /*   input record length  */
                        if(recdlen == 21)        /*   if 21 bytes long     */
                          goodrec = 0;           /*    indicate good record*/
                        else
                          if((recdlen == 22) && (inptr[20] == '\r')) /*good*/
                            goodrec = 0;         /* if 22 bytes with \r\n  */

                        if(goodrec) {            /* if good record:        */
                          scan = inptr;          /*   set scan ptr to start*/
                          for(i=0; i<9; i++,scan++) { /* ck 9 dec digits   */
                            if(isdigit(*scan))   /* if digit found:        */
                              ;                  /*  keep checking         */
                            else                 /* if non-numeric found:  */
                              break;             /*      quit checking     */
                          }
                        }
                        if(i != 9)               /* if all are not numerics*/
                          goodrec = 0;           /*     indicate bad record*/
                        if(goodrec) {
                          for(i=0; i<6; i++,scan++) { /*   ck for 6 blanks */
                            if((*scan) == ' ')   /*     if blank  found    */
                              ;                  /*       keep checking    */
                            else                 /*  but if non-blank found*/
                              break;             /*       quit checking    */
                          }
                        }
                        if(i != 6)               /*  if all were not blanks*/
                          goodrec = 0;           /*     indicate bad record*/
                        if(goodrec) {
                          for(i=0; i<4; i++,scan++) { /*   check for 4 decimal d
igits */
                            if(isdigit(*scan))   /*     if digit found     */
                              ;                  /*       keep checking    */
                            else                 /*       non-numeric:     */
                              break;             /*         quit checking  */
                          }
                        }
                        if(i != 4)               /* if all are not numerics*/
                          goodrec = 0;           /*     indicate bad record*/
                        if((*scan) != 'A')       /* if final char not an A */
                          goodrec = 0;           /*     indicate bad record*/
                        if(goodrec)              /* if good record         */
                          writerec();            /*   write good output    */
                        else                     /*    otherwise           */
                          writeerr();            /*      write to error    */
                      }
                      recdlen = 0;               /* clear for next read    */
                      while(!recdlen && morerecs) /* read next input record*/
                      read_a_record();
                    }
                    /*******************************************************/
                    /* initialization: open files, read first input record.*/
                    /*******************************************************/
                    void initialize(int argc, char *argv[]) {
                      if(argc == 5) {            /* if 5 parms on cmd line */
                        strcpy(&innam,argv[1]); /* 1) input file na    me  */
                        strcpy(&outnam,argv[2])); /* 2) output file n  ame */
                        strcpy(&cntnam,argv[3])); /* 3) count file na  me  */
                        strcpy(&errnam,argv[4]); } /* 4) error file    name*/
                      else {                     /* otherwise error        */
                        printf("\nUsage is: ");  /*   show usage example   */
                        printf("\ncreatsub old_sub_file new_sub_file counts_file
 error_file\n");
                        exit(1);                 /*   and exit abnormally  */
                      }
                      if((infile=fopen(innam,"rb")) == NULL) {   /* open in*/
                        printf("Can't open file %s.\n",innam); /* error    */
                        exit(1);                 /* and exit abnormally    */
                      }
                      if((outfile=fopen(outnam,"wb")) == NULL) { /*open out*/
                        printf("Can't open file %s.\n",outnam); /* error   */
                        exit(1);                 /* and exit abnormally    */
                      }
                      if((cntfile=fopen(cntnam,"w"))==NULL) { /* open count*/
                        printf("\nCan't open the counts file.\n"); /* error*/
                        exit(1);                 /* exit abnormally        */
                      }
                      if((errfile=fopen(errnam,"w"))==NULL) { /* open error*/
                          printf("\nCan't open the error file.\n"); /*error*/
                  exit(1); }                     /* and exit abnormally    */
            timezone = 5 * 60 * 60;              /* set local e.s.t time   */
            daylight = -1;                       /* indicate daylit sav tim*/
            time(&seconds);                      /* time in secs           */
            t = localtime(&seconds);             /* local time to tm struct*/
            sprintf(cntline,"%2d/%2d/%2d",((t->tm_mon)+1),t->tm_mday,t->tm_year)
;
            cntline[8] = '\n';                   /* ending nl to count line*/
            cntline[9] = '\0';                   /* count line ending null */
            writecnt();                          /* date to count file     */
            strcpy(inrecord,cntline);            /* date for error log file*/
            writeerr();                          /* write date to log file */
            errcnt--;                            /* -1 for date header     */
            while(!recdlen && morerecs)          /* read next input record */
                  read_a_record();
          }
          /*****************************************************************/
          /* process the trailer record.                                   */
          /*****************************************************************/
          void trailrecd() {
            if(memcmp(inptr,"TRAILER",7) == 0) {  /* if TRAILER record     */
                  tlrcnt = atol(inptr+7);        /* convert trailer count  */
                  if(tlrcnt == 0)                /* if invalid count       */
                    writeerr();                  /*   write to error file  */
                  else                           /* otherwise              */
                    incount--;                   /*   -1 for trailer       */
            }
            else                                 /* else if invalid trailer*/
                  writeerr();                    /*  invalid trailer record*/
          }
          /*****************************************************************/
          /* read next input file record. at eof, set morerecs switch.     */
          /*****************************************************************/
          void read_a_record(void) {
                  if(record_waiting) {
                          record_waiting = 0;
                          strcpy(inrecord,hold_record);
                  }
                  else {
                          if((fgets(inrecord,256,infile)) == NULL) {
                                  morerecs = 0;
                                  recdlen = 0;
                          }
                  }
                  if(morerecs) {
                          while((inrecord[0] == '\n') || (inrecord[0] == '\f'))
                                  strcpy(inrecord,inrecord+1);
                          recdlen = strlen(inrecord);
                          if(recdlen > 21)
                                  if(inrecord[20] == '\f') {
                                          record_waiting = -1;
                                          strcpy(hold_record, inrecord+21);
                                          inrecord[20] = '\n';
                                          inrecord[21] = '\0';
                                          recdlen = strlen(inrecord);
                                  }
                  }
                  if(recdlen > 0 ) {
                          incount++;
                          inptr = inrecord;
                  }
          }
          /*****************************************************************/
          /* write a record to the output file                             */
          /*****************************************************************/
          void writerec() {
            memcpy(outrecord,inptr,9);           /* subscriber number out  */
            memcpy(outrecord+9,inptr+15,4);      /* gate number to output  */
            outrecord[13] = '\n';                /* terminate with newline */
            outrecord[14] = '\0';                /* set end of record      */
            fputs(outrecord,outfile);            /* write output record    */
            outcount++;                          /* records written +1     */
          }
          /*****************************************************************/
          /* write a line to the counter file                              */
          /*****************************************************************/
          void writecnt() {
            fputs(cntline,cntfile);              /* write counter file line*/
          }
          /*****************************************************************/
          /* write a record to the error file                              */
          /*****************************************************************/
          void writeerr() {
            if(inrecord[0] == '\x1A')            /* if eof record          */
              incount--;                         /*  don't count it        */
            else {
              i = strlen(inrecord);              /* get input record length*/
              if(inrecord[i-1] == '\n')          /* if nl present          */
                    ;                            /*   do nothing           */
              else {                             /* otherwise              */
                    inrecord[i] = '\n';          /*   add nl to end        */
                    inrecord[i+1] = '\0';        /*   reset ending null    */
              }
              fputs(inrecord,errfile);           /* write output record    */
              errcnt++;                          /* error record count + 1 */
            }
          }
          /*****************************************************************/
          /* The edit function provides numeric report editing, including  */
          /* leading zero suppression, check protection, floating $,       */
          /* leading or trailing minus sign, insertion of commas, decimal  */
          /* points and other non-numeric fields. The first parameter is   */
          /* the address of the edited output, whose size will be the same */
          /* as the pattern. The second parameter is the editing pattern,  */
          /* which must be a true null-terminated string containing the    */
          /* edit pattern. The third is the number to be edited, a null-   */
          /* terminated string containing only digits 0-9 except the first */
          /* position, which is a -, if the number is negative. The pattern*/
          /* may be up to 64 characters, and the number to be edited may   */
          /* contain up to 32 characters. The number may not contain more  */
          /* significant digits than there are digit select characters in  */
          /* the pattern. If there are more digits selected by the pattern */
          /* than there are in the number, leading zeros will be assumed.  */
          /* In the pattern, the first character may be:                   */
          /*     $ (floating dollar sign)                                  */
          /*     * (check protection)                                      */
          /*     - (floating minus sign)                                   */
          /* The body of the edit pattern will be composed of digit select */
          /* characters (z and 9) and other characters, handled as follows:*/
          /*     z (zero suppression output is a blank in this position    */
          /*        until significance is set by receipt of a significant  */
          /*        digit or a 9 in the pattern. After significance is     */
          /*        set, output is a digit from the number.)               */
          /*     9 (output is a digit from the number and significance     */
          /*        is set, even if the digit is a leading zero.)          */
          /*   other characters in the pattern will be output as-is after  */
          /*        significance is set, but will be output as blanks      */
          /*        before significance is set.                            */
          /* Characters in the pattern following the last digit select will*/
          /* be output as-is if the number is negative, otherwise output   */
          /* will be blanks for these pattern positions.                   */
          /*                                                               */
          /* When * check protection is selected, output will be *, rather */
          /* than blanks as mentioned above.                               */
          /*                                                               */
          /* An integer is returned to indicate success or errors:         */
          /*                 0 = successful edit                           */
          /*                 1 = pattern too long (over 64 characters)     */
          /*                 2 = too many digits selected (over 32)        */
          /*                 3 = no output digits selected in pattern      */
          /*                 4 = number contains non-numeric data          */
          /*                 5 = number has more digits than the pattern   */
          /*                                                               */
          /* Examples:                            nbr=             outf=   */
          /*    err=edit(outf,"zz,zz9.99-",nbr);  0                0.00    */
          /*                                      123              1.23    */
          /*                                      562983       5,629.83    */
          /*                                      -4675           46.75-   */
          /*    err=edit(outf,"$,$$$.$$",nbr);    0                        */
          /*                                      123             $1.23    */
          /*                                      562983      $5,629.83    */
          /*                                      -4675          $46.75    */
          /*    err=edit(outf,"***.**",nbr);      0                        */
          /*                                      123            **1.23    */
          /*                                      562983   err = 5         */
          /*                                      -4675          *46.75    */
          /*    err=edit(outf,"--,--9.99",nbr);   0                0.00    */
          /*                                      123              1.23    */
          /*                                      562983       5,629.83    */
          /*                                      -46.75         -46.75    */
          /*                                                               */
          /* Author R Thornton April 1989                                  */
          /*****************************************************************/
          /**/
          int edit(char output[], char pattern[], char number[]]) {
            char float_val = ' ';
            char fill_val = ' ';
            char sign_val = ' ';
            int signif = 0;
            int psize = 0;
            int pdig = 0;
            int plast = 0;
            int ndig = 0;
            char nbr[33];
            char ch= ' ';
            int po=0;
            int n=0;

          /*****************************************************************/
          /* examine pattern: set up float and fill, count size and digits */
          /*****************************************************************/
            if(((ch=pattern[00]) == '$') || (ch == '*') || (ch == '-'))
              float_val = ch;
            if(ch == '*')
              fill_val = '*';
            while((ch=pattern[po]) != '\0') {
              if((ch == 'z') || (ch == '9')) {
                pdig++;
                plast = po;
              }
              psize++;
              po++;
            }
            if(psize > 63)
              return(1);
            if(pdig > 32)
              return(2);
            if(!pdig)
              return(3);
          /*****************************************************************/
          /* examine number: set up sign, count digits, check numeric.     */
          /* set error if more digits than pattern, move right justified   */
          /*****************************************************************/
            if(number[0] == '-') {
              sign_val = '-';
              n = 1;
            }
            while((ch=number[n]) != '\0') {
              if((ch < '0') || (ch > '9'))
                return(4);
              ndig++;
              n++;
            }
            if(ndig > pdig)
              return(5);
            for(po=0;po<(pdig-ndig);po++)
              nbr[po] = '0';
            if(sign_val == ' ')
              n = 0;
            else
              n=1;
            for(;po<pdig;po++,n++)
              nbr[po] = number[n];
          /*****************************************************************/
          /* scan across the pattern, setting the corresponding output     */
          /* byte from pattern, fill, or amt depending on the pattern      */
          /* character and state of significance.                          */
          /*****************************************************************/
            if(float_val != ' ') {
              output[0] = ' ';
              po = 1;
            }
            else
              po = 0;
            n = 0;
            while((po <= plast)) {
              ch = pattern[po];
              if(ch == 'z') {
                if(signif) {
                  output[po] = nbr[n];
                  n++;
                }
                else {
                  if(nbr[n] == '0') {
                    output[po] = fill_val;
                    n++;
                  }
                  else {
                    output[po] = nbr[n];
                    signif = -1;
                    n++;
                    if(float_val == ' ')
                      ;
                    else
                      if((float_val == '$') || (sign_val == '-'))
                        output[po-1] = float_val;
                  }
                }
              }
              else if(ch == '9') {
                output[po] = nbr[n];
                if(!signif) {
                  signif = -1;
                  if(float_val == ' ')
                    ;
                  else
                    if((float_val == '$') || (sign_val == '-'))
                      output[po-1] = float_val;
                }
                n++;
              }
              else {
                if(signif)
                  output[po] = pattern[po];
                else
                  output[po] = fill_val;
              }
              po++;
            }
            while((ch=pattern[po]) != '\0') {
              if(sign_val == ' ')
                output[po++] = fill_val;
              else
                output[po++] = pattern[po];
            }
            return(0);
          }
          /*****************************************************************/
          /* termination: close files                                      */
          /*****************************************************************/
          void terminate() {
            sprintf(number,"%ld",incount);       /* convert input count    */
            edit(cntline, "zz,zzz,zz9", number); /* edit number to cntline */
            strcpy(cntline+10," input records read\n"); /* message to line */
            writecnt();                          /* write count line       */
            sprintf(number,"%ld",tlrcnt);        /* convert trailer count  */
            edit(cntline, "zz,zzz,zz9", number); /* edit number to cntline */
            strcpy(cntline+10," trailer record count\n"); /* msg to line   */
            writecnt();                          /* write count line       */
            sprintf(number,"%ld",outcount);      /* cnvrt out file count   */
            edit(cntline, "zz,zzz,zz9", number); /* edit number to cntline */
            strcpy(cntline+10," output records written\n"); /* msg to line */
            writecnt();                          /* write count line       */
            sprintf(number,"%ld",errcnt);        /* cnvrt error recd count */
            edit(cntline, "zz,zzz,zz9", number); /* edit number to cntline */
            strcpy(cntline+10," error records written\n"); /* msg to line  */
            writecnt();                          /* write count line       */
            if(incount == tlrcnt)                /* input ct = trailer ct  */
                  strcpy(cntline, "Input and trailer counts match\n"); /*ok*/
            else                                 /* if not,                */
                  strcpy(cntline,"ERROR==> Input and trailer counts do not match
!! <==ERROR\n");
            writecnt();                          /* write count line       */
            strcpy(errline,cntline);             /* copy message to errline*/
            writeerr();                          /* and write to error     */
            errcnt--;                            /* don't count messages   */
            if(incount != (outcount + errcnt)) { /* if input = output count*/
                     strcpy(cntline,"ERROR==> Input and output counts do not bal
ance!<==ERROR\n");
              writecnt();                        /* write count line       */
              strcpy(errline,cntline);           /* copy message to errline*/
              writeerr();                        /* and write to error log */
            }
            fclose(infile);                      /* close input file       */
            fclose(outfile);                     /* close output file      */
            fclose(cntfile);                     /* close count file       */
            fclose(errfile);                     /* close error log file   */
          }
