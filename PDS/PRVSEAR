/*************/
/* prvsear.c */
/*********************************************************************/
/* prv_search() is the binary search function for the prv_server     */
/*********************************************************************/
#include <stdio.h>
#include <string.h>

/*********************************************************************/
/*     Global variables defined in the main() function               */
/*********************************************************************/
extern FILE    *prvfile;              /* provider file pointer       */
extern char     prvname[80];          /* provider file name          */
extern int      prvrecln;             /* provider file record length */
extern int      prvkeyln;             /* length of provider number   */
extern long int prvflsiz;             /* provider file size in bytes */
extern long int prvrecds;             /* total records in provider   */
extern long int currecrd;             /* current provider file recnbr*/
extern long int curofst;              /* shrinking work offset       */
extern long int prvseek; /* current provider seek offset*/

/*********************************************************************/
/*    Function prototypes                                            */
/*********************************************************************/
void prv_init(void);                  /* initialization function */
int  prv_search(char * prv_key);      /* binary search function */
void prv_term(void);                  /* termination function */

/*********************************************************************/
/* caller supplies a provider number. pvr_search() performs a binary */
/* binary search of the provider file. If a record is found for the  */
/* specified provider number, the number of reads required to locate */
/* record will be returned. if the provider is not found, 0 is retur */
/*********************************************************************/
int prv_search(char * prv_key) {

  int      compare = 0;                /* current compare indicator */
  int      result = 0;                 /* result indicator */
  char     record[256];                /* input record area */

  currecrd = 0;                        /* set initial record number */
  curofst = prvrecds - 1; /* initial work offset */
  compare = -1;                        /* set compare for low */
  while(curofst != 1) {
    curofst ++;                     /* add 1 to insure rounding high */
    curofst /= 2;                      /* offset / 2 (rounded high) */
    if(compare < 0) {                  /* if last key read was low */
      currecrd += curofst; /* add offset incr */
      if(currecrd >= prvrecds) {                     /* if past end */
        compare = 1;                   /* set compare to high */
        continue;                      /* and continue to while */
      }
      else ;
    }
    else {                             /* if last key read was high */
      currecrd -= curofst; /* subtract offset*/
      if(currecrd < 0) {               /* if result prior to 1st slot*/
        compare = -1;                  /* set compare to low */
        continue;                      /* and continue to while */
      }
      else ;
    }
   prvseek = currecrd * prvrecln;
    if((fseek(prvfile,prvseek,0)) != 0)                /* file pos. */
      break;                           /* terminate if error */
    fread(record,prvrecln,1,prvfile); /* read the record */
    result++;                          /* count the reads */
    if((compare=memcmp(record,prv_key,prvkeyln)) == 0) {
      result = 0 - result;             /*         /* make count plus */
      break;                           /* yes, quit */
    }
  }
  return(result);
}
