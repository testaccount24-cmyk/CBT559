/**************/
/* getwords.c */
/*******************************************************************/
/* reads a text file and extracts English words for use in creating*/
/* a list of English words.                                        */
/*                                                                 */
/* Author R Thornton January 1995                                  */
/*******************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void initialize(int argc, char *argv[]); /* initialization function */
void mainline(void);                  /* mainline function */
void getaword(void);               /* extract word from input record */
void process_word(void);              /* process the word */
void validate_word(void);             /* apply validity checks */
void add_word_to_table(void);         /* add word to table */
void write_table_to_file(void);    /* write the word table to a file */
void terminate(void);                 /* termination function */
void readrec(void);                   /* read next input file record */
void writerec(void);                  /* write record to output file */

FILE *infile, *outfile;               /* file handle pointers */
char innam[81];                       /* input file name */
char outnam[81];                      /* output file name */

char inrecord[256];                   /* input file record area */

int i,j,k,l,m;                        /* general purpose int */
int valid_word = 0;                   /* valid word indicator */
int morerecs = -1;                    /* input end-of-file switch */
int morewords = -1;                   /* more words in record */
int table_full = 0;                   /* word table full indicator */
int wordleng;                         /* word length */
int nbr_vowels;                       /* number vowels in word */


char word[80];                        /* a word */
struct {
  int word_length;                    /* length of word in entry */
  char word_entry[15];                /* word in entry */
} word_table[1000];                   /* table of words */
int w1,w2,wcurr,whigh=0;              /* table subscripts */

char trans[256] = {
 '\0',' ',' ',' ',' ',' ',' ',' ',' ',' ','\0',' ',' ','\0',' ',' ',
 ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ', /*1*/
 ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ', /*2*/
 ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ', /*3*/
 ' ','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o', /*4*/
 'p','q','r','s','t','u','v','w','x','y','z',' ',' ',' ',' ',' ', /*5*/
 ' ','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o', /*6*/
 'p','q','r','s','t','u','v','w','x','y','z',' ',' ',' ',' ',' ', /*7*/
 ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ', /*8*/
 ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ', /*9*/
 ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ', /*a*/
 ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ', /*b*/
 ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ', /*c*/
 ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ', /*d*/
 ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ', /*e*/
 ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '  /*f*/
};

int  main(int argc, char *argv[]) {
 initialize(argc, argv);       /* open files */
 while(morerecs)               /* perform mainline until */
  mainline();               /* no more records */
 terminate();                  /* close files */
 exit(0);                      /* quit */
}
/*********************************************************************/
/* mainline function: process input file until no more records.      */
/*********************************************************************/
void mainline(void) {
  while(morewords)
 process_word();
  readrec();
}
/*********************************************************************/
/* process the word                                                  */
/*********************************************************************/
void process_word() {
  validate_word();
  if(valid_word)
 add_word_to_table();
  if(table_full)
 write_table_to_file();
  getaword();
}
/*********************************************************************/
/* validate the word: apply validity tests                           */
/*********************************************************************/
void validate_word() {
  valid_word = 0;                      /* assume it is invalid */
}
/*********************************************************************/
/* add the current word to the word table.                           */
/*********************************************************************/
void add_word_to_table() {
  table_full = 1;                      /* indicate table is full */
}
/*********************************************************************/
/* extract next word from input record                               */
/*********************************************************************/
void getaword() {
}
/*********************************************************************/
/* initialization: open files, read first input record.              */
/*********************************************************************/
void initialize(int argc, char *argv[]) {
  if(argc == 3) {
    strcpy(innam,argv[1]);
    strcpy(outnam,argv[2]);
  }
  else {
    printf("\nEnter input file spec: ");
    gets(innam);
    printf("\nEnter output file spec: ");
    gets(outnam);
  }
  if((infile=fopen(innam,"rb")) == NULL) { /* open input */
    printf("Can't open file %s.",innam);
    exit(1);
  }
  if((outfile=fopen(outnam,"wb")) == NULL) { /* open output */
    printf("Can't open file %s.",outnam);
    exit(1);
  }
  readrec();             /* read first input file record */
  getaword();            /* extract first word in record */
}
/*********************************************************************/
/* read next input file record. at end of file, set morerecs switch. */
/*********************************************************************/
void readrec() {
  if(fgets(inrecord,255,infile) == NULL) /* read input until eof */
    morerecs = 0;                       /* set switch at end of file */
  if(morerecs)
    for(l=strlen(inrecord),i=0;i<l;i++)  /* scan record, translate */
      inrecord[i] = trans[inrecord[i]];  /*to lowercase alphabet only*/
}
/*********************************************************************/
/* write the table of words to a disk file and clear it              */
/*********************************************************************/
void write_table_to_file() {
  fputs(inrecord,outfile);         /* write output record */
}
/*********************************************************************/
/* termination: close files                                          */
/*********************************************************************/
void terminate() {
  fclose(infile);                           /* close files */
  fclose(outfile);
}
