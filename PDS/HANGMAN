// Filename :  Hangman1.cpp
// Programmer: Linda Hopkins
// Student ID: 230-80-9819
//Instructor:  Samah Senbel
// Date:       October 25, 1995
// Description : This program plays the hangman game.

// header file for graphics functions
#include <graphics.h>
// header file containing the getch() function
#include <conio.h>
// header file containing the exit function
#include <stdlib.h>
// header file for the cout function
#include <iostream.h>
//header file for filestream functions
#include <fstream.h>
//header file for sleep functions
#include <dos.h>
#include <stdio.h>

#define inp_file "dict.dat"

//Function prototypes
void instruct();
void noose();
void head();
void body();
void lleg();
void rleg();
void larm();
void rarm();
void lfoot();
void rfoot();
void DisplayChar( int x , int y , char c );
int Pick_random();
void Get_word(int secret, char& let1, char& let2, char& let3, char& let4);
void Guess(char [], int, char&);
int CheckGuess(char, char [], int ); // changed to return int RNT
void Decide_guess(char [],, int, int&, int&, char, char, char, char);
void wrongg(int& );
void Exit(int, int);
void Display_guess(char [], int);


void main()
{
  int secret;
  int z;
  int k=0;
  int r=0;
  char guess;
  char let1;
  char let2;
  char let3;
  char let4;
  char guess_array[13] ={0,0,0,0,0,0,0,0,0,0,0,0,0};

  int gdriver = DETECT, gmode;     // Graphics driver & mode, auto detection
  int errorcode;                   // type of error found , if any

  instruct();
  getch();
  clrscr();
  secret = Pick_random();          //Pick a random number to select mystery word
  Get_word(secret, let1, let2, let3, let4);

  cout<<"The secret word is "<<let1<<let2<<let3<<let4;   //Print out used in tes
ting
  getch();

  initgraph(&gdriver, &gmode, "");  // Start graphics mode
  errorcode = graphresult();        // Show type of error, if any
  if (errorcode != grOk)            // an error occurred
    {
      cout << "Graphics error: %s\n", grapherrormsg(errorcode);
      cout << "Press any key to halt:";
      getch();
      exit(1);                      //terminate with an error code
    }
   setcolor(YELLOW);

   noose();

//Play the Game!!

     for (z=0; z<11; z++)                   //total guesses max 11
       { if ( ! ((r==4) || (k==8)) )        //max 4 right guesses; 8 wrong guess
es
    { Guess(guess_array, z, guess);
      Decide_guess(guess_array, z, k, r, let1, let2, let3, let4);
      Exit(r,k);
     }
      }
//End the Game!!

      closegraph();
      Display_guess(guess_array, z);

return ;
}


/////////////////////////////////////////////////////////////////////////////
//Function: Head
   void head()                      /* Draw head, Circle with  */
   {
   circle( 320,100,20);            /* center (320,100) and radius 20 */
   }


/////////////////////////////////////////////////////////////////////////////

//Function: Body
   void body()
   {
   line( 320,120,320,200);         /* Draw body,line from (320,140) to (320,300)
 */
   }
/////////////////////////////////////////////////////////////////////////////


//Function:left leg
   void lleg()
   {
   line( 320, 200, 250, 275 );      /* Draw left leg,line from (320,300) to (220
,420) */
   }
/////////////////////////////////////////////////////////////////////////////


//Function: left foot
   void lfoot()
   {
   line(250, 275, 225, 265);         /* left foot, line from (220,420) to (200,4
20) */
   }
/////////////////////////////////////////////////////////////////////////////


//Function: right leg
   void rleg()
   {
   line( 320 , 200 , 390, 275 );   /* Draw Right leg, line from (320,300) to (42
0,420) */
   }
/////////////////////////////////////////////////////////////////////////////


//Function: right foot
   void rfoot()
   {
    line( 390, 275, 415, 265);        /* right foot, line from (420,420) to (440
,420) */
   }
////////////////////////////////////////////////////////////////////////////////
/

//Function: left arm
   void larm()
   {
   line( 320 , 150, 260, 175);     /* Draw left arm, line from (320,160) to ( 22
0,220) */
   }
//////////////////////////////////////////////////////////////////////////////

//Function: right arm
   void rarm()
   {
   line( 320 , 150 , 380 , 175 );  /* Draw right arm, line from (320,160) to (42
0,220) */
   }
/////////////////////////////////////////////////////////////////////////////

//Function: noose
   void noose()
  {
   line(0,380,640,380);            /* Draw ground line */
   line(320,80,320,30);            /* Draw hangman's noose */
   line(320,30,200,30);
   line(200,30,200,380);

   rectangle(5, 475, 40, 425);     /*Boxes for correct letter*/
   rectangle(70,475,105,425);
   rectangle(135,475,170,425);
   rectangle(200,475,235,425);
  }
///////////////////////////////////////////////////////////////////////////////

//Function: instructions
  void instruct()
  {
  cout<<"Are you ready to play hangman?"<< endl;
  cout<<"You will be prompted to enter letters to guess a four letter word."<<en
dl;
  cout<<"If you are successful, the letter will appear in one of the boxes."<<en
dl;
  cout<<"If you are unsuccessful, another part of the hanged man's body will app
ear."<<endl;
  cout<<"Good luck.  Press enter to begin the game."<<endl;
  }
/////////////////////////////////////////////////////////////////////////////

// Function   : DisplayChar
// Parameters : location (x,y) and the character c to be displayed
// Purpose    : Converts the character into a string containing this
//              character & the null character. Then, displays the
//              string in Graphics mode at location (x,y)


void DisplayChar( int x , int y , char c )
{
  char s[2];
  s[0] = c ;
  s[1]= '\0';             // 2nd char of the string is the null char.
  outtextxy( x , y , s );

return;
}

//////////////////////////////////////////////////////////////////////////////Fu
nction:  Pick_random
//Purpose:   To select a random number in preparation for selecting a word
//           from the input file.

int Pick_random()
{
  int secret;
  randomize();
  secret = random(10);
  cout<<endl<<endl;
  cout<<"We picked word number "<<secret<<endl;

return secret;
}

//////////////////////////////////////////////////////////////////////////////Fu
nction:  Get_word
//Purpose:   To read in a word from a 10 word input file.

void Get_word(int secret, char& let1, char& let2, char& let3, char& let4)
{
  int i;
  ifstream cinf;
  cinf.open(inp_file);

  for (i=0; i<=secret; i++)
    cinf>>let1>>let2>>let3>>let4;

  cinf.close();

return;
}
//////////////////////////////////////////////////////////////////////////////
//Function:  Guess
//Purpose:   Allows the user to enter guesses while a 0 is returned from
//           CheckGuess.  This enables the user to guess duplicate letters
//           without penalty.

void Guess(char guess_array[], int z, char& guess)
{
   int ret=0;                      // return value from CheckGuess RNT


   while(ret == 0)
    {               // call CheckGuess until no dupl RNT
      guess=getch();
      ret = CheckGuess(guess, guess_array, z); // get return value RNT
     }
  return ;
}
/////////////////////////////////////////////////////////////////////////////
//Function:  CheckGuess
//Purpose:   Enters the guess into a guess array; checks to see if the letter
//           has been guessed previously.  Duplicate guesses do not penalize
//           the guesser.

int CheckGuess(char guess, char guess_array[], int z)
{                                                // returns int RNT
   int i;

   for (i=0; i<11; i++)
    {
      if (guess_array[i] == 0)
       {
  guess_array[z] = guess;
  return(1);                  // return(1) = o.k. guess RNT
       }
      else
  if (guess == guess_array[i])
  {
    outtextxy(300,20,"Duplicate guess, Try again.");
    sleep(5);
    setcolor(BLACK);;
    outtextxy(300,20,"Duplicate guess, Try again.");
    setcolor(YELLOW);
     return(0);            // return(0) = duplicate guess RNT
  }
    }
   return(1);                   // should never get here RNT
}
/////////////////////////////////////////////////////////////////////////////
//Function:  Decide_guess
//Purpose:   If the guess is a correct one, the letters will be displayed in the
//           letter boxes. If there is not a correct guess, the wrong guess func
tion
//           will be invoked, which will draw the hanged man in increments accor
ding
//           to the number of wrong guesses.

void Decide_guess(char guess_array[], int z, int& k, int& r, char let1, char let
2, char let3, char let4)

{
       if     (let1 == guess_array[z])
     {
        DisplayChar(22,450,guess_array[z]);
        r++;
     }
   else if (let2 == guess_array[z])
     {
     DisplayChar(87,450,guess_array[z]);
     r++;
     }
   else if (let3 == guess_array[z])
     {
      DisplayChar(152,450,guess_array[z]);
      r++;
     }
   else if  (let4 == guess_array[z])
     {
      DisplayChar(217,450,guess_array[z]);
      r++;
     }
   else wrongg(k);

}

//////////////////////////////////////////////////////////////////////////////Fu
nction: wrongg
//Purpose : To assign body parts to wrong guesses

void wrongg(int& k)
{
   k=k+1;
   switch(k)
   {
    case 1 : head();
    break;
    case 2 : body();
    break;
    case 3 : rarm();
    break;
    case 4 : larm();
    break;
    case 5  : lleg();
    break;
    case 6  : rleg();
    break;
    case 7  : rfoot();
    break;
    case 8  : lfoot();
    break;
   }                       //end switch
return;
}
//////////////////////////////////////////////////////////////////////////////Fu
nction:  Exit
//Purpose:   Prints a lose or win message.  Returns the guesser to the main
//           function, where the graphics driver is closed.

void Exit(int r, int k)

{
  if (r==4)
   {
   outtextxy(400,450,"You Win, press enter to exit.");
   getch();
   return;
   }
  if (k==8)
  {
   outtextxy(400,450, "You Lose, press enter to exit.");
   getch();
   return;
  }
return;
}

//////////////////////////////////////////////////////////////////////////////Fu
nction:  Display_guess
//Purpose:   After the hangman game is over, total guesses (excluding duplicates
)
//           are displayed in text mode.

void Display_guess(char guess_array[13], int z)
{
  cout<<"Your guesses were as follows:"<<endl;
      for (z=0; z<12; z++)
 {
 cout<<"Guess_array ["<<z<<"] is: "<<guess_array[z]<<endl;
 }
return;
}
