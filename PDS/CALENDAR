/*********************************************************************/
/* calendar: provides capability to create a monthly processing date */
/*           for the MEDSCREEN A.I. Expert System. Processing is as  */
/*           follows:                                                */
/*           1. Display main menu: Create New Process File           */
/*                                 Modify Current Process File       */
/*                                 Save Process File and Quit        */
/*                                 Quit Without Saving Process File  */
/*           2. If choice is to create a new process file, prompt for*/
/*              the month and year and develop calendar values for   */
/*              this month, and processing continues at step 6.      */
/*           3. If choice is to modify the current file, and a file  */
/*              exists, it is read into memory, and processing       */
/*              continues at step 6, otherwise an error message is   */
/*              displayed with the main menu.                        */
/*           4. If choice is to save and quit, and the file in memory*/
/*              is valid, it is written to disk, and the program     */
/*              terminates normally, otherwise an error message is   */
/*              displayed with the main menu.                        */
/*           5. If the choice is to quit without saving, the program */
/*              terminates normally.                                 */
/*           6. The calendar values are displayed on the screen, and */
/*              the operator is given an opportunity to change dates */
/*              from process to no-process or vice-versa. When all   */
/*              changes are complete the main menu is displayed.     */
/*                                                                   */
/* Author R. Thornton 4/89                                           */
/*********************************************************************/
/*                        *** header files ***                       */
#include <stdio.h>
#include <dir.h>
#include <alloc.h>
#include <string.h>

/*                        *** function prototypes ***                */
int update();                 /* update calendar */
void quit();                  /* quit: return to DOS */
int save();                   /* save process date file to disk */
int read();                   /* read process date file from disk */
int getdate();                /* get process year and month */
void clrscn();                /* clear screen area */
void wrtscn();                /* write screen area to display */

/*                   *** global data areas ***                        */
char screenÝ24¨Ý80¨; /* main menu area                */
int  gotfile = 0;          /* -1 = got file in memory */
int  err = 0;              /* -1 = error found        */
char errmsgÝ80¨ = " "; /* error message               */

/*                   *** process file area ***                        */
FILE *procdate;
struct
{
 int   pr_month;        /* month */
    int   pr_year;         /* day   */
    int   pr_first;        /* weekday of first day of month, 0=Sunday */
    char  pr_dayÝ31¨;      /* day indicators, p=process, n=non-process*/
} pr_record;               /*                 blank=invalid day of mth*/

/*********************************************************************/
/*1. Display main menu, get response, and process accordingly        */
/*********************************************************************/
main()
{
 int i;

 while(1)
 {
  clrscn();                      /* clear screen area */
  strcpy(screenÝ23¨,errmsg); /* error message to screen */
  strcpy(errmsg,"   ");          /* clear error message */
        err = 0;                       /* clear error indicator */
  strcpy(screenÝ1¨,"        CALENDAR MAIN MENU          ");
  strcpy(screenÝ4¨,"F1 CREATE NEW PROCESS FILE          ");
  strcpy(screenÝ6¨,"F2 MODIFY CURRENT PROCESS FILE      ");
  strcpy(screenÝ8¨,"F3 SAVE PROCESS FILE AND QUIT       ");
  strcpy(screenÝ10¨,"F4 QUIT WITHOUT SAVING PROCESS FILE");
  wrtscn();                      /* display menu */
  while(getch() != 0);
  i = getch();
  switch(i)
  {
   case 59:                   /* F1: create new process file */
    err = getdate();
    if(err)
     break;
    else
    {
     err = update();
     break;
    }
   case 60:                   /* F2: modify current process file */
    err = read();
    if(err)
     break;
    else
    {
     err = update();
     break;
    }
   case 61:                   /* F3: save and quit */
    err = save();
    break;
   case 62:                   /* F4: quit without save */
    quit(0);
  }
 }
}
/*********************************************************************/
/*2. Create a new process file. Operator is prompted for a month and */
/*   year, then calendar data is created for the specified month.    */
/*********************************************************************/
int getdate()
{
 char ch,moyrÝ81¨;
 int i,j;
 char monthsÝ12¨Ý10¨        = {"January ","February ","March ","April ",
        "May      ","June     ","July     ","August   ",
        "September","October  ","November ","December "};
 gotfile = 0;
 while(gotfile == 0)
 {
  clrscn();
  i=0;
  pr_record.pr_month = 0;
  while(pr_record.pr_month == 0)
  {
   while(1)
   {
    printf("\x1BÝ6;0f"); /* cursor to row 6 col 0 */
    printf("Please type in process month as a number between 1 and 12:
 ");
    printf("\x1BÝ10D"); /* back up 10 columns */
    for(j=0;j<3;j++)
    {
     moyrÝj¨ = getche();
     if(moyrÝj¨ == '\r')
      break;
    }
    moyrÝj¨ = '\0';
    i = atoi(moyr);       /* and make it numeric */
    if((i > 0) && (i < 13))
     break;
   }
   printf("\x1BÝ8;0f"); /* cursor to row 8, col 0 */
   ch = ' ';
   printf("Thank you. You have selected month %02d (%s)",i,monthsÝi-1¨);
   printf("\x1BÝ10;0f"); /* cursor to row 10, col 0 */
   printf("Is this correct (y/n)?");
   while(1)
   {
    ch=getch();          /* read response */
    if((ch == 'y') || (ch == 'Y'))
    {
     pr_record.pr_month = i;
     break;
    }
    else if((ch == 'n') || (ch == 'N'))
    {
     clrscn();
     break;
    }
   }
  }
  pr_record.pr_year = 100;
  while(pr_record.pr_year == 100)
  {
   while(1)
   {
    printf("\x1BÝ12;0f"); /* cursor to row 12 col 0 */
    printf("Please type in process year as a number between 0 and 99:
");
    printf("\x1BÝ10D"); /* back up 10 columns */
    for(j=0;j<3;j++)
    {
     moyrÝj¨ = getche();
     if(moyrÝj¨ == '\r')
      break;
    }
    moyrÝj¨ = '\0';
    i = atoi(moyr);       /* and make it numeric */
    if(i < 100)
     break;
   }
   printf("\x1BÝ14;0f"); /* cursor to row 14, col 0 */
   ch = ' ';
   printf("Thank you. You have selected year %02d",i);
   printf("\x1BÝ16;0f"); /* cursor to row 16, col 0 */
   printf("Is this correct (y/n)?");
   while(1)
   {
    ch=getch();          /* read response */
    if((ch == 'y') || (ch == 'Y'))
    {
     pr_record.pr_year = i;
     gotfile = -1;              /* process file here */
     break;
    }
    else if((ch == 'n') || (ch == 'N'))
    {
     strcpy(screenÝ11¨," ");
     strcpy(screenÝ13¨," ");
     strcpy(screenÝ15¨," ");
     break;
    }
   }
  }
 }

}
/*********************************************************************/
/*3. Read current process file. If the file exists, it is read into  */
/*   memory, otherwise an error indicator and error message are set. */
/*********************************************************************/
int read()
{
 int status=0;

 if((procdate=fopen("c:\process.dat","rb"))==NULL)         /* open */
  {
  strcpy(errmsg,"UNABLE TO OPEN C:\PROCESS.DAT FOR INPUT");
  return(-1);
  }
 status = fread(&pr_record,sizeof(pr_record),1,procdate);  /* read */
 fclose(procdate);
 if(status == 1)
  return(0);
 else
  {
  strcpy(errmsg,"ERROR READING C:\PROCESS.DAT");
  return(-1);
  }
}
/*********************************************************************/
/*4. Save file. The process file record is written to disk if it     */
/*   exists in memory.                                               */
/*********************************************************************/
int save()
{
 if(gotfile)
 {
  if((procdate=fopen("c:\process.dat","wb"))==NULL)         /* open */
   {
   strcpy(errmsg,"UNABLE TO OPEN C:\PROCESS.DAT FOR OUTPUT");
   return(-1);
   }
        else
  {
   fwrite(&pr_record,sizeof(pr_record),1,procdate);      /* write */
   fclose(procdate);
   return(0);
  }
 }
 else
 {
  strcpy(errmsg,"NO VALID RECORD AVAILABLE TO WRITE, USE F1 OR F2");
  return(-1);
 }
}
/*********************************************************************/
/*5. Quit without save. The program terminates normally.             */
/*********************************************************************/
void quit()
{
 exit(0);
}
/*********************************************************************/
/*6. Display and permit updates to the calendar data.                */
/*********************************************************************/
int update()
{
  strcpy(errmsg,"GOT TO UPDATE FUNCTION");
  return(-1);
}
/*********************************************************************/
/*clear screen to blanks                                             */
/*********************************************************************/
void clrscn()
{
 int i;

 for(i=0;i<79;i++)
     screenÝ0¨Ýi¨ = ' ';            /* blank line 0, pos 1-79 */
 screenÝ0¨Ý79¨ = '\0';              /* end of string in 80    */
 for(i=0;i<23;i++)
  strcpy(screenÝi+1¨,screenÝi¨); /* copy to lines 1-24 */
 printf("\x1BÝ2J");                 /* clear display screen   */
}
/*********************************************************************/
/*write to screen from screen line area                              */
/*********************************************************************/
void wrtscn()
{
 int i;

 printf("\x1BÝ2J");                /* clear screen */
 for(i=0;i<24;i++)
  printf("%s\n",screenÝi¨);
}
