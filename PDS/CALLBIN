/*************/
/* callbin.c */
/****************************************/
/* test calls to the binsrch() function */
/* Author R Thornton, October, 1993     */
/****************************************/
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

int binsrch(FILE *rf,
   char *argkey,
   int recdleng,
   int keyleng,
   int keyloc,
   char *record);

int main(void) {
  FILE *rf;                     /* pointer to file to be searched    */
  FILE *in;                     /* read the same file sequentially   */
  char file_name[80];           /* filename of file to be searched   */
  char *recdptr, *inrecptr;     /* pointer to record areas           */
  int  recdleng;                /* record length                     */
  char argkey[257];             /* argument area                     */
  int  keyleng;                 /* key length                        */
  int  keyloc;                  /* key location in recd (0 relative) */
  int  result;                  /* result of binsrch                 */
  char work[16];                /* work string                       */
  long int total_reads = 0;     /* total of all binary search reads  */
  int  total_records = 0;       /* total of input records            */
  int  i;                       /* work item                         */
  int  max_reads = 0;           /* maximum binary reads for a record */
  float avg_reads;              /* average reads */

  printf("\nEnter name of file to search: ");
  gets(file_name);
  if((rf = fopen(file_name,"rb")) == NULL) {
 printf("\nUnable to open that file, terminating");
 exit(1);
  }
  if((in = fopen(file_name,"rb")) == NULL) {
 printf("\nUnable to open that file, terminating");
 exit(1);
  }
  recdleng = 0;
  printf("\nEnter length of each file record in bytes: ");
  gets(work);
  recdleng = atoi(work);
  if(recdleng == 0) {
 printf("\nInvalid record length, terminating");
 exit(1);
  }
  if((recdptr = (char *)malloc(recdleng)) == 0) {
 printf("\nUnable to obtain storage for search record, terminating.");
 exit(1);
  }
  if((inrecptr = (char *)malloc(recdleng)) == 0) {
 printf("\nUnable to obtain storage for input record, terminating.");
 exit(1);
  }
  keyleng = 0;
  printf("\nEnter length of key field in bytes: ");
  gets(work);
  keyleng = atoi(work);
  if((keyleng == 0) || (keyleng > recdleng)) {
 printf("\nInvalid key length, terminating.");
 exit(1);
  }
  if(keyleng > 256) {
 printf("\nMax key length is 256 bytes, terminating.");
 exit(1);
  }
  printf("\nEnter offset to key in record (0 = 1st byte): ");
  gets(work);
  keyloc = atoi(work);
  if((keyloc + keyleng) > recdleng) {
    printf("\nInvalid key offset: key past end of record, "
           "terminating.");
    exit(1);
  }
  while(1) {
 if((fread(inrecptr,recdleng,1,in) != 1)) {  /* read next record */
   printf("\nEnd of file, %d records read",total_records);
   printf("\n             %ld total binary search reads",total_reads);
   avg_reads = (float) total_reads / (float) total_records;
   printf("\n             %f average reads per record",avg_reads);
   printf("\n             %d maximum reads for one record",max_reads);
   exit(0);
 }
 total_records++;                   /* add 1 to total records read */
 for(i=0;i<keyleng;i++)
   argkey[i] = inrecptr[keyloc + i];
 argkey[i] = '\0';
    result = 0;
    result = binsrch(rf,
            argkey,
            recdleng,
            keyleng,
            keyloc,
            recdptr);
 if(result > 0) {
   total_reads += result;    /* accumulate total binary search reads */
   if(result > max_reads)
  max_reads = result;
 }
    else
      printf("\nNo record found for key %s.",argkey);
  }
}
/****************************************************************/
/*          binsrch.c, a binary search function                 */
/* caller supplies:                                             */
/*    (1) a pointer to the FILE to be searched (must be OPEN).  */
/*    (2) a pointer to the key argument used for the search.    */
/*    (3) length of each record in the file (int).              */
/*    (4) length of the key in the records (int).               */
/*    (5) relative position of the key in the record (int, 0+). */
/*    (6) a pointer to the callers record return area.          */
/* function returns:                                            */
/*    (1) an int whose value is a count of the number of reads  */
/*        required to locate the the record, positive if the    */
/*        desired record was found, negative if it was not.     */
/*    (2) the record found, if the search was successful.       */
/*                                                              */
/* Author R Thornton, October, 1993                             */
/****************************************************************/

int binsrch(FILE *rf,
   char *arg_key,
   int recdleng,
   int keyleng,
   int keyloc,
   char *record)
{

  long int file_size;             /* file length in bytes */
  long int max_slots;             /* number records in file */
  long int curr_slot  = 0;        /* current record slot number */
  long int curr_offset = 0;       /* current offset increment */
  long int file_offset;           /* computed file offset */
  int      compare = 0;           /* current compare indicator */
  int      result = 0;            /* result indicator */

  result = 0;                     /* set up for not found */
  if(fseek(rf,0,SEEK_END) != 0)   /* set file pointer to end of file */
 return(result);               /* terminate if error */
  if((file_size = ftell(rf)) == -1L) /* get file size in bytes */
 return(result);               /* terminate if error */
  max_slots = file_size / recdleng; /* compute nbr records in file */
  curr_slot = 0;                 /* set initial slot number */
  curr_offset = max_slots - 1;   /* set initial offset increment */
  compare = -1;                  /* set compare for low */
  while(curr_offset != 1) {
 curr_offset ++;              /* add 1 to insure rounding high */
 curr_offset /= 2;            /* offset / 2 (rounded high) */
 if(compare < 0) {            /* if last key read was low */
   curr_slot += curr_offset;     /* add offset increment */
   if(curr_slot >= max_slots) {  /* if result past end of file */
  compare = 1;                   /* set compare to high */
  continue;                      /* and continue to while */
   }
   else ;
 }
 else {                       /* if last key read was high */
   curr_slot -= curr_offset;     /* subtract offset increment */
   if(curr_slot < 0) {           /* if result prior to 1st slot */
  compare = -1;                  /* set compare to low */
  continue;                      /* and continue to while */
   }
   else ;
 }
 file_offset = curr_slot * recdleng;   /* compute file offset */
 if((fseek(rf,file_offset,0)) != 0)    /* position in file */
   break;                              /* terminate if error */
 fread(record,recdleng,1,rf);          /* read the record */
 result--;                             /* count the reads */
 if((compare=memcmp(record+keyloc,arg_key,keyleng)) == 0) { /* fnd? */
   result = 0 - result;                /*          /* make cnt plus */
   break;                                          /* yes, quit */
 }
  }
  return(result);
}



