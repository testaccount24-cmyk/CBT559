/**************/
/* endvelmt.c */
/*****************************************************************/
/* This is the first of a series of programs intended to match   */
/* Endevor elements with load library members. Here, the primary */
/* input files are the element file created by the ENDVDATA      */
/* program (asm), and the EDGE product machine friendly file     */
/* after it is stripped and reformatted by EDGESTRP and then     */
/* sorted in member name order. This file contains records for   */
/* in-house written programs from all production libraries.      */
/*                                                               */
/* The element file contains elements from all Endevor environ-  */
/* ments. it is sorted in element name order.                    */
/*                                                               */
/* Processing:                                                   */
/* 1. Input files are matched on member name, csect name, element*/
/*    name and compiler. When all these match, a MATCH record is */
/*    written, but no record is written to the REMELMTS file nor */
/*    to the REMLDMDS file.                                      */
/* 2. Records from the Endevor elements input file that do not   */
/*    match Load Module records are reformatted and written to   */
/*    the REMELMTS file.                                         */
/* 3. Records from the LDMODS file that are unmatched are written*/
/*    to the REMLDMDS file.                                      */
/*                                                               */
/* Author R Thornton Dec 2000                                    */
/*****************************************************************/
#include <string.h>
#include <stdio.h>
#include <stdlib.h>

/*****************************************************************/
/* Global Data Areas                                             */
/*****************************************************************/

struct LmodRecd {             /* Load Module Record description      */
char Member[8];               /* member name                         */
char filler1;
char Csect[8];                /* csect name                          */
char filler2;
char LoadLib[4];              /* load library abbreviation           */
char filler4;
char CompType[2];             /* Compiler type                       */
char filler[55];              /*                                     */
};

struct ElmtRecd {             /* element record description          */
char Element[8];              /* element name                        */
char fill1;                   /*                                     */
char Compiler[11];            /* compiler name                       */
char fill2;                   /*                                     */
char Envirnmt[8];             /* Endevor environment name            */
char fill3;                   /*                                     */
char System[8];               /* Endevor system name                 */
char fill4;                   /*                                     */
char SubSys[8];               /* Endevor sub-system name             */
char fill5;                   /*                                     */
char Type[5];                 /* Endevor type name                   */
char fill6;                   /*                                     */
char ProcGrp[8];              /* Endevor Processor group name        */
char fill7;                   /*                                     */
char Processr[8];             /* Endevor Processor name              */
char fill8[9];                /*                                     */
};

struct {                      /* matching element/load module record */
char Element[8];              /* Endevor element name                */
char Envirnmt[8];             /* Endevor environment name            */
char System[8];               /* Endevor system name                 */
char SubSys[8];               /* Endevor subsystem name              */
char Type[5];                 /* Endevor type name                   */
char ProcGrp[8];              /* Endevor Processor group name        */
char Processr[8];             /* Endevor Processor name              */
char Compiler[11];            /* compiler name                       */
char Member[8];               /* Matching member name                */
char Csect[8];                /* Matching Csect name                 */
char CompType[2];             /* Matching compiler type              */
char LoadLib[4];              /* load library designator             */
} mtch;                       /* instance of matching output record  */

struct LmodRecd inlm;         /* input load module record            */
struct ElmtRecd inel;         /* input Endevor element record        */

int MoreLmod = -1;            /* 0 = eof load module file            */
int MoreElem = -1;            /* 0 = eof endevor element file        */
FILE *lmods,*elements,*matched,*remelmts,*remldmds; /* FILE pointers */
int ElmtRead = 0;             /* total element records read          */
int LmodRead = 0;             /* total Load module records read      */
int MatchOut = 0;             /* total match records written         */
int RemLMOut = 0;             /* total remaining load module records */
int RemElOut = 0;             /* total remaining element records     */
int DuplElmt = 0;             /* nbr duplicate element records       */
int DuplLmod = 0;             /* nbr duplicate load module records   */
char ElCompTy[3] = "??";      /* Element record compiler type        */
char LmCompTy[3] = "? ";      /* Load Module record compiler type    */
/*****************************************************************/
/* function prototypes                                           */
/*****************************************************************/
int main(void);                   /* executive control routine */
void Initial(void);               /* initialization routine */
void Process(void);               /* Processing routine */
void ReadLM(void);                /* reads the LMODS file */
void ReadEl(void);                /* reads the ELEMENTS file */
void WrtMatch(void);              /* write matching output record */
void WrtElRem(void);              /* write unmatched element record */
void WrtLMRem(void);              /* write unmatched load mod record */
void Terminat(void);              /* termination routine */
/*****************************************************************/
/* main() function: executive control                            */
/*****************************************************************/
int main(void) {
  Initial();                         /* initialize for Processing */
  while(MoreLmod || MoreElem) /*until exhausted, */
    Process();                       /*    Process records. */
  Terminat();                        /* Terminate Processing */
  return(0);
}
/*****************************************************************/
/* Initial(): initialization routine. opens files.               */
/*****************************************************************/
void Initial(void) {
  lmods=fopen("dd:LMODS","rb,type=record,recfm=fb,lrecl=80");
  if(lmods == NULL) {
    perror("\ncan't open the LMODS file");
    exit(8);
  }
  elements=fopen("dd:ELEMENTS","rb,type=record,recfm=fb,lrecl=80");
  if(elements == NULL) {
    perror("\ncan't open the ELEMENTS file");
    exit(8);
  }
  remelmts=fopen("dd:REMELMTS","wb,type=record,recfm=fb,lrecl=80");
  if(remelmts == NULL) {
    perror("\ncan't open the REMELMTS file");
    exit(8);
  }
  remldmds=fopen("dd:REMLDMDS","wb,type=record,recfm=fb,lrecl=80");
  if(remldmds == NULL) {
    perror("\ncan't open the REMLDMDS file");
    exit(8);
  }
  matched=fopen("dd:MATCHED","wb,type=record,recfm=fb,lrecl=86");
  if(matched == NULL) {
    perror("\ncan't open the MATCHED file");
    exit(8);
  }
  ReadLM();                      /* Read first LMODS record */
  ReadEl();                      /* Read first ELEMENT record */
}
/*****************************************************************/
/* Process: for each record in the ELEMENTS file, compare the    */
/* endevor element name to the load module member name and csect */
/* name. if these are identical, and the compiler used is the    */
/* same for both files, a match record is written. All unmatched */
/* records are written to the unmatched output files. It is      */
/* possible that multiple load module records may be present for */
/* a single element record, however element names should be      */
/* unique.                                                       */
/*****************************************************************/
void Process(void) {
  int cpr;                       /* compare result */

  cpr = memcmp(inel.Element, inlm.Member, 8); /* member : element */
  if(cpr < 0) {                  /* if element low... */
    WrtElRem();                  /* write unmatched element record */
    ReadEl();                    /* Read next ELEMENT record */
    return;
  }
  else
    if(cpr > 0) {                /* if element is high... */
      WrtLMRem();                /* write unmatched load mod record */
      ReadLM();                  /* Read next LMODS record */
      return;
    }
  if(memcmp(ElCompTy, LmCompTy, 2) == 0)
    WrtMatch();                   /* write matching output record */
  else {
    WrtElRem();                   /* write unmatched element record */
    WrtLMRem();                   /* write unmatched load mod record */
  }
  ReadLM();                       /* Read next LMODS record */
  ReadEl();                       /* Read next ELEMENT record */
  return;
}
/*****************************************************************/
/* ReadLM() reads the next record from the LMODS file into       */
/* the inlm area. At end of file, the MoreLmod field is set */
/* to zero (false).                                              */
/*****************************************************************/
void ReadLM(void) {
  char HoldMem[9] = "        ", HoldCsect[9] = "        ";
  char HoldCTyp[3] = "   ";
  memcpy(HoldMem, inlm.Member, 8);  /* save member name */
  memcpy(HoldCsect, inlm.Csect, 8); /* save member name */
  while(-1) {
    if(MoreLmod) {
      if(!fread(&inlm, 1,  80, lmods)) {
        if(feof(lmods)) {
          MoreLmod = 0;
          inlm.Member[0] = '\xFF';
          return;
        }
        else
          perror("\nError (0 read) reading LMODS file");
          exit(8);
      }
      if(ferror(lmods)) {
        perror("\nError (ferror) reading LMODS file");
        exit(8);
      }
      LmodRead++;
    }
    else
      return;
    memcpy(LmCompTy, inlm.CompType, 2);
    if((memcmp(LmCompTy, "VO", 2) == 0) ||
       (memcmp(LmCompTy, "V4", 2) == 0))
         memcpy(LmCompTy, "VS", 2);
    if((memcmp(HoldMem, inlm.Member, 8) == 0) &&
       (memcmp(HoldCsect, inlm.Csect, 8) == 0) &&
       (memcmp(LmCompTy, HoldCTyp, 2))) {
         printf("Multiple LMODS records for Member %s, Csect %s, "
            "CompType %s\n",HoldMem, HoldCsect, LmCompTy);
         WrtLMRem();
         DuplLmod++;
         continue;
    }
    else
      break;
  }
}
/*****************************************************************/
/* ReadEl() reads the next record from the ELEMENTS file into    */
/* the el area. At end of file, the MoreElem field is set to     */
/* zero (false).                                                 */
/*****************************************************************/
void ReadEl(void) {
  char HoldElem[9] = "        ";
  char HoldCTyp[3] = "   ";

  memcpy(HoldElem, inel.Element, 8); /* save the current element */
  memcpy(HoldCTyp, ElCompTy, 2); /* save the current Compile type */
  while(-1) {
    if(MoreElem) {
      if(!fread(&inel, 1,  80, elements)) {
        if(feof(elements)) {
          MoreElem = 0;
          inel.Element[0] = '\xFF';
          return;
        }
        else
          perror("\nError (0 read) reading ELEMENTS file");
          exit(8);
      }
      if(ferror(elements)) {
        perror("\nError (ferror) reading ELEMENTS file");
        exit(8);
      }
      ElmtRead++;
    }
    else
      return;
    if(memcmp(inel.Compiler, "390COB", 6) == 0) /* COBOL390 element? */
      memcpy(ElCompTy, "C3", 2);
    else
      if(memcmp(inel.Compiler, "COBII", 5) == 0) /* COBOL II Elemnt? */
        memcpy(ElCompTy, "C2", 2);
      else
        if(memcmp(inel.Compiler, "VSCOB", 5) == 0) /* VS COBOL Elem? */
          memcpy(ElCompTy, "VS", 2);
        else
          if(memcmp(inel.Compiler, "ASM", 3) == 0) /* Assem Elemnt? */
            memcpy(ElCompTy, "AR", 2);
          else
            memcpy(ElCompTy, "??", 2);
    if((memcmp(HoldElem, inel.Element, 8) == 0) &&
       (memcmp(HoldCTyp, ElCompTy, 2) == 0)) {
      printf("Multiple element records for element %s, CompType %s\n",
              HoldElem, ElCompTy);
      WrtElRem();
      DuplElmt++;
      continue;
    }
    else
      break;
  }
}
/*****************************************************************/
/* WrtMatch() writes a record to the matched output file.        */
/*****************************************************************/
void WrtMatch(void) {         /* write matching output record */
  if(inel.Element[0] == '\xFF') return;
  memcpy(mtch.Element, inel.Element, 8);
  memcpy(mtch.Envirnmt, inel.Envirnmt, 8);
  memcpy(mtch.System, inel.System, 8);
  memcpy(mtch.SubSys, inel.SubSys, 8);
  memcpy(mtch.Type, inel.Type, 5);
  memcpy(mtch.ProcGrp, inel.ProcGrp, 8);
  memcpy(mtch.Processr, inel.Processr, 8);
  memcpy(mtch.Compiler, inel.Compiler, 11);
  memcpy(mtch.Member, inlm.Member, 8);
  memcpy(mtch.Csect, inlm.Csect, 8);
  memcpy(mtch.CompType, inlm.CompType, 2);
  memcpy(mtch.LoadLib, inlm.LoadLib, 4);
  fwrite(&mtch, 1,  sizeof(mtch), matched);
  if(ferror(matched)) {
    perror("\nError (ferror) writing MATCHED file");
    printf("\nmatch file record length is %d",sizeof(mtch));
    exit(8);
  }
  MatchOut++;
  memset(&mtch, ' ', sizeof(mtch));
}
/*****************************************************************/
/* WrtElRem() writes a record to the REMELMTS file.              */
/*****************************************************************/
void WrtElRem(void) {         /* write unmatched element record */
  if(inel.Element[0] == '\xFF') return;
  fwrite(&inel, 1,   sizeof(inel), remelmts);
  if(ferror(remelmts)) {
    perror("\nError (ferror) writing REMELMTS file");
    exit(8);
  }
  RemElOut++;
  memset(&inel, ' ', sizeof(inel));
}
/*****************************************************************/
/* WrtLMRem() writes a record to the REMLDMDS file.              */
/*****************************************************************/
void WrtLMRem(void) {         /* write unmatched load mod record */
  if(inlm.Member[0] == '\xFF') return;
  fwrite(&inlm, 1,  sizeof(inlm), remldmds);
  if(ferror(remldmds)) {
    perror("\nError (ferror) writing REMLDMDS file");
    exit(8);
  }
  RemLMOut++;
  memset(&inlm, ' ', sizeof(inlm));
}
/*****************************************************************/
/* Terminat() closes the files and prepares for termination.     */
/*****************************************************************/
void Terminat(void) {
  printf("%d Element Records read\n",ElmtRead);
  printf("%d Load Module Records Read\n",LmodRead);
  printf("%d Match Records Written\n",MatchOut);
  printf("%d Remaining Load Module Records Written\n",RemLMOut);
  printf("%d Remaining Element Records Written\n",RemElOut);
  printf("%d Duplicate Element Records Found\n",DuplElmt);
  printf("%d Duplicate Load Module Records\n",DuplLmod);
  fclose(lmods);
  fclose(elements);
  fclose(matched);
  fclose(remelmts);
  fclose(remldmds);
}
