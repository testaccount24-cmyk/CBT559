/* copyto.c */
/**********************************************************************/
/* copy files with multiple "from" wildcards. Asks before overwriting */
/* existing files. Does not copy if name & size same.                 */
/* Proper usage is: copyto <destination> <wildcard 1>...              */
/*        destination is a path, such as a:\\files1                   */
/*        wildcard selects zero or more generic filename groups       */
/*            in the current directory,such as d*.* w*.* *.c ...      */
/**********************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <dir.h>
#include <errno.h>
#include <conio.h>
#include <io.h>
#include <string.h>
#include <fcntl.h>
#include <sys\stat.h>
#include <dos.h>

#define MAX_WILDCARD_LEN 31
#define DYN_ARRAY_SIZE 50
#define INC_ARRAY_SIZE 25

struct ffblk* fn_edir(char[][], int, struct ffblk*, int*);
int fn_copyto(char*, char[][], int);
int inx=0, outx=0;
/*************************************************************************/
/* This is the MAIN function which obtains the parameters from the user, */
/* calls fn-edir() to build the a sorted list of programs that match the */
/* wildcard source files, then calls function fn_copyto() which copies   */
/* the selected files to the destination path.                           */
/*************************************************************************/
int main(int argc, char* argv[]) {
 char wildcard[10][MAX_WILDCARD_LEN];
 unsigned int num_wildcard, num_files, i;
 char ch, destination[65];

 clrscr();
 directvideo = 1;
 if(argc < 2) {
  printf("\nProper usage is: copyto <destination> <wildcard 1>...");
  printf("  destination is a path, such as a:\\files1");
  printf("  wildcard selects zero or more generic filename groups");
  printf("           in the current directory,such as d*.* w*.* *.c ...");
  printf("           Default is NOT *.* if nothing is specified.");
  printf("  Copy is done only when there is no file by the same name in ");
  printf("\n the output file, or if the input file has a later modification");
  printf("\n date than the present file.");
  exit(0);
 } /* end if */
 else {
  strcpy(destination, argv[1]);
  strupr(destination);
  num_wildcard = argc - 2;
  for(i = 0; i < num_wildcard; i++)
   strcpy(wildcard[i], argv[i+2]);
 } /* end else */
 fn_copyto(destination, wildcard, num_wildcard);
} /* end main */

/***************************************************************************/
/*The destination parameter is the pathname of the target directory. The   */
/*wildcard parameter passes an array of strings that contain the wildcards.*/
/*The num_wildcard parameter specifies the number of wildcards. The        */
/*fn_dir() function is called to create an array of filenames from the     */
/*current directory using the wildcards given. fn_copyto() returns a 1 if  */
/*any file is found, or 0 if no matches are found.                         */
/***************************************************************************/

/* fn_copyto() */
int fn_copyto(char* destination,
 char wildcard[][MAX_WILDCARD_LEN],
 int num_wildcard) {
 struct stat in, out;
 struct ffblk *files;
 int num_files, num_bytes, i;
 char ch, path[65];
 char buffer[4096];
 int infile, outfile;
 unsigned int const BUF_SIZE = 4096;
 int line_num, exists;

 files = fn_edir(wildcard, num_wildcard, files, &num_files);
 if(num_files > 0) {
  for(i = 0; i < num_files; i++) {
   strcpy(path, destination);
   strcat(path, "\\");
   strcat(path, (files+i)->ff_name);
   exists = 0;        /* reset output file exists switch */
   if(inx == 0) {
    infile = 0;
    infile = open((files+i)->ff_name, O_RDONLY | O_BINARY);
   }
   if(infile < 1) {
    printf("\n%s:",(files+i)->ff_name);
    perror(" open input 1 failed");
    exit(0);
   } /* end if */
   else
    inx = 1;
   if(outx  == 0) {
    outfile = 0;
    outfile = open(path, O_WRONLY | O_BINARY);
   }
   if(outfile > 0) {
    exists = -1;        /* show output file exists */
    outx = 1;
    if((fstat(infile, &in) == 0) && (fstat(outfile, &out) == 0)) {
     if((in.st_atime <= out.st_atime)) {
      printf("\n%s was not copied (older)",(files+i)->ff_name);
      printf("\n    in=%08X, out=%08X",in.st_atime, out.st_atime);
      close(outfile);
      outfile = 0;
      outx = 0;
      close(infile);
      infile = 0;
      inx = 0;
      continue;
     } /* end */
    } /* end if */
    else {
     printf("\n%s was not copied, FSTAT error",(files+i)->ff_name);
    } /* end else */
   } /* end if */
   close(outfile);
   outfile = 0;
   outx = 0;
   /* reopen file handle to allow new file creation */
   if(outx == 0) {
    outfile = 0;
    outfile = open(path, O_CREAT | O_WRONLY | O_BINARY, S_IWRITE);
   } /* end if */
   if(outfile < 1) {
    printf("\n%s:",path);
    perror(" open output 2 failed");
   } /* end if */
   else
    outx = 1;
   /* check if both files are opened o.k. */
   if((inx == 1) && (outx == 1)) {
    while((num_bytes = read(infile, buffer, BUF_SIZE)) > 0)
    write(outfile, buffer, num_bytes);
    close(infile);
    infile = 0;
    inx = 0;
    fstat(outfile, &out);
    close(outfile);
    outfile = 0;
    outx = 0;
    if(exists) {
     printf("\n%s replaced in: %s", (files+i)->ff_name, path);
     printf("\n    in=%08X, out=%08X",in.st_atime, out.st_atime);
    } /* end if */
    else {
     printf("\n%s copied to: %s", (files+i)->ff_name, path);
     printf("\n    date=%08X",out.st_atime);
    } /* end else */
   } /* end if */
   else {
    if(inx == 1) {
     close(infile);
     infile = 0;
     inx = 0;
    } /* end if */
    if(outfile > 0) {
     close(outfile);
     outfile = 0;
     outx = 0;
    } /* end if */
   } /* end else */
  } /* end for */
  free(files);
  return 1;
 } /* end if */
 else
  return 0;
} /* end fn_copyto) */

/***************************************************************************/
/* fn_edir() builds an ordered array of filenames which match any of the   */
/* wildcards specified and insures that there are no duplicates in the     */
/* list. fn_dir() returns a pointer to the ffblk structure. the result     */
/* should be reassigned to the pointer-typed parameter, files, to update   */
/* the address of the dynamic array. The invoker of fn_edir() must         */
/* deallocate the dynamic array when its data is no longer needed.         */
/***************************************************************************/

/* function fn_edir */
struct ffblk* fn_edir(char wildcard[] [MAX_WILDCARD_LEN],
 int num_wildcard,
 struct ffblk *files,
 int *num_files) {
 int n= DYN_ARRAY_SIZE;
 unsigned int blk_size = sizeof(struct ffblk);
 int i, j, k, nomatch, not_unique, found;
 struct ffblk *ptr;

 /* allocate new block for file structures */
 files = (struct ffblk *) calloc(n,blk_size);
 ptr = (struct ffblk*) calloc(n,blk_size);
 *num_files = 0;          /* initialize matching file count */
 /* loop to look for the specified wildcards */
 for(i=0;i<num_wildcard;i++) {
  /* search for the first matching entry */
  nomatch = findfirst((char *)(wildcard+i),ptr,0);
  /* while a match is found */
  while(!nomatch) {
   not_unique = 0;             /* assume filename is unique */
   /* search in the available array of filenames */
   if(*num_files > 0)
    for(j=0;(j < *num_files) && (!not_unique); j++)
     if(!strcmp(ptr->ff_name, (files+j) -> ff_name))
      not_unique = 1;              /* found a match */
    /* if filename is unique process it */
    if(!not_unique) {
     (*num_files)++;           /* increment file count */
     /* need more dynamic memory? */
     if(*num_files > n) {
      n += INC_ARRAY_SIZE;
      files = (struct ffblk *) realloc(files, n * blk_size);
     } /* end if */
     /* insert inorder */
     if(*num_files > 1) {
      found = 0;
      k = *num_files - 1;
      /* search for proper insertion location */
      for(j=0; (j < k) && (!found); j++) {
       if(strcmp(ptr->ff_name, (files+j)->ff_name) < 0) {
        found = 1;
        /* move rest of array upward */
        memmove((files+j+1), (files+j), (k - j)*blk_size);
        /* insert new element */
        *(files+j) = *ptr;
       } /* end if */
      } /* end for */
      if(!found)          /* insert as last array element */
       *(files + k) = *ptr;
     } /* end if */
     else                    /* assign first entry */
      *files = *ptr;
    } /* end if */
    /* search for the next matching entry */
    nomatch = findnext(ptr);
  } /* end while */
 } /* end for */
 return files;    /* return pointer to dynamic array */
} /* end fn_edir */
